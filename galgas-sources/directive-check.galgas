#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @checkInstructionAST : @instructionAST {
  @lstring mCheckMessage
  @expressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $check$
    @lstring checkMessage
    select
      checkMessage = ["" here]
    or
      $"string"$ ?checkMessage
    end
    $($
    <expression> !?ioAST ?let @expressionAST expression
    ioInstructionList += !@checkInstructionAST.new {!checkMessage.location !checkMessage !expression}
    $)$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @checkInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @checkInstructionAST instructionSemanticAnalysis
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
{
#--- Analyze expression
  @instructionListIR instructionGenerationList = {}
  [mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
    ?result:@objectIR expressionResult
  ]
#--- Check inferred type
  if not [[expressionResult type].kind isBoolean] then
    error mInstructionLocation : "expression is not boolean"
  end
#--- Check expression is static, and true
  if not [expressionResult isStatic] then
    error mInstructionLocation : "expression is not static: use assert instruction"
  else
    [expressionResult literalInteger ?1* ?value:@bigint value]
    if value != 1G then
      if mCheckMessage.string != "" then
        error mCheckMessage : "check failure: " + mCheckMessage
      else
        error mCheckMessage : "check failure"
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
