#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @checkInstructionAST : @instructionAST {
  public var @lstring mCheckMessage
  public var @expressionAST mExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $ctAssert$
    let @lstring checkMessage
    select
      checkMessage = ["" here]
    or
      $"string"$ ?checkMessage
    end
    $($
    <expression> !?ioAST ?let @expressionAST expression
    ioInstructionList += !@checkInstructionAST.init {!checkMessage.location !checkMessage !expression}
    $)$
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @checkInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @checkInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
{
#--- Analyze expression
  var @instructionListIR instructionGenerationList = §[]
  [self.mExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
    ?result: let @objectIR expressionResult
  ]
  [inContext.mImplicitConversionToBooleanMap generateConvertToBooleanCode
    !expressionResult
    !self.mCheckMessage.location
    !?ioTemporaries
    !?instructionGenerationList
    !?alloca: ioAllocaList
    ?let booleanOperand
  ]
#--- 
  switch booleanOperand 
  case compileTime (boolValue) :
    if not boolValue then
      if self.mCheckMessage.string != "" then
        error self.mCheckMessage : "check failure: " + self.mCheckMessage
      else
        error self.mCheckMessage : "check failure"
      end
    end
  case llvmVariable (*) :
    error self.mInstructionLocation : "expression is not static: use assert instruction"
  end
#--- Check inferred type
#  if not [[expressionResult type].kind isBoolean] then
#    error mInstructionLocation : "expression is not boolean"
#  end
##--- Check expression is static, and true
#  if not [expressionResult isStatic] then
#    error mInstructionLocation : "expression is not static: use assert instruction"
#  else
#    [expressionResult literalInteger ?1* ?value:@bigint value]
#    if value != 1 then
#      if mCheckMessage.string != "" then
#        error mCheckMessage : "check failure: " + mCheckMessage
#      else
#        error mCheckMessage : "check failure"
#      end
#    end
#  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
