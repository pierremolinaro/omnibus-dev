#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @extendStaticArrayExpressionAST {
  case expression (@expressionAST exp)
  case function (@lstring functionName)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @extendStaticArrayExpressionListAST {
  @extendStaticArrayExpressionAST mExpression
  @location mEndOfExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @extendStaticArrayDeclarationAST : @abstractDeclaration {
  @lstring mStaticlistName
  @extendStaticArrayExpressionListAST mExpressions
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @extendStaticArrayDeclarationAST location -> @location outLocation {
  outLocation = mStaticlistName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @extendStaticArrayDeclarationAST keyRepresentationForErrorSignaling -> @string {
  result = "staticlist " + mStaticlistName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $extend$
    $staticArray$
    $identifier$ ?let staticListName
    $($
    @extendStaticArrayExpressionListAST expressions = {}
    repeat
      select
        <expression> ?let exp
        expressions += !.expression {!exp:exp} !.here
      or
        $func$
        $identifier$ ?let functionName
        expressions += !.function {!functionName:functionName} !.here
      end
    while
      $,$
    end
    $)$
    ioAST.mDeclarationListAST += !@extendStaticArrayDeclarationAST.new {!staticListName !expressions}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendStaticArrayDeclarationAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  !@abstractDeclaration outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendStaticArrayDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Node name
  let nodeName = @lstring.new{!mStaticlistName.string + "." + [[ioGraph keyList] length] !mStaticlistName}
#--- Add 'constant name' node
  [!?ioGraph addNode !nodeName !self]
#--- Add dependency from static type declaration
  [!?ioGraph addEdge !nodeName !mStaticlistName]
#--- Add dependency from source expression
  for (operand *) in mExpressions do
    switch operand
    case expression (@expressionAST exp) :
      [exp addDependenceEdgeForStaticExpression !nodeName !?ioGraph]
    case function (@lstring unused functionName) :
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

listmap @staticlistValues_listMap (@stringlist)

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendStaticArrayDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticlistValues:@staticlistValues_listMap ioStaticListValueMap
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
{
  [ioContext.mStaticlistMap searchKey !mStaticlistName ?let staticArrayPropertyList]
  if [staticArrayPropertyList length] != [mExpressions length] then
    error mStaticlistName
    : [[staticArrayPropertyList length] string] + " expressions required, "
    + [[mExpressions length] string] + " provided"
  else
    var staticValue = "{"
    var firstStaticValue = true
    for (operand endOfExp) in mExpressions, (* type) in staticArrayPropertyList do
      switch operand
      case expression (@expressionAST exp) :
        if [[type kind] isFunction] then
          error endOfExp : "a function name is expected here"
        else
          initialVariableMap (
            !context:ioContext
            !mode:.bootMode
            !globalsAreConstant:true # Any value, there is no defined global variable at this stage
            !returnTypeName:["" nowhere]
            ?@variableMap variableMap
          )
          @semanticTemporariesStruct temporaries = .default
          @instructionListIR instructionGenerationList = {}
          @allocaList allocaList = {}
          [exp analyzeExpression
            !self:.null
            !directAccessToPropertiesAllowed:false
            !inGuard:false
            !routineNameForInvocationGraph:["compiler" nowhere]
            !optionalTargetType:type
            !context:ioContext
            !mode:.bootMode
            !?temporary:temporaries
            !?staticStringMap:ioGlobalLiteralStringMap
            !?variableMap:variableMap
            !?alloca:allocaList
            !?instructionListIR:instructionGenerationList
            ?result:let @objectIR expressionResult
          ]
        #--- Check assignment compatibility
          let result = checkAssignmentCompatibility (
            !source:expressionResult
            !targetAnnotationType:type
            !errorLocation:endOfExp
            !staticTypeAllowed:false
          )
          if ([instructionGenerationList length] > 0) || ([allocaList length] > 0) || not [result isStatic] then
            error endOfExp : "source expression cannot be statically computed"
          end
        #--- Enter in static value
          if firstStaticValue then
            firstStaticValue = false
          else
            staticValue += ", "
          end
          staticValue += [[type kind] llvmTypeName] + " " + [expressionResult llvmName]
        end      
      case function (@lstring unused functionName) :
      end
    end
    staticValue += "}"
    ioStaticListValueMap += !mStaticlistName !staticValue
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendStaticArrayDeclarationAST enterRoutinesInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext unused ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extendStaticArrayDeclarationAST semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @staticlistValues_listMap generateLLVM ?!@string ioLLVMcode {
  if [self count] > 0 then
    ioLLVMcode += llvmTitleComment (!"Static Lists")
    for (key initList) in self do
      ioLLVMcode += "@" + llvmNameForGlobalVariable (!key) + " = private unnamed_addr constant ["
      ioLLVMcode += [[initList length] string] + " x %$" + llvmNameForStaticListElementType (![key nowhere]) + "] [\n"
      for (value) in initList
      do
        ioLLVMcode += "  %$" + llvmNameForStaticListElementType (![key nowhere]) + " " + value
      between
        ioLLVMcode += ",\n"
      end
      ioLLVMcode += "\n]\n\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

