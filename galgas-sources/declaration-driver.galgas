#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @driverPropertyListAST {
  @lstring mPropertyName
  @bool mIsConstant # true if declared with "let"
  @lstring mTypeName # Empty string if no type annotation
  @structurePropertyInitOptionalExpressionAST mOptionalExpression
}

#·······················································································································

struct @driverDeclarationAST {
  @lstring mDriverName
  @driverPropertyListAST mDriverPropertyListAST
  @functionDeclarationListAST mDriverFunctionDeclarationListAST
  @systemRoutineDeclarationListAST mDriverSystemRoutineListAST
  @guardDeclarationListAST mDriverGuardListAST
  @initListAST mDriverInitListAST
}

#·······················································································································

list @driverDeclarationListAST {
  @driverDeclarationAST mDriver
}

#·······················································································································

list @driverInstanciationArgumentListAST {
  @lstring mSelector
  @expressionAST mExpression
}

#·······················································································································

list @driverInstanciationListAST {
  @lstring mDriverName
  @driverInstanciationArgumentListAST mDriverInstanciationArgumentList
}

#·······················································································································

class @implementedDriverAST : @abstractDeclarationAST {
  @lstring mDriverName
  @bool mIsInstancied
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <driver_property> ?!@ast ioAST ?!@driverPropertyListAST ioPropertyList {
    @bool constant
    select
      $var$
      constant = false
    or
      $let$
      constant = true
    end
    $identifier$ ?let fieldName
    select
      <type_definition> !?ioAST ?let typeName
      select
        ioPropertyList += !fieldName !constant !typeName !.noExpression
      or
        $=$
        <expression> !?ioAST ?let initExpression
        ioPropertyList += !fieldName !constant !typeName !.expression {!initExpression:initExpression}
      end
    or
      $=$
      <expression> !?ioAST ?let initExpression
      ioPropertyList += !fieldName !constant !["" nowhere] !.expression {!initExpression:initExpression}
    end
  }
  
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $driver$
    $identifier$ ?let driverName
    ${$
    @functionDeclarationListAST functionDeclarationListAST = {}
    @driverPropertyListAST driverPropertyListAST = {}
    @guardDeclarationListAST guardListAST = {}
    @systemRoutineDeclarationListAST svcListAST = {}
    @initListAST initList = {}
    repeat
    while
      <declaration_init>!?ioAST !driverName ?let init
      initList += !init
    while
      <isr> !?ioAST !driverName
    while
      <driver_property>!?ioAST !?driverPropertyListAST
    while
      <function> !?ioAST!?functionDeclarationListAST
    while
     <system_routine>!?ioAST !?svcListAST
    while
      <guard> !?ioAST !?guardListAST
    while
      $;$
    end
    $}$
  #--- Declare driver
    ioAST.mDriverDeclarationListAST += !@driverDeclarationAST.new {
      !driverName
      !driverPropertyListAST
      !functionDeclarationListAST
      !svcListAST
      !guardListAST
      !initList
    }
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $driver$
    $identifier$ ?let driverName
    $($
    @driverInstanciationArgumentListAST driverInstanciationArgumentList = {}
    repeat
    while
      $!selector:$ ?let selector
      <expression> !?ioAST ?let expression
      driverInstanciationArgumentList += !selector !expression
    end
    $)$
    ioAST.mRequiredDriverListAST += !driverName !driverInstanciationArgumentList
  }
 
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @implementedDriverAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
 [!?ioGraph addNode !mDriverName !self]
  let driverTypeName = llvmTypeNameFromPLMname (!llvmDriverNameFromName (!mDriverName))
 [!?ioGraph addEdge !mDriverName !driverTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @implementedDriverAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "driver " + mDriverName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @implementedDriverAST location -> @location outLocation {
  outLocation = mDriverName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @implementedDriverAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  RETAIN REQUIRED DRIVERS IN DECLARATION LIST AST                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @driverInstanciationArgumentMap {
  @expressionAST mExpression
  insert insertKey error message "duplicated '%K' selector"
  search searchKey error message "uninitialized '%K' property"
}

#·······················································································································

map @instanciedDriverMap {
  @driverInstanciationArgumentMap mDriverInstanciationArgumentMap
  insert insertKey error message "the '%K' driver is already instancied in %L"
  search searchKey error message "internal error %K"
}

#·······················································································································

proc retainRequiredDrivers ?!@ast ioAST {
  @instanciedDriverMap instanciedDriverMap = {}
  @stringset validDriverNames = {} # For checking all required drivers have been declared
  for (driverName args) in ioAST.mRequiredDriverListAST do
     @driverInstanciationArgumentMap driverInstanciationArgumentMap = {}
     for (selector expression) in args do
       [!?driverInstanciationArgumentMap insertKey !selector !expression]
     end
    [!?instanciedDriverMap insertKey !driverName !driverInstanciationArgumentMap]
  end
#--- Append required drivers to declaration list AST (and init list AST)
  for (declaration) in ioAST.mDriverDeclarationListAST do
    validDriverNames += !declaration.mDriverName.string
    let driverIsInstancied = [instanciedDriverMap hasKey !declaration.mDriverName.string]
  #--- Build driver instanciation property list
    @structurePropertyListAST driverPropertyListAST = {}
    if driverIsInstancied then
      [instanciedDriverMap searchKey !declaration.mDriverName ?let driverInstanciationArgumentMap]
    #--- Build driver property list, adding init expression
      @stringset validArgumentSet = {}
      for (propertyName constant optionalPropertyTypeName optionalInitExpression) in declaration.mDriverPropertyListAST do
        @expressionAST initExpression
        switch optionalInitExpression 
        case noExpression :
          [driverInstanciationArgumentMap searchKey !propertyName ?initExpression]
          validArgumentSet += !propertyName.string
        case expression (expression) :
          initExpression = expression
        end
        driverPropertyListAST += 
         !propertyName
         !constant
         !false
         !optionalPropertyTypeName
         !.expression{!initExpression:initExpression}
      end
    #--- Check all arguments of driver instanciation have been used
      for (unusedSelector) in [driverInstanciationArgumentMap keySet] - validArgumentSet do
        error [driverInstanciationArgumentMap locationForKey !unusedSelector] : "invalid selector"
      end
    end
  #---
    let driverTypeName = llvmDriverNameFromName (!declaration.mDriverName)
    ioAST.mDeclarationListAST += !@implementedDriverAST.new {!declaration.mDriverName !driverIsInstancied}
    ioAST.mDeclarationListAST += !@structureDeclarationAST.new {
      !driverTypeName
      !{}
      !false # Do not generate assignment routine
      !driverPropertyListAST
      !declaration.mDriverFunctionDeclarationListAST
      !declaration.mDriverSystemRoutineListAST
      !declaration.mDriverGuardListAST
    }
    for (init) in declaration.mDriverInitListAST do
      ioAST.mDeclarationListAST += !init
    end
  end
  ioAST.mDriverDeclarationListAST = {}
#--- Check all drivers named in instanciation constructs have been implemented
  for (unusedDriverName) in [instanciedDriverMap keySet] - validDriverNames do
    error [instanciedDriverMap locationForKey !unusedDriverName] : "undefined driver"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @driverMap {
  @bool mIsInstancied
  insert insertKey error message "the '%K' driver is already declared in %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @implementedDriverAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph unused ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
  [!?ioContext.mDriverMap insertKey !mDriverName !mIsInstancied]
  let driverType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !llvmDriverNameFromName (!mDriverName)} type]
  [!?ioContext.mValuedObjectMapForContext insertDriver !mDriverName !mIsInstancied !driverType]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedRequiredDriver.new {!mDriverName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTICS                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedRequiredDriver : @abstractDecoratedDeclaration {
  @lstring mDriverName
}

#·······················································································································

override method @decoratedRequiredDriver semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  let driverTypeName = llvmDriverNameFromName (!mDriverName)
  let driverTypeProxy = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !driverTypeName}
  let constructorMap = [driverTypeProxy type].constructorMap
  [constructorMap  searchKey !.new {!"()" !driverTypeName.location} ?* ?let constructorValue]
  [constructorValue structure ?sortedOperandList:let sortedOperandList]
  @operandIRList initialValueList = {}
  for (initialValue *) in sortedOperandList do
    initialValueList += !initialValue
  end
  ioIntermediateCodeStruct.mDriverList += 
    !mDriverName.string
    !driverTypeProxy
    !initialValueList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @driverListIR {
  @string mDriverName
  @unifiedTypeMap-proxy mType
  @operandIRList mInitialValueList
}

#·······················································································································

method @driverListIR-element generateLLVM ?!@string ioLLVMcode {
  ioLLVMcode += llvmNameForGlobalVariable (!mDriverName) + " = internal global "
  ioLLVMcode += [[mType type] llvmTypeName] + " {"
  for (value) in mInitialValueList
    do ioLLVMcode += [value llvmTypeName] + " " + [value llvmName]
    between ioLLVMcode += ", "  
  end
  ioLLVMcode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
