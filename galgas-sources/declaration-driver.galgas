#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @driverDeclarationAST {
  public var @lstring mDriverName
  public var @lstringlist mDriverDependanceList
  public var @structurePropertyListAST mPropertyListAST
#--- Boot
  public var @location mBootLocation
  public var @instructionListAST mBootInstructionList
  public var @location mBootEndLocation
#--- Startup
  public var @location mStartupLocation
  public var @instructionListAST mStartupInstructionList
  public var @location mStartupEndLocation
}

#·······················································································································

list @driverDeclarationListAST {
  public var @driverDeclarationAST mDriver
}

#·······················································································································

list @driverInstanciationArgumentListAST {
  public var @lstring mSelector
  public var @expressionAST mExpression
}

#·······················································································································

list @driverInstanciationListAST {
  public var @lstring mDriverName
  public var @driverInstanciationArgumentListAST mDriverInstanciationArgumentList
}

#·······················································································································

refclass @implementedDriverAST : @abstractDeclarationAST {
  public var @lstring mDriverName
  public var @lstringlist mDriverDependanceList
  public var @bool mIsInstancied
#--- Boot
  public var @location mBootLocation
  public var @instructionListAST mBootInstructionList
  public var @location mBootEndLocation
#--- Startup
  public var @location mStartupLocation
  public var @instructionListAST mStartupInstructionList
  public var @location mStartupEndLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $driver$
    $identifier$ ?let driverName
    var @lstringlist driverDependenceList = §[]
    select
    or
      $>$
      repeat
        $identifier$ ?let dependenceName
        driverDependenceList += !dependenceName
      while
        $,$
      end       
    end
    ${$
    var @structurePropertyListAST propertyListAST = §[]
    var bootHandled = false
    var bootLocation = @location.here
    var @instructionListAST bootInstructionList = §[]
    var bootEndLocation = @location.here
    var startupHandled = false
    var startupLocation = @location.here
    var @instructionListAST startupInstructionList = §[]
    var startupEndLocation = @location.here
    repeat
    while
      $boot$
      bootLocation = .here
      ${$
      <instructionList> !?ioAST ?bootInstructionList
      bootEndLocation = @location.here
      $}$
      if bootHandled then
        error bootLocation : "a driver supports at most one boot routine" 
      end
      bootHandled = true
    while
      $startup$
      startupLocation = .here
      ${$
      <instructionList> !?ioAST ?startupInstructionList
      startupEndLocation = @location.here
      $}$
      if startupHandled then
        error startupLocation : "a driver supports at most one startup routine" 
      end
      startupHandled = true
    while
      <isr_in_driver> !?ioAST !driverName
    while
      <struct_property_declaration> !?ioAST !.isPrivate !?propertyListAST
    while
      <function_declaration> !?ioAST !receiverTypeName: omnibusTypeSpecificNameForDriver (!driverName)
    while
      <system_routine_declaration> !?ioAST !receiverTypeName: omnibusTypeSpecificNameForDriver (!driverName)
    while
      <guard>
        !?ioAST
        !receiverTypeName: omnibusTypeSpecificNameForDriver (!driverName)
        !receiverLLVMBaseTypeName: llvmDriverNameFromName (!driverName).string
    end
    $}$
  #--- Declare driver
    ioAST.mDriverDeclarationListAST += !@driverDeclarationAST.init {
      !driverName
      !driverDependenceList
      !propertyListAST
      !bootLocation
      !bootInstructionList
      !bootEndLocation
      !startupLocation
      !startupInstructionList
      !startupEndLocation
    }
  }

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $driver$
    $identifier$ ?let driverName
    $($
    var @driverInstanciationArgumentListAST driverInstanciationArgumentList = §[]
    repeat
    while
      $!selector:$ ?let selector
      <expression> !?ioAST ?let expression
      driverInstanciationArgumentList += !selector !expression
    end
    $)$
    ioAST.mRequiredDriverListAST += !driverName !driverInstanciationArgumentList
  }
 
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @implementedDriverAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph addNode !self.mDriverName !self]
  [!?ioGraph addEdge !self.mDriverName !omnibusTypeSpecificNameForDriver (!self.mDriverName)]
  for (driver) in self.mDriverDependanceList do
    [!?ioGraph addEdge !self.mDriverName !driver]
  end
  [!?ioGraph addEdge !self.mDriverName !compileTimeDeclarationBarrier ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @implementedDriverAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "driver " + self.mDriverName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @implementedDriverAST locationForErrorSignaling -> @location outLocation {
  outLocation = self.mDriverName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Driver Names
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func omnibusTypeSpecificNameForDriver ?let @lstring inDriverName -> @lstring {
  result = .init {!"driver." + inDriverName !inDriverName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmDriverNameFromName ?let @lstring inDriverName -> @lstring {
  result = .init {!"driver$" + inDriverName !inDriverName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func llvmBootRoutineNameFromDriver ?let @lstring inDriverName -> @lstring {
  result = .init {!"boot." + inDriverName !inDriverName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func llvmStartupRoutineNameFromDriver ?let @lstring inDriverName -> @lstring {
  result = .init {!"startup." + inDriverName !inDriverName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  RETAIN REQUIRED DRIVERS IN DECLARATION LIST AST                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @driverInstanciationArgumentMap {
  public var @expressionAST mExpression
  insert insertKey error message "duplicated '%K' selector"
  search searchKey error message "uninitialized '%K' property"
}

#·······················································································································

map @instanciedDriverMap {
  public var @driverInstanciationArgumentMap mDriverInstanciationArgumentMap
  insert insertKey error message "the '%K' driver is already instancied in %L"
  search searchKey error message "internal error %K"
}

#·······················································································································

proc retainRequiredDrivers ?!@ast ioAST {
#--- Check at most one drive has no dependence
  var @lstringlist driverWithNoDependenceList = §[]
  for (declaration) in ioAST.mDriverDeclarationListAST do
     if [declaration.mDriverDependanceList count] == 0 then
       driverWithNoDependenceList += !declaration.mDriverName
     end
  end
  if [driverWithNoDependenceList count] > 1 then
    for (driverName) in driverWithNoDependenceList do
      error driverName : "almost one driver can have no dependence"
    end
  end
#--- Build instancied driver map
  var @instanciedDriverMap instanciedDriverMap = §[]
  for (driverName args) in ioAST.mRequiredDriverListAST do
     var @driverInstanciationArgumentMap driverInstanciationArgumentMap = §[]
     for (selector expression) in args do
       [!?driverInstanciationArgumentMap insertKey !selector !expression]
     end
    [!?instanciedDriverMap insertKey !driverName !driverInstanciationArgumentMap]
  end
#--- Append required drivers to declaration list AST (and init list AST)
  var @stringset validDriverNames = §[] # For checking all required drivers have been declared
  for (declaration) in ioAST.mDriverDeclarationListAST do
    validDriverNames += !declaration.mDriverName.string
    let driverIsInstancied = [instanciedDriverMap hasKey !declaration.mDriverName.string]
  #--- Build driver instanciation property list
    var @structurePropertyListAST driverPropertyListAST = §[]
    if driverIsInstancied then
      [instanciedDriverMap searchKey !declaration.mDriverName ?let driverInstanciationArgumentMap]
    #--- Build driver property list, adding init expression
      var @stringset validArgumentSet = §[]
      for (propertyName propertyAttributeList * optionalPropertyTypeName propertyKind) in declaration.mPropertyListAST do
        let @propertyKindAST driverPropertyKind
        switch propertyKind 
        case uninitializedStoredProperty :
          [driverInstanciationArgumentMap searchKey !propertyName ?let initExpression]
          validArgumentSet += !propertyName.string
          driverPropertyKind = .initializedStoredProperty {!initExpression:initExpression}
        case uninitializedConstantProperty :
          [driverInstanciationArgumentMap searchKey !propertyName ?let initExpression]
          validArgumentSet += !propertyName.string
          driverPropertyKind = .initializedConstantProperty {!initExpression:initExpression}
        case initializedStoredProperty (*) :
          driverPropertyKind = propertyKind
        case initializedConstantProperty (*) :
          driverPropertyKind = propertyKind
        case readOnlyComputedProperty (2*) :
          driverPropertyKind = propertyKind
        case writeComputedProperty (2*) :
          driverPropertyKind = propertyKind
        end
        driverPropertyListAST += 
         !propertyName
         !propertyAttributeList
         !.isPrivate
         !optionalPropertyTypeName
         !driverPropertyKind
      end
    #--- Check all arguments of driver instanciation have been used
      for (unusedSelector) in [driverInstanciationArgumentMap keySet] - validArgumentSet do
        error [driverInstanciationArgumentMap locationForKey !unusedSelector] : "invalid selector"
      end
    end
  #---
    ioAST.mDeclarationListAST += !@structureDeclarationAST.init {
      !omnibusTypeSpecificNameForDriver (!declaration.mDriverName)
      !omnibusTypeSpecificNameForDriver (!declaration.mDriverName)
      !llvmDriverNameFromName (!declaration.mDriverName)
      !§[]
      !false # Do not generate assignment routine
      !driverPropertyListAST
      !false # Do not implement deinit
    }
    ioAST.mDeclarationListAST += !@implementedDriverAST.init {
      !declaration.mDriverName
      !declaration.mDriverDependanceList
      !driverIsInstancied
      !declaration.mBootLocation
      !declaration.mBootInstructionList
      !declaration.mBootEndLocation
      !declaration.mStartupLocation
      !declaration.mStartupInstructionList
      !declaration.mStartupEndLocation
    }
  end
  ioAST.mDriverDeclarationListAST = §[]
#--- Check all drivers named in instanciation constructs have been implemented
  for (unusedDriverName) in [instanciedDriverMap keySet] - validDriverNames do
    error [instanciedDriverMap locationForKey !unusedDriverName] : "undefined driver"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @implementedDriverAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  [ioContext.mTypeMap searchType
    !lkey:omnibusTypeSpecificNameForDriver (!self.mDriverName)
    ?type:let driverType
  ]
  [!?ioContext.mValuedObjectMap insertDriver !self.mDriverName !self.mIsInstancied !driverType]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedRequiredDriver.init {!self.mDriverName}
#---------------- Add boot routine
  ioDecoratedRoutineList +=
    !receiverTypeName: omnibusTypeSpecificNameForDriver (!self.mDriverName)
    !mode:.bootMode
    !isRequired:true
    !routineKind: .function
    !warnIfUnused: true
    !exportedRoutine: false
    !routineAttributes: .none
    !routineMangledLLVMName: llvmBootRoutineNameFromDriver (!self.mDriverName)
    !formalArgumentList: §[]
    !warningOnUnusedArgs: true
    !self.mBootInstructionList
    !self.mBootEndLocation
    !returnTypeName:.init {!"" !self.mBootLocation}  # Empty string if no returned value
#---------------- Add startup routine
  ioDecoratedRoutineList +=
    !receiverTypeName: omnibusTypeSpecificNameForDriver (!self.mDriverName)
    !mode:.startupMode
    !isRequired:true
    !routineKind: .function
    !warnIfUnused: true
    !exportedRoutine: false
    !routineAttributes: .none
    !routineMangledLLVMName: llvmStartupRoutineNameFromDriver (!self.mDriverName)
    !formalArgumentList: §[]
    !warningOnUnusedArgs: true
    !self.mStartupInstructionList
    !self.mStartupEndLocation
    !returnTypeName: .init {!"" !self.mStartupLocation}  # Empty string if no returned value
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTICS                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @decoratedRequiredDriver : @abstractDecoratedDeclaration {
  public var @lstring mDriverName
}

#·······················································································································

override method @decoratedRequiredDriver semanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  [inContext.mTypeMap searchType
    !lkey: omnibusTypeSpecificNameForDriver (!self.mDriverName)
    ?type:let driverType
  ]
  let typeName = @lstring.init {!driverType.omnibusTypeDescriptionName !self.mDriverName}
  [inContext.mTypeConstructorMap searchKey !typeName ?let constructorMap]
  [constructorMap searchKey !.init {!"()" !self.mDriverName.location} ?* ?let constructorValue]
  [constructorValue structure ?sortedOperandList:let sortedOperandList]
  var @operandIRList initialValueList = §[]
  for (initialValue *) in sortedOperandList do
    initialValueList += !initialValue
  end
  ioIntermediateCodeStruct.mDriverList += 
    !self.mDriverName
    !driverType
    !initialValueList
#--- Build initialized driver set
  ioTemporaries.mInitializedDriverSet += !self.mDriverName.string
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @driverListIR {
  public var @lstring mDriverName
  public var @omnibusType mType
  public var @operandIRList mInitialValueList
}

#·······················································································································

method @driverListIR.@element generateLLVMDriverVariableDefinition ?!@string ioLLVMcode {
  ioLLVMcode += llvmNameForGlobalVariable (!self.mDriverName) + " = internal global "
  ioLLVMcode += [self.mType llvmTypeName] + " {"
  for (value) in self.mInitialValueList
    do ioLLVMcode += [value llvmTypeName] + " " + [value llvmValue]
    between ioLLVMcode += ", "  
  end
  ioLLVMcode += "}\n"
}

#·······················································································································

method @driverListIR generateLLVMDriverCode ?!@string ioLLVMcode {
#--- Boot
  ioLLVMcode += llvmTitleComment (!"Boot")
  ioLLVMcode += "define internal void @boot ()" + llvmAttributeFunction () + "{\n"
  for boot in self do
    ioLLVMcode += "  call void @" + [llvmBootRoutineNameFromDriver (!boot.mDriverName) assemblerRepresentation] + " ("
    ioLLVMcode += [boot.mType llvmTypeName] + "* " + llvmNameForGlobalVariable (!boot.mDriverName)
    ioLLVMcode += ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
#--- Startup
  ioLLVMcode += llvmTitleComment (!"Startup")
  ioLLVMcode += "define internal void @startup ()" + llvmAttributeFunction () + "{\n"
  for startup in self do
    ioLLVMcode += "  call void @" + [llvmStartupRoutineNameFromDriver (!startup.mDriverName) assemblerRepresentation] + " ("
    ioLLVMcode += [startup.mType llvmTypeName] + "* " + llvmNameForGlobalVariable (!startup.mDriverName)
    ioLLVMcode += ")\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
