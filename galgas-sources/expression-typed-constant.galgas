#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @typedConstantCallAST : @expressionAST {
  @lstring mOptionalTypeName
  @lstring mConstructorName
  @primaryInExpressionAccessListAST mAccessList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    @lstring optionalTypeName
    select
      optionalTypeName = .new {!"" !.here}
    or
      <type_definition> !?ioAST ?optionalTypeName
    end
    $.$
    $identifier$ ?let constantName
  #--- Properties and access
    <expression_access_list> !?ioAST ?let accessList
  #---
    outExpression = @typedConstantCallAST.new {!optionalTypeName !constantName !accessList}
  }

  #·····················································································································
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typedConstantCallAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  if self.mOptionalTypeName.string != "" then
    [!?ioGraph addEdge !inConstantName !self.mOptionalTypeName]
  end
  for (access) in self.mAccessList do
    switch access
    case integerSlice (2*) :
    case property (*) :
    case arrayAccess (@expressionAST indexExpression 2*) :
      [indexExpression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
    case funcCall (* @effectiveArgumentListAST arguments *) :
      for () in arguments do
        switch mEffectiveParameterKind
        case input (*):
        case inputWithType (* @lstring typeName *) :
          if typeName.string != "" then
            [!?ioGraph noteNode !typeName]
          end
        case output (expression *) : [expression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
        case outputInput (*) :
        case outputInputSelfVariable (*) :
        end 
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typedConstantCallAST noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if self.mOptionalTypeName.string != "" then
    [!?ioGraph noteNode !self.mOptionalTypeName]
  end
  for (access) in self.mAccessList do
    switch access
    case integerSlice (2*) :
    case property (*) :
    case arrayAccess (@expressionAST indexExpression 2*) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case funcCall (* @effectiveArgumentListAST arguments *) :
      for () in arguments do
        switch mEffectiveParameterKind
        case input (*):
        case inputWithType (* @lstring typeName *) :
          if typeName.string != "" then
            [!?ioGraph noteNode !typeName]
          end
        case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
        case outputInput (*) :
        case outputInputSelfVariable (*) :
        end 
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typedConstantCallAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
#--- Analyze constructor source type
  @omnibusType inferredResultType
  if self.mOptionalTypeName.string == "" then
    inferredResultType = inOptionalTargetType
  else
    inferredResultType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !self.mOptionalTypeName} type]
  end
  if inferredResultType.kind == .void then
    error self.mConstructorName : "cannot infer type" : outResult
  else
    let typeName = @lstring.new {!inferredResultType.omnibusTypeDescriptionName !self.mConstructorName.location}
    [inContext.mTypeConstantMap searchKey !typeName ?let classConstantMap]
#    let classConstantMap = inferredResultType.classConstantMap
    [classConstantMap searchKey !self.mConstructorName ?let @bigint value ?let classTypeName]
    let resultType = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !classTypeName} type]
    outResult = .literalInteger {!type:resultType !value:value}
  end
#--- Analyze access list
  if [self.mAccessList length] > 0 then
  #--- procAnalyzeAccesListInExpression works on reference, not value
  #    So we create articially a temporary reference for resulting value
    getNewTempReference (![outResult type] !?ioTemporaries ?let newTemporaryReference)
  #--- ... add it into alloc list...
    ioAllocaList += ![newTemporaryReference llvmName] ![newTemporaryReference type] !false
  #--- ... and store resulting value into it
    [!?ioInstructionGenerationList appendStoreTemporaryReference
      ![newTemporaryReference type]
      ![newTemporaryReference llvmName]
      !outResult
    ]
    outResult = newTemporaryReference
  #---
    procAnalyzeAccesListInExpression (
      !self: inSelfType
      !routineAttributes:inRoutineAttributes
      !optionalTargetType: inOptionalTargetType
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !self.mAccessList
      !?result: outResult
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
