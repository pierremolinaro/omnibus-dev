#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @typedConstantCall : @expressionAST {
  @lstring mOptionalTypeName
  @lstring mConstructorName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <primary> !@expressionAST outExpression {
    @lstring optionalTypeName
    select
      optionalTypeName = .new {!"" !.here}
    or
      $typeName$ ?optionalTypeName
    end
    $.$
    $identifier$ ?let constructorName
    outExpression = @typedConstantCall.new {!optionalTypeName !constructorName}
  }

  #·····················································································································
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typedConstantCall addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  if mOptionalTypeName.string != "" then
    [!?ioGraph addEdge !inConstantName !.new{!"$" + mOptionalTypeName !mOptionalTypeName.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typedConstantCall noteExpressionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  if mOptionalTypeName.string != "" then
    [!?ioGraph noteNode !.new{!"$" + mOptionalTypeName !mOptionalTypeName.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typedConstantCall analyzeExpression
  ?self:let @unifiedTypeMap-proxy unused inSelfType
  ?routineNameForInvocationGraph:let @lstring unused inCallerNameForInvocationGraph
  ?optionalTargetType:let @unifiedTypeMap-proxy inOptionalTargetType
  ?context:let @semanticContext inContext
  ?modes:let @stringset unused inModeSet
  ?allowPanic:let @bool unused inAllowPanic
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
  ?!variableMap:@variableMap unused ioVariableMap
  ?!instructionListIR:@instructionListIR unused ioInstructionGenerationList
  !result:@operandIR outResult
{
#--- Analyze constructor source type
  @unifiedTypeMap-proxy resultType
  if mOptionalTypeName.string == "" then
    resultType = inOptionalTargetType
  else
    resultType = .searchKey {!inContext.mTypeMap !mOptionalTypeName}
  end
  if resultType == .null then
    error mConstructorName : "cannot infer type" : outResult
  else
    let constructorMap = [resultType typedConstantMap]
    [constructorMap searchKey !mConstructorName ?let resultValue]
    outResult = .new {!resultType !resultValue}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
