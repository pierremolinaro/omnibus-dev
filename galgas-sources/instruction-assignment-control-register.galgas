#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @controlRegisterAssignmentOperatorKind {
  case assignment
  case assignmentWithOperator (@omnibusInfixOperator infixOperator @location operatorLocation)
}

#·······················································································································

class @controlRegisterAssignmentInstructionAST : @instructionAST {
  @controlRegisterLValueAST mControlRegisterLValue
  @controlRegisterAssignmentOperatorKind mAssignmentKind
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    <control_register_lvalue> !?ioAST ?let registerLValue
  #--- Assignment or assignment operator
    @controlRegisterAssignmentOperatorKind assignmentKind
    select
      $=$
      assignmentKind = .assignment
    or
      <assignment_combined_with_operator> ?let infixOperator ?let operatorLocation
      assignmentKind = .assignmentWithOperator {!infixOperator:infixOperator !operatorLocation:operatorLocation}
    end
  #--- Source expression
    <expression> !?ioAST ?let sourceExpression
  #---
    ioInstructionList += !@controlRegisterAssignmentInstructionAST.new {
      !registerLValue.mRegisterGroupName.location
      !registerLValue
      !assignmentKind
      !sourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @controlRegisterAssignmentInstructionAST noteInstructionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [mControlRegisterLValue noteExpressionTypesInPrecedenceGraph !?ioGraph]
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @controlRegisterAssignmentInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#-------------------- Analyze control register LValue
  [mControlRegisterLValue controlRegisterLValueSemanticAnalysis
    !writeAccess:true
    !self: inSelfType
    !routineAttributes: inRoutineAttributes
    !context: inContext
    !mode: inMode
    !?temporary: ioTemporaries
    !?staticEntityMap: ioStaticEntityMap
    !?variableMap: ioUniversalMap
    !?alloca: ioAllocaList
    !?instructionListIR: ioInstructionGenerationList
    ?registerType:let registerType
    ?registerBitCount:*
    ?sliceMap:*
    ?llvmRegisterAddressName:let llvmRegAddressName
  ]
#-------------------- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:registerType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceIR
  ]
#-------------------- Load source expression
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?sourceIR
  ]
#-------------------- Perform assignment
  let t = [sourceIR type]
  if not [t copyable] then
    error mControlRegisterLValue.mRegisterGroupName : "source expression is not copyable"
  else
    switch mAssignmentKind
    case assignment :
      [!?ioInstructionGenerationList appendStoreIndirectVolatileRegister !registerType !llvmRegAddressName !sourceIR]
    case assignmentWithOperator (infixOperator operatorLocation) :
    #--- Load register
      getNewTempValue (!registerType !?ioTemporaries ?let registerValueIR)
      [!?ioInstructionGenerationList appendLoadIndirectVolatileRegister !registerValueIR !llvmRegAddressName]
    #--- Perform operation
      let operatorMap = getInfixOperatorMap (!infixOperator !context:inContext !mode:inMode !operatorLocation)
      [operatorMap checkBinaryOperationWith
        !leftType:[registerValueIR type]
        !rightType:[sourceIR type]
        !operatorLocation:operatorLocation
        ?resultType:let resultType
        ?op:let @omnibusInfixOperatorDescription binaryOperator
      ]
      [binaryOperator generateInfixOperatorCode
        !?ioTemporaries
        !?ioInstructionGenerationList
        !registerValueIR
        !operatorLocation
        !sourceIR
        !resultType
        ?let operationResult
      ]
    #--- Store register
      [!?ioInstructionGenerationList appendStoreIndirectVolatileRegister !registerType !llvmRegAddressName !operationResult]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
