#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @accessInAssignmentAST {
  case property (@lstring name)
  case arrayAccess (@expressionAST index @location endOfIndex @bool checkIndexExpression)
}

#·······················································································································

list @accessInAssignmentListAST {
  public var @accessInAssignmentAST mAccess
}


#·······················································································································

enum @LValueOperandAST %equatable {
  case noOperand
  case property (@lstring name @LValueOperandAST next)
  case arrayAccess (@expressionAST index @location endOfIndex @bool checkIndexExpression @LValueOperandAST next)
}

#·······················································································································

struct @LValueAST {
  public var @lstring mIdentifier # self is represented by an empty string, with actual "self" location
  public var @LValueOperandAST mOperand
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <lvalue> ?!@ast ioAST !@LValueAST outAssignmentTargetAST {
    let @lstring receiver
    select
      $identifier$ ?receiver
    or
      $self$
      receiver = ["" here]
    end
    <lvalue_operand> !?ioAST ?let operand
    outAssignmentTargetAST = .init {!receiver !operand}
  }
  
  #·····················································································································

  rule <lvalue_operand> ?!@ast unused ioAST !@LValueOperandAST outOperand {
    outOperand = .noOperand
  }

  #·····················································································································

  rule <lvalue_operand> ?!@ast ioAST !@LValueOperandAST outOperand {
    $.$
    $identifier$ ?let propertyName
    <lvalue_operand> !?ioAST ?let operand
    outOperand = .property {!name:propertyName !next:operand}
  }
  
  #·····················································································································

  rule <lvalue_operand> ?!@ast ioAST !@LValueOperandAST outOperand {
    $[$
    <expression> !?ioAST ?let expression
    let endOfIndex = @location.here
    let @bool checkIndexExpression
    select
      $]$
      checkIndexExpression = true
    or
      $]!$
      checkIndexExpression = false
    end
    <lvalue_operand> !?ioAST ?let operand
    outOperand = .arrayAccess {
      !index:expression
      !endOfIndex:endOfIndex
      !checkIndexExpression:checkIndexExpression
      !next:operand
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @LValueAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mOperand noteInstructionTypesInPrecedenceGraph !?ioGraph]
}

#·······················································································································

method @LValueOperandAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  switch self
  case noOperand :
  case property (* @LValueOperandAST next) :
    [next noteInstructionTypesInPrecedenceGraph !?ioGraph]
  case arrayAccess (@expressionAST indexExpression 2* @LValueOperandAST next) :
    [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    [next noteInstructionTypesInPrecedenceGraph !?ioGraph]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @LValueRepresentation {
  public var @omnibusType type
  public var @string llvmName
}

#·······················································································································

method @LValueAST analyzeLValue
  ?self:let @omnibusType inSelfType
  ?forAddressOf:let @bool inIsAddressOf
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !@LValueRepresentation outInternalRepresentation
{
  if self.mIdentifier.string == "" then # Receiver is "self"
    if inSelfType.kind == .void then
      error self.mIdentifier : "self is not available in this context" : outInternalRepresentation
    elsif not [inRoutineAttributes mutatingRoutine] && not inIsAddressOf then
      error self.mIdentifier
      : "cannot mutate properties, current method is not declared with @" + mutatingAttribute () + " attribute"
      : outInternalRepresentation
    else
      analyzeSelfLValue (
        !self:inSelfType
        !routineAttributes:inRoutineAttributes
        !context:inContext
        !mode:inMode
        !?temporary: ioTemporaries
        !?staticEntityMap:ioStaticEntityMap
        !?variableMap: ioUniversalMap
        !?alloca: ioAllocaList
        !?instructionListIR: ioInstructionGenerationList
        !self.mOperand
        ?outInternalRepresentation
      )
    end
  else
    [ioUniversalMap searchEntity !self.mIdentifier ?let @valuedObject entity]
    switch entity
    case task (*) :
      error self.mIdentifier : "a task has no value" : outInternalRepresentation
    case driver (* *) :
      error self.mIdentifier : "a driver has no value" : outInternalRepresentation
    case globalConstant (*) :
      error self.mIdentifier : "a global constant cannot be written" : outInternalRepresentation
    case localConstant (3*) :
      error self.mIdentifier : "a local constant cannot be written" : outInternalRepresentation
    case globalSyncInstance (2*) :
      error self.mIdentifier : "a global sync instance is not allowed here" : outInternalRepresentation
    case localVariable (@omnibusType variableType @lstring omnibusName) :
      analyzeVariableInLValue (
        !self: inSelfType
        !readAccess:inIsAddressOf
        !routineAttributes:inRoutineAttributes
        !context: inContext
        !mode: inMode
        !?temporary: ioTemporaries
        !?staticEntityMap:ioStaticEntityMap
        !?variableMap: ioUniversalMap
        !?alloca: ioAllocaList
        !?instructionListIR: ioInstructionGenerationList
        !variableName: self.mIdentifier
        !llvmName:llvmNameForLocalVariable (!omnibusName)
        !type: variableType
        !self.mOperand
        ?outInternalRepresentation
      )
    end
  end
}

#·······················································································································

private proc analyzeVariableInLValue
  ?self:let @omnibusType inSelfType
  ?readAccess:let @bool inIsReadAccess # If false, write access
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?variableName:let @lstring inVariableName
  ?llvmName:let @string inLLVMName
  ?type:let @omnibusType inVariableType
  ?let @LValueOperandAST inOperand
  !@LValueRepresentation outInternalRepresentation
{
  var currentType = inVariableType
  var currentLLVMName = inLLVMName
  switch inOperand
  case noOperand :
    if inIsReadAccess then
      [!?ioUniversalMap searchValuedObjectForReadAccess !inVariableName ?*]
    else
      [!?ioUniversalMap searchValuedObjectForWriteAccess !inVariableName ?*]
    end
  case property (@lstring name @LValueOperandAST nextOperand) :
    if inIsReadAccess then
      [!?ioUniversalMap searchValuedObjectForReadAccess !inVariableName ?*]
    else
      [!?ioUniversalMap searchValuedObjectForReadWriteAccess !inVariableName ?*]
    end
    handlePropertyAccess (
      !self: inSelfType
      !?currentType
      !?currentLLVMName
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !name
      !nextOperand
    )
  case arrayAccess (indexExpression endOfIndex checkIndexExpression nextOperand) :
    if inIsReadAccess then
      [!?ioUniversalMap searchValuedObjectForReadAccess !inVariableName ?*]
    else
      [!?ioUniversalMap searchValuedObjectForReadWriteAccess !inVariableName ?*]
    end
    handleArrayAccess (
      !self: inSelfType
      !?currentType
      !?currentLLVMName
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !indexExpression
      !endOfIndex
      !checkIndexExpression
      !nextOperand
    )
  end
  outInternalRepresentation = .init {!currentType !currentLLVMName}
}

#·······················································································································

private proc handlePropertyAccess
  ?self:let @omnibusType inSelfType
  ?!@omnibusType ioCurrentType
  ?!@string ioCurrentLLVMName
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?let @lstring inPropertyName
  ?let @LValueOperandAST inNextOperand
{
#  let typeName = @lstring.new {!ioCurrentType.omnibusTypeDescriptionName !.here}
  let propertySetterMap = [inContext propertySetterMap !ioCurrentType]
  [propertySetterMap searchKey !inPropertyName ?* ?let @propertySetterKind propertyAccess]
  switch propertyAccess
  case computedProperty (3*) :
    error inPropertyName : "a computed property cannot be used here" : ioCurrentType, ioCurrentLLVMName
  case storedProperty (@omnibusType propertyType @uint index) :
    [!?ioTemporaries newTempLLVMVar ?let newLLVMvariable]
    [!?ioInstructionGenerationList appendGetUniversalPropertyReference
      !ioCurrentType
      !ioCurrentLLVMName
      !newLLVMvariable
      !index
      !inPropertyName
    ]
    ioCurrentType = propertyType
    ioCurrentLLVMName = newLLVMvariable
    handleNextOperand (
      !self: inSelfType
      !?ioCurrentType
      !?ioCurrentLLVMName
      !inNextOperand
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
    )
  end
}

#·······················································································································

private proc handleArrayAccess
  ?self:let @omnibusType inSelfType
  ?!@omnibusType ioCurrentType
  ?!@string ioCurrentLLVMName
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?let @expressionAST inIndexExpression
  ?let @location inEndOfIndex
  ?let @bool inCheckIndexExpression
  ?let @LValueOperandAST inNextOperand
{
  switch ioCurrentType.subscript
  case noSubscript :
    error inEndOfIndex
    : "the receiver type is " + ioCurrentType.omnibusTypeDescriptionName + " and does not accept subscripting"
  case literalString :
    error inEndOfIndex
    : "the receiver type is literal string and does not accept subscripting"
    : ioCurrentType, ioCurrentLLVMName
  case staticSubscript (@omnibusType elementType @bigint arraySize) :
    handleArraySubscriptNew (
      !self: inSelfType
      !routineAttributes:inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca: ioAllocaList
      !inIndexExpression 
      !inEndOfIndex
      !inCheckIndexExpression
      !arraySize:arraySize
      !elementType:elementType
      !?ioInstructionGenerationList
      ?let @objectIR indexIR
    )
    [!?ioTemporaries newTempLLVMVar ?let newLLVMvariable]
    [!?ioInstructionGenerationList appendGetUniversalArrayElementReference
      !ioCurrentType
      !ioCurrentLLVMName
      !elementType
      !newLLVMvariable
      !indexIR
    ]
    ioCurrentType = elementType
    ioCurrentLLVMName = newLLVMvariable
    handleNextOperand (
      !self: inSelfType
      !?ioCurrentType
      !?ioCurrentLLVMName
      !inNextOperand
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
    )
  end
}

#·······················································································································

private proc analyzeSelfLValue
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?let @LValueOperandAST inOperand
  !@LValueRepresentation outInternalRepresentation
{
  var currentType = inSelfType
  var currentLLVMName = llvmNameForSelf ()
  switch inOperand
  case noOperand :
  case property (@lstring name @LValueOperandAST next) :
    handlePropertyAccess (
      !self: inSelfType
      !?currentType
      !?currentLLVMName
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !name
      !next
    )
  case arrayAccess (indexExpression endOfIndex checkIndexExpression nextOperand) :
    handleArrayAccess (
      !self: inSelfType
      !?currentType
      !?currentLLVMName
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !indexExpression
      !endOfIndex
      !checkIndexExpression
      !nextOperand
    )
  end
  outInternalRepresentation = .init {!currentType !currentLLVMName}
}

#·······················································································································

private proc handleNextOperand
  ?self:let @omnibusType inSelfType
  ?!@omnibusType ioCurrentType
  ?!@string ioCurrentLLVMName
  ?let @LValueOperandAST inOperand
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  switch inOperand
  case noOperand :
  case property (@lstring name @LValueOperandAST next) :
    handlePropertyAccess (
      !self: inSelfType
      !?ioCurrentType
      !?ioCurrentLLVMName
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !name
      !next
    )
  case arrayAccess (indexExpression endOfIndex checkIndexExpression nextOperand) :
    handleArrayAccess (
      !self: inSelfType
      !?ioCurrentType
      !?ioCurrentLLVMName
      !routineAttributes: inRoutineAttributes
      !context: inContext
      !mode: inMode
      !?temporary: ioTemporaries
      !?staticEntityMap: ioStaticEntityMap
      !?variableMap: ioUniversalMap
      !?alloca: ioAllocaList
      !?instructionListIR: ioInstructionGenerationList
      !indexExpression
      !endOfIndex
      !checkIndexExpression
      !nextOperand
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
