#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @accessInAssignmentAST {
  case property (@lstring name)
  case arrayAccess (@expressionAST index @location endOfIndex)
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @accessInAssignmentListAST {
  @accessInAssignmentAST mAccess
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @LValueAST {
  @lstring mIdentifier
  @accessInAssignmentListAST mAccessList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <lvalue> !@LValueAST outAssignmentTargetAST {
    @lstring receiver
  #--- Receiver
    select
      $identifier$ ?receiver
    or
      $self$
      receiver = ["" here]
    end
  #--- Properties and subscript
    @accessInAssignmentListAST accessList = {}
    repeat
    while
      $.$
      $identifier$ ?let propertyName
      accessList += !.property {!name:propertyName}
    while
      $[$
      <expression> ?let expression
      let endOfIndex = @location.here
      $]$
      accessList += !.arrayAccess {!index:expression !endOfIndex:endOfIndex}
    end
    outAssignmentTargetAST = .new {!receiver !accessList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @LValueAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (access) in mAccessList do
    switch access
    case property (*) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @LValueRepresentation {
  case volatileAbsoluteReference (@PLMType type @uint address)
  case volatileIndirectReference (@PLMType type @string llvmName)
  case universalReference (@PLMType type @string llvmName)
}

#·······················································································································

getter @LValueRepresentation type -> @PLMType {
  switch self
  case volatileAbsoluteReference (@PLMType type *) :
    result = type
  case volatileIndirectReference (@PLMType type *) :
    result = type
  case universalReference (@PLMType type *) :
    result = type
  end
}

#·······················································································································

method @LValueAST type
  ?selfType: let @PLMType inSelfType
  ?variableMap:let @universalValuedObjectMapForContext inUniversalMap
  !@PLMType outType
{
  if mIdentifier.string == "" then # Receiver is self
    outType = inSelfType
  else
    [inUniversalMap searchValuedObjectType !mIdentifier ?outType]
  end
  for (access) in mAccessList do
    switch access
    case property (@lstring propertyName) :
      let @propertyMap propertyMap = outType.propertyMap
      [propertyMap searchKey !propertyName ?* ?let accessKind]
      switch accessKind
      case constantProperty (value) :
        outType = [value type]
      case indexed  (type *) :
        outType = type
      case nonVirtualMethod (*) :
        error propertyName : "a method cannot be used in this context" : outType
      end
    case arrayAccess (* *) :
      if [outType.kind isArrayType] then
        [outType.kind arrayType ?elementType:outType ?1*]
      end
    end
  end
}

#·······················································································································

method @LValueAST analyzeLValue
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !@LValueRepresentation outInternalRepresentation
{
  if mIdentifier.string == "" then # Receiver is "self"
    if inSelfType.kind == .void then
      error mIdentifier : "self is not available in this context" : outInternalRepresentation
    elsif not inRoutineCanMutateProperties then
      error mIdentifier
      : "cannot mutate properties, current method is not declared with @" + mutatingAttribute () + " attribute"
      : outInternalRepresentation
    else
      analyzeSelfAssignmentTarget (
        !self:inSelfType
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !context:inContext
        !mode:inCurrentMode
        !?temporary: ioTemporaries
        !?staticStringMap: ioGlobalLiteralStringMap
        !?variableMap: ioUniversalMap
        !?alloca: ioAllocaList
        !?instructionListIR: ioInstructionGenerationList
        !mIdentifier.location
        !mAccessList
        ?outInternalRepresentation
      )
    end
  else
    [ioUniversalMap searchEntity !mIdentifier ?let @valuedObject entity]
    switch entity
    case module (* *) :
      error mIdentifier : "a module cannot be written" : outInternalRepresentation
    case register (* writable registerType registerAddress * arraySize elementSize) : # 0 if not an array
      if not writable then
         error mIdentifier : "the control register is not writable in this context" : outInternalRepresentation
      else
        analyzeControlRegisterInLValue (
          !self: inSelfType
          !routineNameForInvocationGraph: inCallerNameForInvocationGraph
          !context: inContext
          !mode: inCurrentMode
          !?temporary: ioTemporaries
          !?staticStringMap: ioGlobalLiteralStringMap
          !?variableMap: ioUniversalMap
          !?alloca: ioAllocaList
          !?instructionListIR: ioInstructionGenerationList
          !registerName: mIdentifier
          !registerType: registerType
          !registerAddress: registerAddress
          !registerArraySize: arraySize
          !elementSize: elementSize
          !accessList: mAccessList
          ?outInternalRepresentation
        )
      end
    case globalConstant (*) :
      error mIdentifier : "a global constant cannot be written" : outInternalRepresentation
    case localConstant (**) :
      error mIdentifier : "a local constant cannot be written" : outInternalRepresentation
    case globalVariable (@bool writable @PLMType variableType) :
      if not writable then
        error mIdentifier : "a global variable cannot be written in this context" : outInternalRepresentation
      else
        [!?ioInstructionGenerationList appendNoteGlobalVariableAccess !mIdentifier]
        analyzeVariableInLValue (
          !self: inSelfType
          !routineNameForInvocationGraph: inCallerNameForInvocationGraph
          !context: inContext
          !mode: inCurrentMode
          !?temporary: ioTemporaries
          !?staticStringMap: ioGlobalLiteralStringMap
          !?variableMap: ioUniversalMap
          !?alloca: ioAllocaList
          !?instructionListIR: ioInstructionGenerationList
          !variableName: mIdentifier
          !llvmName:llvmNameForGlobalVariable (!mIdentifier)
          !type: variableType
          !accessList: mAccessList
          ?outInternalRepresentation
        )
      end
    case localVariable (@PLMType variableType @lstring plmName) :
      analyzeVariableInLValue (
        !self: inSelfType
        !routineNameForInvocationGraph: inCallerNameForInvocationGraph
        !context: inContext
        !mode: inCurrentMode
        !?temporary: ioTemporaries
        !?staticStringMap: ioGlobalLiteralStringMap
        !?variableMap: ioUniversalMap
        !?alloca: ioAllocaList
        !?instructionListIR: ioInstructionGenerationList
        !variableName: mIdentifier
        !llvmName:llvmNameForLocalVariable (!plmName)
        !type: variableType
        !accessList: mAccessList
        ?outInternalRepresentation
      )
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc analyzeControlRegisterInLValue
  ?self:let @PLMType inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?registerName:let @lstring inRegisterName
  ?registerType:let @PLMType inRegisterType
  ?registerAddress:let @uint inRegisterAddress
  ?registerArraySize:let @uint inArraySize
  ?elementSize:let @uint inElementSize
  ?accessList:let @accessInAssignmentListAST inAccessList
  !@LValueRepresentation outInternalRepresentation
{
 if [inAccessList length] == 0 then # Simple access to a control register for writing
   if inArraySize == 0 then
     outInternalRepresentation = .volatileAbsoluteReference {!type:inRegisterType !address:inRegisterAddress}
   else
     error inRegisterName : "the control register is an array" : outInternalRepresentation
   end
 elsif [inAccessList length] == 1 then # Simple access to a control register for writing
   [inAccessList first ?let access]
   switch access
   case property (@lstring propertyName) :
     error propertyName : "writing a slice of a control register is not allowed" : outInternalRepresentation
   case arrayAccess (@expressionAST indexExpression @location endOfIndex) :
     handleArraySubscriptNew (
       !self: inSelfType
       !inGuard: false
       !routineNameForInvocationGraph: inCallerNameForInvocationGraph
       !context: inContext
       !mode: inCurrentMode
       !?temporary: ioTemporaries
       !?staticStringMap: ioGlobalLiteralStringMap
       !?variableMap: ioUniversalMap
       !?alloca: ioAllocaList
       !indexExpression 
       !endOfIndex
       !arraySize:inArraySize
       !elementType:inRegisterType
       !? ioInstructionGenerationList
       ?let @objectIR indexIR
     )
     if [indexIR isLiteralInteger] then # subscript expression is constant
        [indexIR literalInteger ?1* ?value:let @bigint idx]
        let addr = inRegisterAddress + idx * inElementSize
        outInternalRepresentation = .volatileAbsoluteReference {!type:inRegisterType !address:addr}      
     else
       [!?ioTemporaries newTempLLVMVar ?let llvmName]
       [!?ioInstructionGenerationList appendComputeSubscriptedVolatileRegisterAddress
         !llvmName
         !indexIR
         !inRegisterAddress
         !inElementSize
       ]
       outInternalRepresentation = .volatileIndirectReference {!type:inRegisterType !llvmName:llvmName}      
     end
    end
  else
    error inRegisterName : "only subscripting is allowed in control register assignment" : outInternalRepresentation
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc analyzeVariableInLValue
  ?self:let @PLMType inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?variableName:let @lstring inVariableName
  ?llvmName:let @string inLLVMName
  ?type:let @PLMType inVariableType
  ?accessList:let @accessInAssignmentListAST inAccessList
  !@LValueRepresentation outInternalRepresentation
{
  var currentType = inVariableType
  var currentLLVMName = inLLVMName
  if [inAccessList length] == 0 then
    [!?ioUniversalMap searchValuedObjectForWriteAccess !inVariableName ?*]
  else
    [!?ioUniversalMap searchValuedObjectForReadWriteAccess !inVariableName ?*]
    for (access) in inAccessList do
      switch access
      case property (@lstring propertyName) :
        let @propertyMap propertyMap = currentType.propertyMap
        [propertyMap searchKey !propertyName ?* ?let @propertyAccessKind propertyAccess]
        switch propertyAccess
        case nonVirtualMethod (*) :
           error propertyName : "a method cannot be written" : currentType, currentLLVMName
        case constantProperty (*) :
          error propertyName : "a constant property cannot be written" : currentType, currentLLVMName
        case indexed (@PLMType propertyType @uint index) :
          [!?ioTemporaries newTempLLVMVar ?let newLLVMvariable]
          [!?ioInstructionGenerationList appendGetUniversalPropertyReference
            !currentType
            !currentLLVMName
            !propertyType
            !newLLVMvariable
            !index
            !propertyName
          ]
          currentType = propertyType
          currentLLVMName = newLLVMvariable
        end
      case arrayAccess (@expressionAST indexExpression @location endOfIndex) :
        if [currentType.kind isArrayType] then
          [currentType.kind arrayType ?elementType:let elementType ?size:let @bigint arraySize]
          handleArraySubscriptNew (
            !self: inSelfType
            !inGuard: false
            !routineNameForInvocationGraph: inCallerNameForInvocationGraph
            !context: inContext
            !mode: inCurrentMode
            !?temporary: ioTemporaries
            !?staticStringMap: ioGlobalLiteralStringMap
            !?variableMap:ioUniversalMap
            !?alloca: ioAllocaList
            !indexExpression 
            !endOfIndex
            !arraySize:arraySize
            !elementType:elementType
            !?ioInstructionGenerationList
            ?let @objectIR indexIR
         )
         [!?ioTemporaries newTempLLVMVar ?let newLLVMvariable]
         [!?ioInstructionGenerationList appendGetUniversalArrayElementReference
           !currentType
           !currentLLVMName
           !elementType
           !newLLVMvariable
           !indexIR
         ]
         currentType = elementType
         currentLLVMName = newLLVMvariable
        else
          error endOfIndex : "cannot subscript, not an array" : currentType, currentLLVMName
        end
      end
    end
  end
  outInternalRepresentation = .universalReference {!type:currentType !llvmName:currentLLVMName}
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc analyzeSelfAssignmentTarget
  ?self:let @PLMType inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  ?let @location inSelfLocation
  ?let @accessInAssignmentListAST inAccessList
  !@LValueRepresentation outInternalRepresentation
{
  if not [inSelfType.kind isStructure] then
    error inSelfLocation : "'self' should be a structure instance" : outInternalRepresentation
  else
    var currentType = inSelfType
    var currentLLVMName = llvmNameForSelf ()
    for (access) in inAccessList do
      switch access
      case property (@lstring propertyName) :
        let @propertyMap propertyMap = currentType.propertyMap
        [propertyMap searchKey !propertyName ?* ?let @propertyAccessKind propertyAccess]
        switch propertyAccess
        case nonVirtualMethod (*) :
           error propertyName : "a method cannot be written" : currentType, currentLLVMName
        case constantProperty (*) :
          error propertyName : "a constant property cannot be written" : currentType, currentLLVMName
        case indexed (@PLMType propertyType @uint index) :
          [!?ioTemporaries newTempLLVMVar ?let newLLVMvariable]
          [!?ioInstructionGenerationList appendGetUniversalPropertyReference
            !currentType
            !currentLLVMName
            !propertyType
            !newLLVMvariable
            !index
            !propertyName
          ]
          currentType = propertyType
          currentLLVMName = newLLVMvariable
        end
      case arrayAccess (@expressionAST indexExpression @location endOfIndex) :
        if [currentType.kind isArrayType] then
          [currentType.kind arrayType ?elementType:let elementType ?size:let @bigint arraySize]
          handleArraySubscriptNew (
            !self: inSelfType
            !inGuard: false
            !routineNameForInvocationGraph: inCallerNameForInvocationGraph
            !context: inContext
            !mode: inCurrentMode
            !?temporary: ioTemporaries
            !?staticStringMap: ioGlobalLiteralStringMap
            !?variableMap:ioUniversalMap
            !?alloca: ioAllocaList
            !indexExpression 
            !endOfIndex
            !arraySize:arraySize
            !elementType:elementType
            !?ioInstructionGenerationList
            ?let @objectIR indexIR
         )
         [!?ioTemporaries newTempLLVMVar ?let newLLVMvariable]
         [!?ioInstructionGenerationList appendGetUniversalArrayElementReference
           !currentType
           !currentLLVMName
           !elementType
           !newLLVMvariable
           !indexIR
         ]
         currentType = elementType
         currentLLVMName = newLLVMvariable
        else
          error endOfIndex : "cannot subscript, not an array" : currentType, currentLLVMName
        end
      end
    end
    outInternalRepresentation = .universalReference {!type:currentType !llvmName:currentLLVMName}
  end
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
