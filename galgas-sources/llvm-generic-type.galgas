#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @genericFormalParameter {
  case constant (@lstring name)
  case type (@lstring name)
}

#·······················································································································

list @genericFormalParameterList {
  @genericFormalParameter mParameter
}

#·······················································································································

enum @llvmStringDefinitionElement {
  case variable (@lstring name)
  case string (@lstring value)
}

#·······················································································································

list @llvmStringDefinition {
  @llvmStringDefinitionElement mElement
}

#·······················································································································

#map @llvmStringVariableMap {
#  @string mValue
#  insert insertKey error message "the '%K' key is already declared in %L"
#  search searchKey error message "there is no '%K' key"
#}

#·······················································································································

#getter @llvmStringDefinition eval ?let @llvmStringVariableMap inVariableMap -> @string {
#  result = ""
#  for (element) in self do
#    switch element
#    case variable (@lstring name) :
#      [inVariableMap searchKey !name ?let value]
#      result += value
#    case string (@lstring value) :
#      result += value.string
#    end 
#  end
#}

#·······················································································································

shared class @llvmGenericType : @abstractDeclarationAST {
  @lstring mTypeName
  @genericFormalParameterList mGenericFormalParameterList
  @ctExpressionAST mWhereClause
  @bigint mBitSize
}

#·······················································································································

override getter @llvmGenericType locationForErrorSignaling -> @location outLocation {
  outLocation = self.mTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

#  rule <llvm_string_definition> !@llvmStringDefinition outStringDefinition {
#    outStringDefinition = {}
#    repeat
#      select
#        $"string"$ ?let string
#        outStringDefinition += !.string {!value: string}
#      or
#        $identifier$ ?let name
#        outStringDefinition += !.variable {!name: name}
#      end
#    while
#      $+$
#    end
#  }
  
  #·····················································································································

  rule <generic_formal_arguments> !@genericFormalParameterList outGenericFormalParameterList {
    outGenericFormalParameterList = {}
    select
    or
      $<$
      repeat
        select
          $identifier$ ?let constantName
          outGenericFormalParameterList += !.constant {!name: constantName}
        or
          $\$type$ ?let typeName
          outGenericFormalParameterList += !.type {!name: typeName}
        end
      while
        $,$
      end
      $>$
    end
  }

  #·····················································································································

  rule <generic_where_clause> !@ctExpressionAST outWhereClause {
    select
      outWhereClause = @ctTrueExpressionAST.new
    or
      $where$
      <compile_time_expression> ?outWhereClause
    end
  }
  
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $llvm$
    $\$type$ ?let typeName
    <generic_formal_arguments> ?let genericFormalParameterList
    <generic_where_clause> ?let whereClause
    ${$
    $identifier$ ?let sizeKey
    if sizeKey.string != "size" then
      error sizeKey : "this identifier should be 'size'"
    end
    $:$
    $integer$ ?let bitSize
#    $identifier$ ?let sliceKey
#    if sliceKey.string != "slice" then
#      error sliceKey : "this identifier should be 'slice'"
#    end
#    $:$
#    select
#      $no$
#    or
#      $"string"$ ?let sliceString
#      ioAST.mDeclarationListAST += !@sliceDeclarationAST.new {!sliceString !typeName}
#    end
    $}$
    ioAST.mDeclarationListAST += !@llvmGenericType.new {
      !typeName
      !genericFormalParameterList
      !whereClause
      !bitSize
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @llvmGenericType enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = self.mTypeName
  [!?ioGraph addNode !nodeName !self]
}

#·······················································································································

override getter @llvmGenericType keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "Generic type " + self.mTypeName.string
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @genericFormalParameterList buildFormalGenericConstantMap ?!@ctCheckMap ioMap {
  for (element) in self do
    switch element 
    case type (*) :
    case constant (constantName) :
      [!?ioMap insertKey !constantName]
    end
  end
}

#·······················································································································

method @llvmStringDefinition checkCompileTimeExpression ?let @ctCheckMap inMap {
  for (element) in self do
    switch element 
    case string (*) :
    case variable (name) :
      [inMap searchKey !name]
    end
  end
}

#·······················································································································

override method @llvmGenericType enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR unused ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#--- Build formal generic constant parameter map
  @ctCheckMap formalGenericConstantParameterMap = {}
  [self.mGenericFormalParameterList buildFormalGenericConstantMap !?formalGenericConstantParameterMap]
#--- Check Where clause
  [self.mWhereClause checkCompileTimeExpression !formalGenericConstantParameterMap]
#--- Check native LLVM type expression
#  [mTypeNameExpressionString checkCompileTimeExpression !formalGenericConstantParameterMap]
#---
  if [self.mGenericFormalParameterList length] == 0 then
    let llvmType = @omnibusType.new {
#      !propertyGetterMap: {}
      !subscript:.noSubscript
      !attributes: .instanciable | .copyable
      !omnibusTypeDescriptionName: self.mTypeName
      !kind: .llvmType {!bitSize: self.mBitSize}
      !llvmBaseTypeName: "i" + self.mBitSize
    }
    [!?ioContext.mTypeMap insertType
      !lkey: self.mTypeName
      !type: llvmType
    ]
  else
#    let genericType = @omnibusType.new {
#      !propertyGetterMap: {}
#      !propertySetterMap: {}
#      !classConstantMap:{}
#      !constructorMap:{}
#      !subscript:.noSubscript
#      !attributes: .none
#      !omnibusTypeDescriptionName: mTypeName
#      !kind: .generic {!parameters: mGenericFormalParameterList !whereClause: mWhereClause !llvmNativeTypeNameExpression: ""}
#      !llvmBaseTypeName: "" # A generic type cannot be instancied
#    }
#    [!?ioContext.mTypeMap insertType
#      !lkey: mTypeName
#      !type: genericType
#    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

