#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @procFormalArgumentPassingMode {
  case input
  case output
  case inputOutput
}

#·······················································································································

list @routineFormalArgumentListAST {
  @procFormalArgumentPassingMode mFormalArgumentPassingMode
  @lstring mSelector
  @lstring mFormalArgumentTypeName
  @lstring mFormalArgumentName
}

#·······················································································································

getter @procFormalArgumentPassingMode formalPassingModeString -> @string {
  switch self
  case input : result = "?"
  case output : result = "!"
  case inputOutput : result = "?!"
  end
}

#·······················································································································

getter @procFormalArgumentPassingMode requiredActualPassingModeForSelector ?let @string inSelector -> @string {
  switch self
  case input : result = "!"
  case output : result = "?"
  case inputOutput : result = "!?"
  end
  if inSelector != "" then
    result += inSelector + ":"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <procedure_formal_arguments> ?!@ast ioAST !@routineFormalArgumentListAST outProcFormalArgumentList {
    outProcFormalArgumentList = {}
    $($
    repeat
    while
      $!selector:$ ?let selector
      $identifier$ ?let formalArgumentName
      <type_definition> !?ioAST  ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.output
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    while
      $?!selector:$ ?let selector
      $identifier$ ?let formalArgumentName
      <type_definition> !?ioAST ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.inputOutput
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    while
      $?selector:$ ?let selector
      $identifier$ ?let formalArgumentName
      <type_definition> !?ioAST  ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.input
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    end
    $)$
  }

  #·····················································································································

  rule <procedure_input_formal_arguments> ?!@ast ioAST !@routineFormalArgumentListAST outProcFormalArgumentList {
    outProcFormalArgumentList = {}
    $($
    repeat
    while
      $?selector:$ ?let selector
      $identifier$ ?let formalArgumentName
      <type_definition> !?ioAST  ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.input
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    end
    $)$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! ROUTINE TYPED SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# La signature typée d'une routine est la liste du mode de passage, du sélecteur, du type de ses arguments formels.

list @routineTypedSignature {
  @procFormalArgumentPassingMode mFormalArgumentPassingMode
  @lstring mSelector
  @unifiedTypeMap-proxy mTypeProxy # Nécessaire car le type n'est pas forcément résolu au moment de la construction
}

#·······················································································································

getter @routineTypedSignature typedString -> @string {
  result = "("
  for (formalArgumentPassingMode selector typeProxy) in self do
    result += [formalArgumentPassingMode formalPassingModeString] + selector + ":" + [typeProxy key]
  end
  result += ")"
}

#·······················································································································

getter @routineTypedSignature mangledName ?let @lstring inRoutineName -> @lstring {
  var s = inRoutineName.string + "("
  for (formalArgumentPassingMode selector typeProxy) in self do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .new {!s !inRoutineName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! ROUTINE SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
# La signature d'une routine est une chaîne de caractères constituée :
#   - du caractère "(" ;
#   - pour chaque argument :
#       * du mode de passage de l'argument formel ("?", "?!" ou "!"),
#       * du sélecteur,
#       * du caractère ":"
#   - du caractère ")".
# Le couple (nom de routine, signature) est unique. Pour un nom de routine donné, la signature identifie la routine.
# La signature est facilement calculable à partir de la liste des paramètres formels ou de la liste des arguments
# effectifs d'un appel.

#·······················································································································

getter @routineFormalArgumentListAST routineSignature ?let @location inRoutineNameLocation -> @lstring {
  var key = "("
  for (formalArgumentPassingMode selector * *) in self do
    key += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  key += ")"
  result = .new {!key !inRoutineNameLocation}
}

#·······················································································································

getter @effectiveArgumentListAST routineSignature ?let @location inRoutineNameLocation -> @lstring {
  var key = "("
  for (passingMode selector) in self do
    key += [passingMode matchingFormalArgument] + selector + ":"
  end
  key += ")"
  result = .new {!key !inRoutineNameLocation}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
