#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @procFormalArgumentPassingMode %equatable {
  case input
  case output
  case inputOutput
}

#·······················································································································

list @routineFormalArgumentListAST {
  public var @procFormalArgumentPassingMode mFormalArgumentPassingMode
  public var @lstring mSelector
  public var @lstring mFormalArgumentTypeName
  public var @lstring mFormalArgumentName
}

#·······················································································································

getter @procFormalArgumentPassingMode formalPassingModeString -> @string {
  switch self
  case input : result = "?"
  case output : result = "!"
  case inputOutput : result = "?!"
  end
}

#·······················································································································

getter @procFormalArgumentPassingMode requiredActualPassingModeForSelector ?let @string inSelector -> @string {
  switch self
  case input : result = "!"
  case output : result = "?"
  case inputOutput : result = "!?"
  end
  if inSelector != "" then
    result += inSelector + ":"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <procedure_formal_arguments> ?!@ast ioAST !@routineFormalArgumentListAST outProcFormalArgumentList {
    outProcFormalArgumentList = @[]
    $($
    repeat
    while
      $!selector:$ ?let selector
      $identifier$ ?let formalArgumentName
      <type_definition> !?ioAST  ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.output
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    while
      $?!selector:$ ?let selector
      let @lstring formalArgumentName
      select
        $_$
        formalArgumentName = ["" nowhere]
      or
        $identifier$ ?formalArgumentName
      end
      <type_definition> !?ioAST ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.inputOutput
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    while
      $?selector:$ ?let selector
      let @lstring formalArgumentName
      select
        $_$
        formalArgumentName = ["" nowhere]
      or
        $identifier$ ?formalArgumentName
      end
      <type_definition> !?ioAST  ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.input
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    end
    $)$
  }

  #·····················································································································

  rule <procedure_input_formal_arguments> ?!@ast ioAST !@routineFormalArgumentListAST outProcFormalArgumentList {
    outProcFormalArgumentList = @[]
    $($
    repeat
    while
      $?selector:$ ?let selector
      $identifier$ ?let formalArgumentName
      <type_definition> !?ioAST  ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.input
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    end
    $)$
  }

  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! ROUTINE TYPED SIGNATURE
#—————————————————————————————————————————————————————————————————————————————————————————————————
# La signature typée d'une routine est la liste du mode de passage, du sélecteur, du type de ses arguments formels.

list @routineTypedSignature %equatable {
  public var @procFormalArgumentPassingMode mFormalArgumentPassingMode
  public var @lstring mSelector
  public var @unifiedTypeMapEntry mTypeProxy # Nécessaire car le type n'est pas forcément résolu au moment de la construction
  public var @lstring mFormalArgumentName
}

#·······················································································································

getter @routineTypedSignature typedString -> @string {
  result = "("
  for (formalArgumentPassingMode selector typeProxy *) in self do
    result += [formalArgumentPassingMode formalPassingModeString] + selector + ":" + [typeProxy key]
  end
  result += ")"
}

#·······················································································································

getter @routineTypedSignature mangledName
     ?receiverTypeName: let @string inReceiverTypeName
     ?functionName: let @lstring inFunctionName
-> @lstring {
  var s = ""
  if inReceiverTypeName != "" then
    s += inReceiverTypeName + "."
  end
  s += inFunctionName.string + "("
  for (formalArgumentPassingMode selector * *) in self do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = @{!s !inFunctionName.location}
}

#·······················································································································

proc routineTypedSignature ?!@unifiedTypeMap ioTypeMap
                           ?let @routineFormalArgumentListAST inFormalArgumentList
                           !@routineTypedSignature outSignature
{
  outSignature = @[]
  for (formalArgumentPassingMode selector formalArgumentTypeName formalArgumentName) in inFormalArgumentList do
    [!?ioTypeMap makeEntry !formalArgumentTypeName ?let typeProxy]
    outSignature += !formalArgumentPassingMode !selector !typeProxy !formalArgumentName
  end
}

#·······················································································································

proc routineTypedSignature2 ?@unifiedTypeMap inTypeMap
                            ?let @routineFormalArgumentListAST inFormalArgumentList
                            !@routineTypedSignature outSignature
{
  outSignature = @[]
  for (formalArgumentPassingMode selector formalArgumentTypeName formalArgumentName) in inFormalArgumentList do
    let typeProxy = [inTypeMap searchKey !formalArgumentTypeName]
    outSignature += !formalArgumentPassingMode !selector !typeProxy !formalArgumentName
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! ROUTINE SIGNATURE
#—————————————————————————————————————————————————————————————————————————————————————————————————
# La signature d'une routine est une chaîne de caractères constituée :
#   - du caractère "(" ;
#   - pour chaque argument :
#       * du mode de passage de l'argument formel ("?", "?!" ou "!"),
#       * du sélecteur,
#       * du caractère ":"
#   - du caractère ")".
# Le couple (nom de routine, signature) est unique. Pour un nom de routine donné, la signature identifie la routine.
# La signature est facilement calculable à partir de la liste des paramètres formels ou de la liste des arguments
# effectifs d'un appel.

#·······················································································································

getter @routineFormalArgumentListAST routineSignature ?let @location inRoutineNameLocation -> @lstring {
  var key = "("
  for (formalArgumentPassingMode selector * *) in self do
    key += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  key += ")"
  result = @{!key !inRoutineNameLocation}
}

#·······················································································································

getter @effectiveArgumentListAST routineSignature ?let @location inRoutineNameLocation -> @lstring {
  var key = "("
  for (passingMode selector) in self do
    key += [passingMode matchingFormalArgument] + selector + ":"
  end
  key += ")"
  result = @{!key !inRoutineNameLocation}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @routineFormalArgumentListIR {
  public var @procFormalArgumentPassingMode mFormalArgumentKind
  public var @omnibusType mFormalArgumentType
  public var @string mFormalArgumentName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterFormalArguments
  ?context:let @semanticContext inContext
  ?let @routineFormalArgumentListAST inFormalArgumentsAST
  ?!@universalValuedObjectMap ioUniversalMap
  ?!@routineFormalArgumentListIR ioFormalArguments
  ?warningOnUnusedArgs:let @bool inUnusedWarning
{
  for (argumentKind * formalArgumentTypeName formalArgumentName) in inFormalArgumentsAST do
    let typeProxy = [[inContext.mTypeMap searchKey !formalArgumentTypeName] type]
    ioFormalArguments += !argumentKind !typeProxy !formalArgumentName.string
    switch argumentKind
    case input :
      if formalArgumentName.string != "" then
        if inUnusedWarning then
          [!?ioUniversalMap insertLocalConstant !formalArgumentName !true !typeProxy !formalArgumentName]
        else
          [!?ioUniversalMap insertUsedLocalConstant !formalArgumentName !true !typeProxy !formalArgumentName]
        end
      end
    case inputOutput :
     if formalArgumentName.string != "" then
       if inUnusedWarning then
          [!?ioUniversalMap insertLocalVariable !formalArgumentName !typeProxy !formalArgumentName !.hasUnreadValue !true]
        else
          [!?ioUniversalMap insertLocalVariable !formalArgumentName !typeProxy !formalArgumentName !.hasReadValue !true]
        end
      end
    case output :
      [!?ioUniversalMap insertLocalVariable !formalArgumentName !typeProxy !formalArgumentName !.noValue !true]
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
