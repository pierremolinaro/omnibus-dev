#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @staticListPropertyTypeAST {
  case valueType (@lstring type)
  case function (@mode mode @routineFormalArgumentListAST formalArgs @lstring returnType)
}

#·······················································································································

list @staticListPropertyListAST {
  @lstring mPropertyName
  @staticListPropertyTypeAST mPropertyType
}

#·······················································································································

class @staticListAST : @abstractDeclarationAST {
  @lstring mStaticListName
  @staticListPropertyListAST mPropertyList
  @staticListValueListAST mValueList
}

#·······················································································································

list @staticListValueListAST {
  @extendStaticListElementAST mElement
  @location mLocation
}

#·······················································································································

enum @extendStaticListExpressionAST {
  case expression (@expressionAST exp)
  case function (@lstring functionName @routineFormalArgumentListAST formalArgs)
}

#·······················································································································

list @extendStaticListElementAST {
  @extendStaticListExpressionAST mExpression
  @location mEndOfExpression
}

#·······················································································································

dict @extendStaticArrayDeclarationDictAST : @string { # key is static list name
  @staticListValueListAST mExpressions
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $staticArray$
    $identifier$ ?let staticListName
    ${$
    @staticListPropertyListAST propertyList = {}
    repeat
      <staticArrayProperty>!?ioAST !?propertyList
    while
    end
    $}$
    ioAST.mDeclarationListAST += !@staticListAST.new {!staticListName !propertyList !{}}
  }

  #·····················································································································

  rule <staticArrayProperty> ?!@ast ioAST ?!@staticListPropertyListAST ioPropertyList {
    $let$
    $identifier$ ?let propertyName
    select
      <type_definition> !?ioAST ?let typeName
      ioPropertyList += !propertyName !.valueType{!type:typeName}
    or
      $func$
      <mode> ?let mode
      @lstringlist attributeList = {}
      repeat
      while
        $@attribute$ ?let attribute
        attributeList += !attribute
      end
      <procedure_formal_arguments> !?ioAST ?let formalArgs
      @lstring returnType
      select
        returnType = ["" here]
      or
        $->$
        <type_definition>!?ioAST ?returnType
      end
      ioPropertyList += !propertyName !.function{!mode:mode !formalArgs:formalArgs !returnType:returnType}
    end
  }

  #·····················································································································
  # STATIC ARRAY VALUE
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $extend$
    $staticArray$
    $identifier$ ?let staticListName
    $($
    repeat
      @extendStaticListElementAST expressions = {}
      repeat
        $!selector:$ ?let selector
        if selector.string != "" then
          error selector : "selector should be empty"
        end
        <staticArray_exp> !?ioAST !?expressions
      while
      end
      @staticListValueListAST expressionList = {}
      if [ioAST.mExtendStaticArrayDeclarationAST hasKey !staticListName] then
        [ioAST.mExtendStaticArrayDeclarationAST searchKey !staticListName ?expressionList]
      end
      expressionList += !expressions !.here
      ioAST.mExtendStaticArrayDeclarationAST += !staticListName !expressionList
    while
      $,$
    end
    $)$
  }

  #·····················································································································

  rule <staticArray_exp> ?!@ast ioAST ?!@extendStaticListElementAST ioExpressions {
    select
      <expression> !?ioAST ?let exp
      ioExpressions += !.expression {!exp:exp} !.here
    or
      $func$
      $identifier$ ?let functionName
      <procedure_formal_arguments> !?ioAST ?let formalArgs
      ioExpressions +=
        !.function {!functionName:functionName !formalArgs:formalArgs}
        !.here
    end
   }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER EXTENSIONS                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @staticListAST enterExtension
  ?!@extendStaticArrayDeclarationDictAST ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  if [ioExtendStaticArrayDeclarationAST hasKey !mStaticListName.string] then
    [!?ioExtendStaticArrayDeclarationAST removeKey !mStaticListName.string ? let elements]
    outNewDeclaration = @staticListAST.new {
      !mStaticListName
      !mPropertyList
      !mValueList + elements
    }
  else
    outNewDeclaration = self
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @staticListAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
#--- Add node
  [!?ioGraph addNode !mStaticListName !self]
  [!?ioGraph addEdge !mStaticListName !compileTimeDeclarationBarrier ()]
#--- Add dependency edges for type declaration
  for (* type) in mPropertyList do
    switch type
    case valueType (@lstring propertyTypeName) :
      [!?ioGraph addEdge !mStaticListName !propertyTypeName]
    case function (* @routineFormalArgumentListAST formalArgs @lstring returnType) :
      for (* * formalArgumentTypeName *) in formalArgs do
        [!?ioGraph noteNode !formalArgumentTypeName]
      end
      if returnType.string != "" then
        [!?ioGraph addEdge !mStaticListName !returnType]
      end
    end
  end
#--- Add dependency edge for static type values declarations
  for (value *) in mValueList do
    for (operand *) in value do
      switch operand
      case expression (@expressionAST exp) :
        [exp addDependenceEdgeForStaticExpression !mStaticListName !?ioGraph]
      case function (* @routineFormalArgumentListAST formalArgs) :
        for (* * formalArgumentTypeName *) in formalArgs do
          [!?ioGraph noteNode !formalArgumentTypeName]
        end
      end
    end
  end
}

#·······················································································································

override getter @staticListAST locationForErrorSignaling -> @location {
  result = mStaticListName.location
}

#·······················································································································

override getter @staticListAST keyRepresentationForErrorSignaling -> @string {
  result = "staticlist " + mStaticListName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Static list
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func omnibusNameForStaticListType ?let @lstring inStaticListName -> @lstring {
  result = .new {!"staticlist " + inStaticListName !inStaticListName}
}

#·······················································································································

private func llvmNameForStaticListType ?let @lstring inStaticListName -> @lstring {
  result = .new {!"staticlist-" + inStaticListName !inStaticListName}
}

#·······················································································································

private func omnibusNameForStaticListElementType ?let @lstring inStaticListName -> @lstring {
  result = .new {!"staticlist element " + inStaticListName !inStaticListName}
}

#·······················································································································

private func llvmNameForStaticListElementType ?let @lstring inStaticListName -> @lstring {
  result = .new{!"staticlist-element-type-" + [inStaticListName assemblerRepresentation] !inStaticListName.location}
}

#·······················································································································

map @staticlistMap {
  @propertyList mStaticListPropertyList

  insert insertKey error message "static list '%K' is already defined"
}

#·······················································································································

map @staticListInitializationMap {
  @stringlist mInitializationList

  insert insertKey error message "static list '%K' is already defined"
}

#·······················································································································

override method @staticListAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR ioUserLLVMTypeDefinitionListIR
{
  @propertyList propertyList = {}
  @propertyGetterMap propertyGetterMap = {}
  @stringset propertyNameSet = {}
  let omnibusElementTypeName = omnibusNameForStaticListElementType (!mStaticListName)
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !omnibusElementTypeName ?let elementTypeProxy]
#-------------------------------------------------------------------- Build property list, map
  for (propertyName kind) in mPropertyList do (propertyIndex)
    switch kind
    case valueType (@lstring propertyTypeName) :
      let propertyType = [@unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !propertyTypeName} type]
      if [propertyNameSet hasKey !propertyName] then
        error propertyName : "duplicated property name"
      else
        propertyNameSet += !propertyName
        propertyList += !propertyName !propertyType
        [!?propertyGetterMap insertKey
          !propertyName
          !true # Public
          !.storedProperty{!type:propertyType !index:propertyIndex}
        ]
      end
    case function (@mode mode @routineFormalArgumentListAST formalArgs @lstring returnTypeName) :
    #--- Routine LLVM name
      let routineLLVMName = routineMangledNameFromAST (
        !llvmNameForStaticListElementType (!mStaticListName)
        !propertyName
        !formalArgs
      )
    #--- Signature
      routineTypedSignature (!?ioContext.mTypeMap !formalArgs ?let signature)
      let @unifiedTypeMap-proxy returnTypeProxy = if returnTypeName.string == "" then
        .null
      else
        @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !returnTypeName}
      end
    #--- Enter routine type in type map
      let propertyType = @omnibusType.new {
        !propertyGetterMap:{}
        !subscript:.noSubscript
        !attributes:.none
        !omnibusTypeDescriptionName:""
        !kind:.function {
          !mode:mode
          !signature:signature
          !returnTypeProxy:returnTypeProxy 
        }
        !llvmBaseTypeName:""
      }
   #--- Enter property
      propertyList += !propertyName !propertyType
    #--- Enter in routine map
      let routineMangledName = @lstring.new {
        !omnibusNameForStaticListElementType (!mStaticListName).string + "." + propertyName.string + [formalArgs routineSignature !propertyName]
        !propertyName
      }
      [!?ioContext.mRoutineMap insertKey
        !routineMangledName
        !true
        !signature
        !returnTypeProxy
        !{!.userMode !routineLLVMName}
        !false
        !.userMode
      ]
    #--- Generate glue function
      ioRoutineListIR += !@staticListIndirectRoutineIR.new {
        !routineLLVMName
        !isRequired:true
        !warnsIfUnused:true
        !elementTypeProxy
        !signature
        !returnTypeProxy # .void if no return value
        !propertyIndex
      }
    end
  end
  [!?ioContext.mStaticListMap insertKey !mStaticListName !propertyList]
#-------------------------------------------------------------------- Enter element type in type map
  let elementType = @omnibusType.new {
    !propertyGetterMap:propertyGetterMap
    !subscript:.noSubscript
    !attributes:.none
    !omnibusTypeDescriptionName:omnibusNameForStaticListElementType (!mStaticListName)
    !kind:.structure {!propertyList:propertyList}
    !llvmBaseTypeName:llvmNameForStaticListElementType (!mStaticListName)
  }
  [!?ioContext.mTypeMap insertType
    !lkey:omnibusElementTypeName
    !type:elementType
  ]
#-------------------------------------------------------------------- Enter static list values
  @stringlist stringValueList = {}
  for (element *) in mValueList do
    if [propertyList length] != [element length] then
      error mStaticListName
      : [[propertyList length] string] + " expressions required, "
      + [[element length] string] + " provided"
    else
      var staticValue = "{"
      for (operand endOfExp) in element, (* propertyType) in propertyList do
        switch operand
        case expression (@expressionAST exp) :
          if [propertyType.kind isFunction] then
            error endOfExp : "a function name is expected here"
          else
            computeStaticExpression (
              !?context: ioContext
              !?staticEntityMap:ioStaticEntityMap
              !expression:exp
              !errorLocation:endOfExp
              !optionalContextualTypeName:["" nowhere]
              ?result:let @objectIR expressionResult
            )
          #--- Enter in static value
            staticValue += [propertyType llvmTypeName] + " " + [expressionResult llvmName]
          end      
        case function (@lstring functionName @routineFormalArgumentListAST formalArgs) :
          if not [propertyType.kind isFunction] then
            error endOfExp : "a static expression is expected here"
          else
            [propertyType.kind function
              ?mode:let mode
              ?signature:let functionSignature
              ?returnTypeProxy:let functionReturnTypeProxy
            ]
            let argumentSignature = [formalArgs routineSignature !functionName]
            let functionMangledName = @lstring.new {!functionName.string + argumentSignature !functionName}
            [ioContext.mRoutineMap searchKey
              !functionMangledName
              ?let unused candidateIsPublic
              ?let candidateSignature
              ?let candidateReturnTypeProxy # null if no returned value
              ?let implementedModeDictionary
              ?let unused implementedIsExported
              ?let unused candidateMode
            ]
          #--- Check mode
            let routineLLVMName = checkModeAndReturnsRoutineLLVMName (!implementedModeDictionary !mode !functionName)
            if (functionReturnTypeProxy == .null) && (candidateReturnTypeProxy != .null) then
              error functionName : "this function should return an $" + [candidateReturnTypeProxy key] + " object"
            elsif (functionReturnTypeProxy != .null) && (candidateReturnTypeProxy == .null) then
              error functionName : "this function should return no object"
            end
            if [functionSignature length] != [candidateSignature length] then
              error functionName
              : "this function has " + [candidateSignature length] + " argument(s) ("
              + [functionSignature length] + " required)"
            else
              for required in functionSignature, candidate in candidateSignature do
                if required.mTypeProxy != candidate.mTypeProxy then
                  error candidate.mSelector : "argument type should be $" + [required.mTypeProxy key]
                end
              end
            end
            staticValue += [propertyType llvmTypeName] + " @" + [routineLLVMName assemblerRepresentation]
          end
        end
      between
        staticValue += ", "
      end
      staticValue += "}"
      stringValueList += !staticValue
    end
  end
  [!?ioStaticListValueMap insertKey !mStaticListName !stringValueList]
#-------------------------------------------------------------------- List type property map
  @propertyGetterMap listTypePropertyMap = {}
  [!?listTypePropertyMap insertKey # "count" property
    !.new {!"count" !mStaticListName.location}
    !true # public
    !.constantProperty {!value:.literalInteger {!type: compileTimeIntegerType () !value:[mValueList length]}}
  ]
#-------------------------------------------------------------------- Enter list type in type map
  let arrayType = @omnibusType.new {
    !propertyGetterMap:listTypePropertyMap
    !subscript:.staticSubscript {!elementType:elementType !size:[stringValueList length]}
    !attributes:.instanciable | .copyable
    !omnibusTypeDescriptionName:omnibusNameForStaticListType (!mStaticListName)
    !kind:.staticArrayType {!elementType:elementType !size:[stringValueList length]}
    !llvmBaseTypeName:llvmNameForStaticListType (!mStaticListName)
  }
  [!?ioContext.mTypeMap insertType
    !lkey:omnibusNameForStaticListType (!mStaticListName)
    !type:arrayType
  ]
#-------------------------------------------------------------------- Enter list in constant map
  let staticListType = @unifiedTypeMap-proxy.searchKey {!ioContext.mTypeMap !omnibusNameForStaticListType (!mStaticListName)}
  [!?ioContext.mGlobalConstantMap insertKey
    !mStaticListName
    !.reference {!type:[staticListType type] !llvmName:llvmNameForGlobalVariable (!mStaticListName)}
  ]
  [!?ioContext.mValuedObjectMap insertGlobalConstant
    !mStaticListName
    !.reference {!type:[staticListType type] !llvmName:llvmNameForGlobalVariable (!mStaticListName)}
  ]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedStaticList.new {!mStaticListName !mValueList}
#-------------------------------------------- GenerateLLVM type definitions
  ioUserLLVMTypeDefinitionListIR += !@userLLVMSructureTypeDefinitionIR.new {
    ![elementType llvmTypeName]
    !propertyList
  }
  ioUserLLVMTypeDefinitionListIR += !@userLLVMStaticArrayTypeDefinitionIR.new {
    ![arrayType llvmTypeName]
    !elementType
    ![stringValueList length]
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @staticListInvokedFunctionSetMap {
  @stringset mInvokedFunctionSet
  
  insert insertKey error message "INTERNAL ERROR"
  search searchKey error message "INTERNAL ERROR"
}

#·······················································································································

class @decoratedStaticList : @abstractDecoratedDeclaration {
  @lstring mStaticListName
  @staticListValueListAST mValueList
}

#·······················································································································

override method @decoratedStaticList semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  @stringset invokedFunctionSet = {}
  for (element *) in mValueList do
    for (operand endOfExp) in element do
      switch operand
      case expression (@expressionAST unused exp) :
      case function (@lstring functionName @routineFormalArgumentListAST formalArgs) :
      #--- Routine mangled name
        let routineMangledName = routineMangledNameFromAST (
          !"" 
          !functionName
          !formalArgs
        )
        invokedFunctionSet += !routineMangledName
      end
    end
  end
  [!?ioTemporaries.mStaticArrayMapForTemporaries insertKey !mStaticListName !invokedFunctionSet]
  [!?ioIntermediateCodeStruct.mStaticArrayMapForIntermediate insertKey !mStaticListName !invokedFunctionSet]
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @staticListInitializationMap generateLLVMForStaticLists
  ?let @staticListInvokedFunctionSetMap inUsefulStaticArrayMap
  ?!@string ioLLVMcode
{
  var first = true
  for (key initList) in self do
    if [inUsefulStaticArrayMap hasKey !key] then
      if first then
        first = false
        ioLLVMcode += llvmTitleComment (!"Static Arraies")
      end
      ioLLVMcode += llvmNameForGlobalVariable (!key) + " = private unnamed_addr constant ["
      ioLLVMcode += [[initList length] string] + " x %" + llvmNameForStaticListElementType (![key nowhere]) + "] [\n"
      for (value) in initList
      do
        ioLLVMcode += "  %" + llvmNameForStaticListElementType (![key nowhere]) + " " + value
      between
        ioLLVMcode += ",\n"
      end
      ioLLVMcode += "\n]\n\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: INDIRECT FUNCTION CALL
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @staticListIndirectRoutineIR : @abstractRoutineIR {
  @unifiedTypeMap-proxy mStaticListElementType
  @routineTypedSignature mFormalArgumentListForGeneration
  @unifiedTypeMap-proxy mReturnTypeProxy # .void if no return value
  @uint mPropertyIndex
}

#·······················································································································

override method @staticListIndirectRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "define internal "
  if mReturnTypeProxy == .null then
    ioLLVMcode += "void"
  else
    ioLLVMcode += [[mReturnTypeProxy type] llvmTypeName]
  end
  ioLLVMcode += " @" + [mRoutineMangledName assemblerRepresentation] + " ("
  let receiverLLVMTypeName = [[mStaticListElementType type] llvmTypeName]
  var first = true
  if receiverLLVMTypeName != "" then
    ioLLVMcode += receiverLLVMTypeName + "* " + llvmNameForSelf ()
    first = false
  end
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentPassingMode
    case input :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + " %in." + [mFormalArgumentName assemblerRepresentation]
    case output :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + "* %out." + [mFormalArgumentName assemblerRepresentation]
   case inputOutput :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + "* %inout." + [mFormalArgumentName assemblerRepresentation]
    end
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
#--- Indirect function LLVM type name
  @string llvmFunctionTypeName
  if mReturnTypeProxy == .null then
    llvmFunctionTypeName = "void"
  else
    llvmFunctionTypeName = [[mReturnTypeProxy type] llvmTypeName]
  end
  llvmFunctionTypeName += "("
  first = true
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      llvmFunctionTypeName += ", "
    end
    switch mFormalArgumentPassingMode
    case input :
      llvmFunctionTypeName += [[mTypeProxy type] llvmTypeName]
    case output :
      llvmFunctionTypeName += [[mTypeProxy type] llvmTypeName] + "*"
   case inputOutput :
      llvmFunctionTypeName += [[mTypeProxy type] llvmTypeName] + "*"
    end
  end
  llvmFunctionTypeName += ")*"
#--- Indirect call
  ioLLVMcode += "  %ptr = getelementptr inbounds " + receiverLLVMTypeName 
  ioLLVMcode += ", " + receiverLLVMTypeName + "* %self, i32 0, i32 " + mPropertyIndex + "\n"
  ioLLVMcode += "  %f = load " + llvmFunctionTypeName + ", " + llvmFunctionTypeName + "* %ptr\n"
  if mReturnTypeProxy == .null then
    ioLLVMcode += "  call void"
  else
    ioLLVMcode += "  %result = call " + [[mReturnTypeProxy type] llvmTypeName]
  end
  ioLLVMcode += " %f ("
  first = true
  for () in mFormalArgumentListForGeneration do
    if first then
      first = false
    else
      ioLLVMcode += ", "
    end
    switch mFormalArgumentPassingMode
    case input :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + " %in." + [mFormalArgumentName assemblerRepresentation]
    case output :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + "* %out." + [mFormalArgumentName assemblerRepresentation]
   case inputOutput :
      ioLLVMcode += [[mTypeProxy type] llvmTypeName] + "* %inout." + [mFormalArgumentName assemblerRepresentation]
    end
  end
  ioLLVMcode += ")\n"
#--- Epilog
  if mReturnTypeProxy == .null then
    ioLLVMcode += "  ret void\n"
  else
    ioLLVMcode += "  ret " + [[mReturnTypeProxy type] llvmTypeName] + " %result\n"
  end
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
