#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @sliceAssignmentInstructionAST : @instructionAST {
  public var @lstring mTypeName
  public var @sliceAssignmentListAST mSliceAssignmentList
  public var @expressionAST mSourceExpression
  public var @location mSourceExpressionLocation
}

#·······················································································································

list @sliceAssignmentListAST {
  public var @lstring mSliceWidth
  public var @sliceTargetAST mSliceKind
}

#·······················································································································

enum @sliceTargetAST {
  case discarded
  case varDeclaration (@lstring varName)
  case letDeclaration (@lstring letName)
  case lValue (@LValueAST target)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    ${$
    $\$type$ ?let typeName
    var @sliceAssignmentListAST sliceAssignmentListAST = {}
    repeat
      $?selector:$ ?let sliceWidth
      let @sliceTargetAST sliceKind
      select
        $_$
        sliceKind = .discarded
      or
        <lvalue> !?ioAST ?let target
        sliceKind = .lValue {!target:target}
      or
        $var$
        $identifier$ ?let varName
        sliceKind = .varDeclaration {!varName:varName}
      or
        $let$
        $identifier$ ?let letName
        sliceKind = .letDeclaration {!letName:letName}
      end
      sliceAssignmentListAST += !sliceWidth !sliceKind
    while
    end
    $}$
  #--- Source expression
    $=$
    <expression> !?ioAST ?let sourceExpression
  #--- AST
    ioInstructionList += !@sliceAssignmentInstructionAST.new {
      !typeName.location
      !typeName
      !sliceAssignmentListAST
      !sourceExpression
      !.here
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sliceAssignmentInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph noteNode !self.mTypeName]
  [self.mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
  for (* sliceKind) in self.mSliceAssignmentList do
    switch sliceKind
    case discarded :
    case varDeclaration (*) :
    case letDeclaration (*) :
    case lValue (@LValueAST target) :
      [target noteInstructionTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sliceAssignmentInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Search Type
  let resultType = [[inContext.mTypeMap searchKey !self.mTypeName] type]
#--- Check type is an unsigned integer type
  var @uint bitCount
  if not [resultType.kind isInteger] then
    error self.mTypeName: "this type should be an unsigned integer type" : bitCount
  else
    [resultType.kind integer ?2* ?unsigned:let unsigned ?bitCount:bitCount]
    if not unsigned then
      error self.mTypeName: "this type should be an unsigned integer type" : bitCount
    end
  end
#--- Analyze source expression
  [self.mSourceExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:resultType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@objectIR sourceOperand
  ]
#--- Load from reference ?
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?sourceOperand]
#--- If source operand is static type, check value and convert it to 'resultType'
  if [sourceOperand isLiteralInteger] then
    [sourceOperand literalInteger ?1* ?value:let @bigint value]
    if value >= (1G << bitCount) then
      error self.mSourceExpressionLocation : "static value too large" : sourceOperand
    else
      sourceOperand = .literalInteger {!type:resultType !value:value}
    end
  end
#--- Analyze slices
  var rightShiftAmount = bitCount
  for (sliceWidthStr sliceKind) in self.mSliceAssignmentList do
    var sourceOperandForSlicing = sourceOperand
  #--- Analyze selector
    let @lstring sliceTypeName
    let @uint sliceWidth
    if sliceWidthStr.string == "" then
      error sliceWidthStr : "anonymous selector not allowed here" : sliceWidth, sliceTypeName
    elsif sliceWidthStr.string == "b" then
      sliceWidth = 1
      sliceTypeName = .new {!boolTypeName () !self.mTypeName.location}
    elsif not [sliceWidthStr.string isDecimalUnsignedNumber] then
      error sliceWidthStr : "the selector should be an unsigned integer value" : sliceWidth, sliceTypeName
    else
      sliceWidth = [sliceWidthStr decimalUnsignedNumber]
      sliceTypeName = .new {!"u" + sliceWidth !self.mTypeName.location}
      if sliceWidth == 0 then
        error sliceWidthStr : "the bit slice width should be > 0"
      end
    end
    if rightShiftAmount >= sliceWidth then
      rightShiftAmount = rightShiftAmount - sliceWidth
    else
      let specifiedBitCount = bitCount + sliceWidth - rightShiftAmount
      error sliceWidthStr : "bit slice overflow: " + specifiedBitCount + " bits, should be " + bitCount
      rightShiftAmount = 0
    end
    let sliceType = [[inContext.mTypeMap searchKey !sliceTypeName] type]
  #--- Shift and truncate source value
    [!?ioInstructionGenerationList appendLogicalShiftRight !?sourceOperandForSlicing !rightShiftAmount !?ioTemporaries]
    [!?ioInstructionGenerationList appendTrunc !sliceType !?sourceOperandForSlicing !?ioTemporaries]
  #--- Analyze target
    switch sliceKind
    case discarded :
    case varDeclaration (varName) :
    #--- Declare local variable
      let omnibusLocalVariableName = @lstring.new {!varName.string + "." + ioTemporaries.mTemporaryIndex !varName}
      ioTemporaries.mTemporaryIndex += 1
      [!?ioUniversalMap insertLocalVariable !varName !sliceType !omnibusLocalVariableName !.hasUnreadValue !false]
    #--- Code generation
      ioAllocaList += !llvmNameForLocalVariable (!omnibusLocalVariableName) !sliceType !false
    #--- Target reference
      let targetRef = @LValueRepresentation.new {
        !sliceType
        !llvmNameForLocalVariable (!omnibusLocalVariableName)
      }
   #--- Generate assignment instruction
      [!?ioInstructionGenerationList appendCopyFromReferences
        !inContext.mAssignmentOperatorMap
        !?ioTemporaries
        !errorLocation:varName.location
        !source:sourceOperandForSlicing
        !target:targetRef
      ]
    case letDeclaration (letName) :
    #--- Declare local constant
      let omnibusLocalVariableName = @lstring.new {!letName.string + "." + ioTemporaries.mTemporaryIndex !letName}
      ioTemporaries.mTemporaryIndex += 1
      [!?ioUniversalMap insertLocalConstant !letName !false !sliceType !omnibusLocalVariableName]
    #--- Code generation
      ioAllocaList += !llvmNameForLocalVariable (!omnibusLocalVariableName) !sliceType !false
    #--- Target reference
      let targetRef = @LValueRepresentation.new {
        !sliceType
        !llvmNameForLocalVariable (!omnibusLocalVariableName)
       }
    #--- Generate assignment instruction
      [!?ioInstructionGenerationList appendCopyFromReferences
        !inContext.mAssignmentOperatorMap
        !?ioTemporaries
        !errorLocation:letName.location
        !source:sourceOperandForSlicing
        !target:targetRef
      ]
    case lValue (@LValueAST target) :
      [target analyzeLValue
        !self: inSelfType
        !forAddressOf: false
        !routineAttributes:inRoutineAttributes
        !context: inContext
        !mode: inMode
        !?temporary: ioTemporaries
        !?staticEntityMap:ioStaticEntityMap
        !?variableMap:ioUniversalMap
        !?alloca: ioAllocaList
        !?instructionListIR: ioInstructionGenerationList
        ?let @LValueRepresentation lvalueIR
      ]
    #--- Generate assignment instruction
      [!?ioInstructionGenerationList appendCopyFromReferences
        !inContext.mAssignmentOperatorMap
        !?ioTemporaries
        !errorLocation:target.mIdentifier
        !source:sourceOperandForSlicing
        !target:lvalueIR
      ]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
