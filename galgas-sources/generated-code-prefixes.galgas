#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmAttributeFunction -> @string {
  result = " nounwind minsize optsize "
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticAttribute -> @string {
  result = "static"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once compileTimeDeclarationBarrier -> @lstring {
  result = ["«compile time»" nowhere]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Type
#—————————————————————————————————————————————————————————————————————————————————————————————————

func registerGroupNameFromOmnibusName ?let @lstring inName -> @lstring {
  result = @{!"registers " + inName !inName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  Literal Strings
#—————————————————————————————————————————————————————————————————————————————————————————————————

func literalStringName ?let @uint inIndex -> @string {
  result = "@string." + inIndex
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func literalCharacterArrayName ?let @uint inIndex -> @string {
  result = "@str.array." + inIndex
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Infix operators
#—————————————————————————————————————————————————————————————————————————————————————————————————

func infixOperatorMapKey ?let @omnibusType inLeftType
                         ?let @omnibusInfixOperator inInfixOperator
                         ?let @location inOperatorLocation
                         ?let @omnibusType inRightType -> @lstring 
{
  var s = inLeftType.omnibusTypeDescriptionName + " " + inInfixOperator
  s += " " + inRightType.omnibusTypeDescriptionName
  result = @{!s !inOperatorLocation}
}

#·······················································································································
 
func infixOperatorFunctionName
      ?let @omnibusType inLeftType
      ?let @omnibusInfixOperator inOperator
      ?let @omnibusType inRightType -> @string
{
  result = "operator." + inLeftType.omnibusTypeDescriptionName + "."
  switch inOperator
   case equal     : result += "equal"
   case lessThan : result += "lessThan"
   case infEqual  : result += "infEqual"
   case bitWiseAndOp : result += "bitWiseAnd"
   case bitWiseOrOp : result += "bitWiseOr"
   case bitWiseXorOp : result += "xor"
   case addOp       : result += "add"
   case addOpNoOvf  : result += "addOpNoOvf"
   case subOp       : result += "sub"
   case subOpNoOvf  : result += "subOpNoOvf"
   case mulOp       : result += "mul"
   case mulOpNoOvf  : result += "mulOpNoOvf"
   case divOp       : result += "div"
   case divOpNoOvf  : result += "divNoOvf"
   case modOp    : result += "modulo"
   case modOpNoOvf: result += "moduloNoOvf"
   case leftShiftOp  : result += "leftShift"
   case rightShiftOp : result += "rightShift"
  end
  result += "." + inRightType.omnibusTypeDescriptionName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Prefix operators
#—————————————————————————————————————————————————————————————————————————————————————————————————

func prefixOperatorMapKey ?let @omnibusType inReceiverType
                          ?let @prefixOperator inOperator
                          ?let @location inOperatorLocation -> @lstring 
{
  var @string s
  switch inOperator
   case minusNoOvf : s = "-%"
   case minusOp    : s = "-"
   case notOp      : s = "not"
   case bitWiseComplement : s = "~"
  end
  s += " " + inReceiverType.omnibusTypeDescriptionName
  result = @{!s !inOperatorLocation}
}

#·······················································································································
 
func prefixOperatorFunctionName
      ?let @omnibusType inReceiverType
      ?let @prefixOperator inOperator -> @string
{
  result = "operator."
  switch inOperator
   case minusNoOvf : result += "minusNoOvf"
   case minusOp    : result += "minus"
   case notOp      : result += "not"
   case bitWiseComplement : result += "complement"
  end
  result += "." + inReceiverType.omnibusTypeDescriptionName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Predefined types
#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticStringTypeName -> @string {
  result = "literalString"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Functions
#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once functionResultVariableName -> @string {
  result = "result"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForFunction ?let @string inName -> @string {
  result = [inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Getter LLVM name
#—————————————————————————————————————————————————————————————————————————————————————————————————

func getterLLVMName ?@string inReceiverLLVMTypeName ?let @string inPropertyName -> @string {
  result = "get." + inReceiverLLVMTypeName + "." + inPropertyName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Setter LLVM name
#—————————————————————————————————————————————————————————————————————————————————————————————————

func setterLLVMName ?@string inReceiverLLVMTypeName ?let @string inPropertyName -> @string {
  result = "set." + inReceiverLLVMTypeName + "." + inPropertyName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Interrupt routine
#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceInterrupt ?let @lstring inName -> @lstring {
  result = @{!"interrupt.service." + inName !inName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionInterrupt ?let @string inName -> @string {
  result = "interrupt.section." + inName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Services
#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceCall ?let @string inName -> @string {
  result = ["service.user." + inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceImplementation ?let @string inName -> @string {
  result = ["service.implementation." + inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Sections
#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionCall ?let @string inName -> @string {
  result = ["section.user." + inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionImplementation ?let @string inName -> @string {
  result = ["section.implementation." + inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Guards
#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once acceptVariableOmnibusName -> @string {
  result = "accept"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once waitForGuardChangeFunctionName -> @string {
  result = "guard.wait.for.change"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  Variable names
#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForLocalVariable ?let @string inName -> @string {
  result = "%" + ["var." + inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForSelf -> @string {
  result = "%self"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGlobalVariable ?let @string inName -> @string {
  result = "@gvar." + [inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGlobalSyncInstance ?let @string inName -> @string {
  result = "@gsync." + [inName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   Attributes
#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once instantiableAttribute -> @string {
  result = "instantiable"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once copyableAttribute -> @string {
  result = "copyable"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once mutatingAttribute -> @string {
  result = "mutating"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once userAttributeForRegister -> @string {
  result = "user"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once noUnusedWarningAttribute -> @string {
  result = "noUnusedWarning"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once exportedAttribute -> @string {
  result = "exported"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! Tasks
#—————————————————————————————————————————————————————————————————————————————————————————————————

func stackNameForTask ?let @string inTaskName -> @string {
  result = "@" + ["task.stack." + inTaskName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func setupNameForTaskType ?let @string inTaskTypeName -> @string {
  result = "@" + ["task.setup." + inTaskTypeName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func activateNameForTaskType ?let @string inTaskTypeName -> @string {
  result = "task.activate." + inTaskTypeName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func deactivateNameForTaskType ?let @string inTaskTypeName -> @string {
  result = "@" + ["task.deactivate." + inTaskTypeName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func stackAddressForTask ?let @string inTaskName -> @string {
  result = "%" + ["task.stack.address." + inTaskName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func mainRoutineNameForTask ?let @string inTaskName -> @string {
  result = "@" + ["task.main." + inTaskName assemblerRepresentation]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForTaskLoopFunction -> @string {
  result = "task.loop"
}
#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForTaskWaitsForActivation-> @string {
  result = "xtr.wait.for.activation"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForActivateTask-> @string {
  result = "xtr.activate.task"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  Heap alloc and free
#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once memoryAllocSectionName -> @string {
  result = "heap.memory.alloc"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func %once memoryFreeSectionName -> @string {
  result = "heap.memory.free"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! Register Group Array Name
#—————————————————————————————————————————————————————————————————————————————————————————————————

func registerGroupAddressArrayLLVMname ?let @string inGroupName -> @string {
  result = "@register.group.array." + [inGroupName assemblerRepresentation]
}
#—————————————————————————————————————————————————————————————————————————————————————————————————

