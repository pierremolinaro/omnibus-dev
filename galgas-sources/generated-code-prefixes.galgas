#----------------------------------------------------------------------------------------------------------------------*

getter @unifiedTypeMap-proxy llvmName -> @string outName {
  switch [self kind]
  case boolean : outName = "i1"
  case boolset : outName = "<<boolset>>"
  case enumeration (@enumConstantMap constantMap) : outName = "i" + [[constantMap count] - 1 significantBitCount]
  case integer (@bigint unused min @bigint unused max @bool unused unsigned @uint bitCount) : outName = "i" + bitCount
  case literalString : outName = "<<literalString>>"
  case structure (@propertyMap unused propertyMap) : outName = "<<structure>>"
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION PREFIXES                                                                                            *
#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForProperty ?name:@string inName -> @string outName {
  outName = "property_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func %once receiverName -> @string outName {
  outName = "receiver"
}

#----------------------------------------------------------------------------------------------------------------------*

func %once receiverPtrName -> @string outName {
  outName = "receiverPtr"
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForType ?name:@string inName -> @string outPrefix {
  outPrefix = "type_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func %once literalStringPrefix -> @string outName {
  outName = "str_"
}

#----------------------------------------------------------------------------------------------------------------------*

func %once staticStringTypeName -> @string outName {
  outName = "StaticString"
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForFunction ?name:@string inName -> @string outName {
  outName = "func_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForProcedure ?@string inName -> @string outName {
  outName = "proc_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForLocalVariable ?@string inName -> @string outName {
  outName = "var_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForGlobalVariable ?@string inName -> @string outName {
  outName = "gvar_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForTemporaryConstant ?idx:@uint inIndex -> @string outName {
  outName = "tempconst_" + inIndex
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledNameForRegister ?name:@string inName -> @string outName {
  outName = "register_" + [inName nameRepresentation]
}

#----------------------------------------------------------------------------------------------------------------------*

func %once noWarningIfUnusedAttribute -> @string outResult {
  outResult = "noWarningIfUnused"
}

#----------------------------------------------------------------------------------------------------------------------*

func %once weakAttribute -> @string outResult {
  outResult = "weak"
}

#----------------------------------------------------------------------------------------------------------------------*

