#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmAttributeFunction -> @string {
  result = " nounwind minsize optsize "
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticAttribute -> @string {
  result = "static"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Type
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmTypeStringFromPLMname ?let @string inName -> @string {
  result = "type." + inName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmTypeNameFromPLMname ?let @lstring inName -> @lstring {
  result = .new {!llvmTypeStringFromPLMname (!inName.string) !inName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func registerGroupNameFromPLMname ?let @lstring inName -> @lstring {
  result = .new {!"registers " + inName !inName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Driver
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmDriverStringFromName ?let @string inDriverName -> @string {
  result = if inDriverName == "" then
    inDriverName
  else
    "driver." + inDriverName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmDriverNameFromName ?let @lstring inDriverName -> @lstring {
  result = .new {!llvmDriverStringFromName (!inDriverName.string) !inDriverName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Names for invocation graph
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func initNameForInvocationGraph ?let @string inReceiverTypeName ?let @location inLocation -> @lstring {
  result = .new {!"init " + inReceiverTypeName !inLocation}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func setupNameForInvocationGraph ?let @string inReceiverTypeName ?let @lbigint inPriority -> @lstring {
  var s = "setup " + inReceiverTypeName
  s += " " + inPriority.bigint
  result = .new {!s !inPriority.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func panicNameForInvocationGraph ?let @string inName ?let @lbigint inPriority -> @lstring {
  let s = "panic " + inName + " " + inPriority.bigint
  result = .new {!s !inPriority.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  Literal Strings
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func literalStringName ?let @uint inIndex -> @string {
  result = "@string." + inIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func literalCharacterArrayName ?let @uint inIndex -> @string {
  result = "@str.array." + inIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Predefined types
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticStringTypeName -> @string {
  result = "staticString"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once boolTypeName -> @string {
  result = "bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticIntegerTypeName -> @string {
  result = "staticInt"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Functions
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once functionResultVariableName -> @string {
  result = "result"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForFunction ?let @string inName -> @string {
  result = ["func." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Interrupt routine
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func interruptNameForInvocationGraph ?let @lstring inName -> @lstring {
  let s = "interrupt " + inName
  result = .new {!s !inName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceInterrupt ?let @lstring inName -> @lstring {
  result = .new {!"interrupt.service." + inName !inName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionInterrupt ?let @string inName -> @string {
  result = "interrupt.section." + inName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   SVC
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSVCCall ?let @lstring inName ?let @routineKind inMode -> @string {
  switch inMode
  case primitive :
    result = llvmNameForPrimitiveCall (!inName.string)
  case service :
    result = llvmNameForServiceCall (!inName.string)
  case section :
    result = llvmNameForSectionCall (!inName.string)
  case function (*) :
    error inName : "INTERNAL ERROR" : result
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSVCImplementation ?let @lstring inName ?let @routineKind inMode -> @string {
  switch inMode
  case primitive :
    result = llvmNameForPrimitiveImplementation (!inName.string)
  case service :
    result = llvmNameForServiceImplementation (!inName.string)
  case section :
    result = llvmNameForSectionImplementation (!inName.string)
  case function (*) :
    error inName : "INTERNAL ERROR" : result
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Primitives
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForPrimitiveCall ?let @string inName -> @string {
  result = ["primitive.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForPrimitiveImplementation ?let @string inName -> @string {
  result = ["primitive.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Services
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceCall ?let @string inName -> @string {
  result = ["service.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceImplementation ?let @string inName -> @string {
  result = ["service.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Sections
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionCall ?let @string inName -> @string {
  result = ["section.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionImplementation ?let @string inName -> @string {
  result = ["section.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Guards
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once acceptVariablePLMName -> @string {
  result = "accept"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGuardCall ?let @string inName -> @string {
  result = ["guard.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGuardImplementation ?let @string inName -> @string {
  result = ["guard.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once waitForGuardChangeFunctionName -> @string {
  result = "guard.wait.for.change"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  Variable names
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForLocalVariable ?let @string inName -> @string {
  result = "%" + ["var." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForSelf -> @string {
  result = "%self"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGlobalVariable ?let @string inName -> @string {
  result = "@" + ["gvar." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGlobalSyncInstance ?let @string inName -> @string {
  result = "@" + ["gsync." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Attributes
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once instantiableAttribute -> @string {
  result = "instantiable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once copyableAttribute -> @string {
  result = "copyable"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once mutatingAttribute -> @string {
  result = "mutating"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once safeAttribute -> @string {
  result = "safe"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once userAccessAttribute -> @string {
  result = "userAccess"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once userAttributeForRegister -> @string {
  result = "user"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once noUnusedWarningAttribute -> @string {
  result = "noUnusedWarning"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once exportedAttribute -> @string {
  result = "exported"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Tasks
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func stackNameForTask ?let @string inTaskName -> @string {
  result = "@" + ["task.stack." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func initNameForTaskType ?let @string inTaskTypeName -> @string {
  result = "@" + ["task.init." + inTaskTypeName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func stackAddressForTask ?let @string inTaskName -> @string {
  result = "%" + ["task.stack.address." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func mainRoutineNameForTask ?let @string inTaskName -> @string {
  result = "@" + ["task.main." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForTaskLoopFunction -> @string {
  result = "task.loop"
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForTaskAutoBlockService -> @string {
  result = "xtr.auto.block"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  Heap alloc and free
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once memoryAllocSectionName -> @string {
  result = "heap.memory.alloc"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once memoryFreeSectionName -> @string {
  result = "heap.memory.free"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Static list
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func plmNameForStaticListType ?let @lstring inStaticListName -> @lstring {
  result = .new {!"staticlist." + inStaticListName !inStaticListName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func plmNameForStaticListElementType ?let @lstring inStaticListName -> @lstring {
  result = .new {!"staticlist.element." + inStaticListName !inStaticListName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForStaticListElementType ?let @lstring inStaticListName -> @lstring {
  result = .new{!"static.list.element.type." + [inStaticListName assemblerRepresentation] !inStaticListName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

