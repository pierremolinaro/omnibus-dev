#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmAttributeFunction -> @string outResult {
  outResult = " nounwind "
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticAttribute -> @string outResult {
  outResult = "static"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Modes
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once userModeName -> @string outResult {
  outResult = "user"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Names for invocation graph
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func initNameForInvocationGraph ?let @unifiedTypeMap-proxy inReceiverType ?let @lbigint inPriority -> @lstring outName {
  var s = "init"
  if inReceiverType != .null then
    s += " $" + [inReceiverType key]
  end
  s += " " + inPriority.bigint
  outName = .new {!s !inPriority.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func panicNameForInvocationGraph ?let @string inName ?let @lbigint inPriority -> @lstring outName {
  let s = "panic " + inName + " " + inPriority.bigint
  outName = .new {!s !inPriority.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  Literal Strings
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func literalStringName ?let @uint inIndex -> @string outName {
  outName = "@string." + inIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func literalCharacterArrayName ?let @uint inIndex -> @string outName {
  outName = "@str.array." + inIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticStringTypeName -> @string outName {
  outName = "staticString"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once boolTypeName -> @string outName {
  outName = "bool"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once staticIntegerTypeName -> @string outName {
  outName = "staticInt"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Functions
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once functionResultVariableName -> @string outName {
  outName = "result"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForFunction ?let @string inName -> @string outName {
  outName = ["func." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Interrupt routine
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func interruptNameForInvocationGraph ?let @lstring inName -> @lstring outName {
  let s = "interrupt " + inName
  outName = .new {!s !inName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceInterrupt ?let @lstring inName -> @lstring outName {
  outName = .new {!"isr.service." + inName !inName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionOrSafeInterrupt ?let @string inName -> @string outName {
  outName = "isr.section.or.safe." + inName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   SVC
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSVCCall ?let @lstring inName ?let @routineKind inMode -> @string outName {
  switch inMode
  case primitive :
    outName = llvmNameForPrimitiveCall (!inName.string)
  case service :
    outName = llvmNameForServiceCall (!inName.string)
  case section :
    outName = llvmNameForSectionCall (!inName.string)
  case safe :
    outName = llvmNameForSafeCall (!inName.string)
  case function :
    error inName : "INTERNAL ERROR" : outName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSVCImplementation ?let @lstring inName ?let @routineKind inMode -> @string outName {
  switch inMode
  case primitive :
    outName = llvmNameForPrimitiveImplementation (!inName.string)
  case service :
    outName = llvmNameForServiceImplementation (!inName.string)
  case section :
    outName = llvmNameForSectionImplementation (!inName.string)
  case safe :
    outName = llvmNameForSafeImplementation (!inName.string)
  case function :
    error inName : "INTERNAL ERROR" : outName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Primitives
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForPrimitiveCall ?let @string inName -> @string outName {
  outName = ["primitive.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForPrimitiveImplementation ?let @string inName -> @string outName {
  outName = ["primitive.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Services
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceCall ?let @string inName -> @string outName {
  outName = ["service.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForServiceImplementation ?let @string inName -> @string outName {
  outName = ["service.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Sections
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionCall ?let @string inName -> @string outName {
  outName = ["section.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSectionImplementation ?let @string inName -> @string outName {
  outName = ["section.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Safe
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSafeCall ?let @string inName -> @string outName {
  outName = ["safe.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForSafeImplementation ?let @string inName -> @string outName {
  outName = ["safe.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Guards
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once acceptVariableName -> @string outName {
  outName = "accept"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGuardCall ?let @string inName -> @string outName {
  outName = ["guard.call." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGuardImplementation ?let @string inName -> @string outName {
  outName = ["guard.implementation." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once waitForGuardChangeFunctionName -> @string outName {
  outName = "waitForGuardChange"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  Variable names
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForLocalVariable ?let @string inName -> @string outName {
  outName = ["var." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForGlobalVariable ?let @string inName -> @string outName {
  outName = ["gvar." + inName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   Attributes
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once mutatingAttribute -> @string outResult {
  outResult = "mutating"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once userAccessAttribute -> @string outResult {
  outResult = "userAccess"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once noUnusedWarningAttribute -> @string outResult {
  outResult = "noUnusedWarning"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once globalAttribute -> @string outResult {
  outResult = "global"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once weakAttribute -> @string outResult {
  outResult = "weak"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Tasks
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func stackNameForTask ?let @string inTaskName -> @string outResult {
  outResult = "@" + ["task.stack." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func initNameForTaskType ?let @string inTaskTypeName -> @string outResult {
  outResult = "@" + ["task.init.$" + inTaskTypeName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func stackAddressForTask ?let @string inTaskName -> @string outResult {
  outResult = "%" + ["task.stack.address." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func mainRoutineNameForTask ?let @string inTaskName -> @string outResult {
  outResult = "@" + ["task.main." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForTaskGlobalVar ?let @string inTaskName -> @string outName {
  outName = ["task.globalvar." + inTaskName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForTaskLoopFunction -> @string outName {
  outName = "task$loop"
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once llvmNameForTaskSelfTerminateService -> @string outName {
  outName = "self.terminate"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Static list
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func plmNameForStaticListType ?let @lstring inStaticListName -> @lstring outName {
  outName = .new {!"staticlist." + inStaticListName !inStaticListName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func plmNameForStaticListElementType ?let @lstring inStaticListName -> @lstring outName {
  outName = .new {!"staticlist.element." + inStaticListName !inStaticListName}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForStaticListType ?let @string inStaticListName -> @string outName {
  outName = "%static.list.type." + [inStaticListName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func llvmNameForStaticListElementType ?let @string inStaticListName -> @string outName {
  outName = "%static.list.element.type." + [inStaticListName assemblerRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

