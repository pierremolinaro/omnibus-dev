#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifInstructionAST : @instructionAST {
  public var @expressionAST mTestExpression
  public var @location mTestExpressionEndLocation
  public var @bool mStaticIfExpression
  public var @instructionListAST mThenInstructionList
  public var @location mEndOfThenInstructionList
  public var @instructionListAST mElseInstructionList
  public var @location mEndOfElseInstructionList
  public var @location mEndOf_if_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    <if_instruction> !?ioAST ?let ifInstruction
    ioInstructionList += !ifInstruction
  }
  
  #·····················································································································

  rule <if_instruction> ?!@ast ioAST !@ifInstructionAST outIfInstruction {
    $if$
    let instructionLocation = @location.here
    let @bool staticIfExpression
    select
      $@attribute$ ? let attributeValue
      if attributeValue.string == staticAttribute () then
        staticIfExpression = true
      else
        error attributeValue : "the attribute should be \"@" + staticAttribute () + "\""
        : staticIfExpression
        fixit { replace "@" + staticAttribute () }
      end
    or
     staticIfExpression = false
    end
    <expression> !?ioAST ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    ${$
    <instructionList> !?ioAST ?let thenInstructionList
    $}$
    let endOfThenBranch = @location.here
    let @instructionListAST elseInstructionList
    select
      elseInstructionList = {}
    or
      $else$
      ${$
      <instructionList> !?ioAST ?elseInstructionList
      $}$
    or
      $else$
      <if_instruction> !?ioAST ?let ifInstruction
      elseInstructionList = {!ifInstruction}
    end
    let endOfElseBranch = @location.here
    outIfInstruction = .new {
      !instructionLocation
      !testExpression
      !testExpressionEndLocation
      !staticIfExpression
      !thenInstructionList
      !endOfThenBranch
      !elseInstructionList
      !endOfElseBranch
      !.here
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mThenInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [self.mElseInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [self.mTestExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  [self.mTestExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result: @objectIR testResult
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?testResult
  ]  
#--- Check result is allowed for condition
  [inContext.mImplicitConversionToBooleanMap generateConvertToBooleanCode
    !testResult
    !self.mTestExpressionEndLocation
    !?ioTemporaries
    !?ioInstructionGenerationList
    !?alloca: ioAllocaList
    ?let booleanResult
  ]
#----  
  switch booleanResult 
  case compileTime (*) :
    if not self.mStaticIfExpression then
      warning self.mTestExpressionEndLocation : "'if' expression is static (insert @" + staticAttribute () + " attribute)"
    end
  case llvmVariable (*) :
    if self.mStaticIfExpression then
      error self.mTestExpressionEndLocation : "'if' expression is not static"
    end 
  end
  [!?ioUniversalMap openOverrideForSelectBlock]
#--- Analyze 'then' instruction list
  var @instructionListIR thenInstructionGenerationList = {}
  [self.mThenInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !endOfInstructionList:self.mEndOfThenInstructionList
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:thenInstructionGenerationList
  ]
#--- Analyze 'else' instruction list
  var @instructionListIR elseInstructionGenerationList = {}
  [self.mElseInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !endOfInstructionList:self.mEndOfElseInstructionList
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:elseInstructionGenerationList
  ]
  [!?ioUniversalMap closeOverride !self.mEndOf_if_instruction]
#--- Code generation
  ioInstructionGenerationList += !@ifInstructionIR.new {
    ![booleanResult llvmName]
    !self.mTestExpressionEndLocation
    !thenInstructionGenerationList
    !elseInstructionGenerationList
 }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifInstructionIR : @abstractInstructionIR {
  public var @string mLLVMTestName
  public var @location mLocation
  public var @instructionListIR mThenInstructionGenerationList
  public var @instructionListIR mElseInstructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
#--- Labels
  let labelTrue = "if." + ioGenerationAdds.mUniqueIndex + ".true"
  let labelFalse = "if." + ioGenerationAdds.mUniqueIndex + ".false"
  let labelEnd = "if." + ioGenerationAdds.mUniqueIndex + ".end"
  ioGenerationAdds.mUniqueIndex ++
  ioLLVMcode += "  br i1 " + self.mLLVMTestName + ", label %" + labelTrue + ", label %" + labelFalse + "\n\n"
#--- True branch
  ioLLVMcode += labelTrue + ":\n"
  [self.mThenInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelEnd + "\n\n"
#--- false branch
  ioLLVMcode += labelFalse + ":\n"
  [self.mElseInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelEnd + "\n\n"
#--- end
  ioLLVMcode += labelEnd + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint ioMaxBranchOfOnInstructions
{
  [self.mThenInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
  [self.mElseInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
