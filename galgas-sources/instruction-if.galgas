#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @ifInstructionAST : @instructionAST {
  @expressionAST mTestExpression
  @location mTestExpressionEndLocation
  @instructionListAST mThenInstructionList
  @location mEndOfThenInstructionList
  @instructionListAST mElseInstructionList
  @location mEndOfElseInstructionList
  @location mEndOf_if_instruction
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $if$
    <if_instruction> ?let ifInstruction
    ioInstructionList += !ifInstruction
    $end$
  }
  
  #--------------------------------------------------------------------------------------------------------------------*

  rule <if_instruction> !@ifInstructionAST outIfInstruction {
    <expression> ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    $then$
    <instructionList> ?let thenInstructionList
    let endOfThenBranch = @location.here
    @instructionListAST elseInstructionList
    select
      elseInstructionList = {}
    or
      $else$
      <instructionList> ?elseInstructionList
    or
      $elsif$
      <if_instruction> ?let ifInstruction
      elseInstructionList = {!ifInstruction}
    end
    let endOfElseBranch = @location.here
    outIfInstruction = .new {
      !testExpression
      !testExpressionEndLocation
      !thenInstructionList
      !endOfThenBranch
      !elseInstructionList
      !endOfElseBranch
      !.here
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @ifInstructionAST analyze
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  [mTestExpression analyzeExpression
    !optionalReceiverType:inReceiverType
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:ioInstructionGenerationList
    ?expressionType:let testExpressionType
    ?result:@variableKindIR testResult
  ]
#--- Check inferred type
  if [testExpressionType kind] != .boolean then
    error mTestExpressionEndLocation : "test expression type is '" + [testExpressionType key] + "', it should be boolean"
  end
  [!?ioVariableMap openOverrideForSelectBlock]
#--- Analyze 'then' instruction list
  @instructionListIR thenInstructionGenerationList = {}
  [mThenInstructionList analyzeBranchInstructionList
    !endOfInstructionList:mEndOfThenInstructionList
    !optionalReceiverType:inReceiverType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:thenInstructionGenerationList
  ]
#--- Analyze 'else' instruction list
  @instructionListIR elseInstructionGenerationList = {}
  [mElseInstructionList analyzeBranchInstructionList
    !endOfInstructionList:mEndOfElseInstructionList
    !optionalReceiverType:inReceiverType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:elseInstructionGenerationList
  ]
  [!?ioVariableMap closeOverride !mEndOf_if_instruction]
#--- Code generation
  ioInstructionGenerationList += !@ifInstructionIR.new {
    !testResult
    !thenInstructionGenerationList
    !elseInstructionGenerationList
 }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @ifInstructionIR : @abstractInstructionIR {
  @variableKindIR mTestVariable
  @instructionListIR mThenInstructionGenerationList
  @instructionListIR mElseInstructionGenerationList
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @ifInstructionIR instructionCode -> @string outCode {
  outCode = "if (" + [mTestVariable mangledName] + ") {\n"
  outCode += [mThenInstructionGenerationList instructionListCode]
  if [mElseInstructionGenerationList length] > 0 then
    outCode += "}else{\n"
    outCode += [mElseInstructionGenerationList instructionListCode]
  end
  outCode += "}\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @ifInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTestVariable enterAccessibleEntities !?ioAccessibleEntities]
  [mThenInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
  [mElseInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
