#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @ifInstructionAST : @instructionAST {
  @expressionAST mTestExpression
  @location mTestExpressionEndLocation
  @instructionListAST mThenInstructionList
  @location mEndOfThenInstructionList
  @instructionListAST mElseInstructionList
  @location mEndOfElseInstructionList
  @location mEndOf_if_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap ioLabelMap {
    $if$
    let instructionLocation = @location.here
    @lstring ifLabel
    select
      ifLabel = .new {!"" !.here}
    or
      $@attribute$ ?ifLabel
      [!?ioLabelMap insertKey !ifLabel]
    end
    <if_instruction> ?let ifInstruction !?ioLabelMap !ifLabel
    ioInstructionList += !instructionLocation !ifInstruction
    @lstring endLabel
    select
      endLabel = .new {!"" !.here}
    or
      $@attribute$ ?endLabel
    end
    if ifLabel.string != endLabel.string then
      error endLabel : "'end' label does not match 'if' label, it should be "
         + (if ifLabel.string != "" then "@" + ifLabel.string else "empty" end)
    end 
  }
  
  #·····················································································································

  rule <if_instruction> !@ifInstructionAST outIfInstruction ?!@labelMap ioLabelMap ?let @lstring ifLabel {
    <expression> ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    ${$
    <instructionList> ?let thenInstructionList !?ioLabelMap
    $}$
    let endOfThenBranch = @location.here
    @instructionListAST elseInstructionList
    select
      elseInstructionList = {}
    or
      $else$
      ${$
      @lstring elsifLabel
      select
        elsifLabel = .new {!"" !.here}
      or
        $@attribute$ ?elsifLabel
      end
      if ifLabel.string != elsifLabel.string then
        error elsifLabel : "'else' label does not match 'if' label, it should be "
           + (if ifLabel.string != "" then "@" + ifLabel.string else "empty" end)
      end 
      <instructionList> ?elseInstructionList !?ioLabelMap
      $}$
    or
      $else$
      $if$
      let instructionLocation = @location.here
      @lstring elsifIfLabel
      select
        elsifIfLabel = .new {!"" !.here}
      or
        $@attribute$ ?elsifIfLabel
      end
      if ifLabel.string != elsifIfLabel.string then
        error elsifIfLabel : "'elsif' label does not match 'if' label, it should be "
           + (if ifLabel.string != "" then "@" + ifLabel.string else "empty" end)
      end 
      <if_instruction> ?let ifInstruction !?ioLabelMap !ifLabel
      elseInstructionList = {!instructionLocation !ifInstruction}
    end
    let endOfElseBranch = @location.here
    outIfInstruction = .new {
      !testExpression
      !testExpressionEndLocation
      !thenInstructionList
      !endOfThenBranch
      !elseInstructionList
      !endOfElseBranch
      !.here
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mThenInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [mElseInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [mTestExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  [mTestExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:let @objectIR testResult
  ]
#--- Check inferred type
  if [testResult kind] != .boolean then
    error mTestExpressionEndLocation : "test expression type is '" + [testResult key] + "', it should be boolean"
  end
  if [testResult isStatic] then
    error mTestExpressionEndLocation : "test expression type should not be static"
  end
  [!?ioVariableMap openOverrideForSelectBlock]
#--- Analyze 'then' instruction list
  @instructionListIR thenInstructionGenerationList = {}
  [mThenInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !propertiesAreMutable:inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !endOfInstructionList:mEndOfThenInstructionList
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:thenInstructionGenerationList
  ]
#--- Analyze 'else' instruction list
  @instructionListIR elseInstructionGenerationList = {}
  [mElseInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !propertiesAreMutable:inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !endOfInstructionList:mEndOfElseInstructionList
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:elseInstructionGenerationList
  ]
  [!?ioVariableMap closeOverride !mEndOf_if_instruction]
#--- Code generation
  ioInstructionGenerationList += !@ifInstructionIR.new {
    !testResult
    !mTestExpressionEndLocation
    !thenInstructionGenerationList
    !elseInstructionGenerationList
 }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @ifInstructionIR : @abstractInstructionIR {
  @objectIR mTestVariable
  @location mLocation
  @instructionListIR mThenInstructionGenerationList
  @instructionListIR mElseInstructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let labelTrue = "if." + [mLocation locationIndex] + ".true"
  let labelFalse = "if." + [mLocation locationIndex] + ".false"
  let labelEnd = "if." + [mLocation locationIndex] + ".end"
  ioLLVMcode += "  br i1 " + [mTestVariable llvmName] + ", label %" + labelTrue + ", label %" + labelFalse + "\n\n"
#--- True branch
  ioLLVMcode += labelTrue + ":\n"
  [mThenInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelEnd + "\n\n"
#--- false branch
  ioLLVMcode += labelFalse + ":\n"
  [mElseInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelEnd + "\n\n"
#--- end
  ioLLVMcode += labelEnd + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifInstructionIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mThenInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  [mElseInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
