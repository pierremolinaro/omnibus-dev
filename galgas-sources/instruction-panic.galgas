#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @throwInstructionAST : @instructionAST {
  @location mThrowLocation
  @expressionAST mCodeExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    $panic$
    let loc = @location.here
    <expression> ?let @expressionAST codeExpression
    ioInstructionList += !@throwInstructionAST.new {!loc !codeExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @throwInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mCodeExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @throwInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Panic allowed ?
  if [inModeSet hasKey !panicModeName ()] then
    error mThrowLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
  end
#--- Analyze expression
  @instructionListIR unusedInstructionListIR = {}
  [mCodeExpression analyzeExpression
    !self:inSelfType
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalTargetType:inContext.mPanicCodeType
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:unusedInstructionListIR
    ?result:@operandIR result
  ]
#--- Expression type check
#--- Expression is static ?
  if ([unusedInstructionListIR length] > 0)
     || not [result.mValue isLiteralInteger]
     || ([result.mType key] != staticIntegerTypeName ()) then
    error mThrowLocation : "throw expression should be a literal integer"
  else
    [[inContext.mPanicCodeType kind] integer ?min:let min ?max:let max ?unsigned:* ?bitCount:*]
    [result.mValue literalInteger ?value:let throwValue]
    if (throwValue < min) || (throwValue > max) then
      error mThrowLocation : "panic expression cannot be represented by an `" +[inContext.mPanicCodeType key]
    elsif not [option plm_options.noPanicGeneration value] then
      ioInstructionGenerationList += !@throwInstructionIR.new {
        !mThrowLocation
        !throwValue
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @throwInstructionIR : @abstractInstructionIR {
  @location mThrowLocation
  @bigint mCode
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @throwInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString
    ![[[mThrowLocation file] lastPathComponent] stringByDeletingPathExtension]
    ?let staticStringIndex
  ]
  ioLLVMcode += "  call void @raise_panic." + staticStringIndex + " ("
  ioLLVMcode += inGenerationContext.mPanicLineLLVMType + " " + [mThrowLocation line] + ", "
  ioLLVMcode += inGenerationContext.mPanicCodeLLVMType + " " + mCode + ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @throwInstructionIR enterAccessibleEntities ?!@accessibleEntities unused ioAccessibleEntities {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
