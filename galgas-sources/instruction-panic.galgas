#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @panicInstructionAST : @instructionAST {
  @expressionAST mCodeExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $panic$
    let loc = @location.here
    <expression> ?let @expressionAST codeExpression
    ioInstructionList += !@panicInstructionAST.new {!loc !codeExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mCodeExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool unused inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Panic allowed ?
  if inCurrentMode == .panicMode then
    error mInstructionLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
  end
#--- Analyze expression
  @instructionListIR unusedInstructionListIR = {}
  [mCodeExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:[inContext.mPanicCodeType type]
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:unusedInstructionListIR
    ?result:let @objectIR result
  ]
#--- Expression type check
#--- Expression is static ?
  if ([unusedInstructionListIR length] > 0)
     || not [result isLiteralInteger]
     || ([result plmTypeName] != staticIntegerTypeName ()) then
    error mInstructionLocation : "throw expression should be a literal integer"
  else
    [[inContext.mPanicCodeType type].kind integer ?min:let min ?max:let max ?2*]
    [result literalInteger ?1* ?value:let throwValue]
    if (throwValue < min) || (throwValue > max) then
      error mInstructionLocation : "panic expression cannot be represented by an `" +[inContext.mPanicCodeType key]
    elsif not [option plm_options.noPanicGeneration value] then
      ioInstructionGenerationList += !@panicInstructionIR.new {
        !mInstructionLocation
        !throwValue
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @panicInstructionIR : @abstractInstructionIR {
  @location mThrowLocation
  @bigint mPanicCode
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  [!?ioGenerationAdds.mStaticStringMap findOrAddStaticString
    ![[[mThrowLocation file] lastPathComponent] stringByDeletingPathExtension]
    ?let staticStringIndex
  ]
  ioLLVMcode += "  call void @raise.panic." + staticStringIndex + " ("
  ioLLVMcode += inGenerationContext.mPanicLineLLVMType + " " + [mThrowLocation line] + ", "
  ioLLVMcode += inGenerationContext.mPanicCodeLLVMType + " " + mPanicCode + ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionIR enterAccessibleEntities
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
