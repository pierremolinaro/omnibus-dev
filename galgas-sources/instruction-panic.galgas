#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @panicInstructionAST : @instructionAST {
  @expressionAST mCodeExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $panic$
    let loc = @location.here
    <expression> !?ioAST ?let @expressionAST codeExpression
    ioInstructionList += !@panicInstructionAST.new {!loc !codeExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [self.mCodeExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes unused inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Panic allowed ?
  if inMode == .panicMode then
    error self.mInstructionLocation : "operations that can generate panic are not allowed in " + panicModeName () + " mode"
  end
#--- Analyze expression
  @instructionListIR unusedInstructionListIR = {}
  [self.mCodeExpression analyzeExpression
    !self:inSelfType
    !routineAttributes:.none
    !optionalTargetType:inContext.mPanicCodeType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:unusedInstructionListIR
    ?result:let @objectIR result
  ]
#--- Expression type check
#--- Expression is static ?
  if ([unusedInstructionListIR length] > 0)
     || not [result isLiteralInteger]
     || ([result omnibusTypeDescriptionName] != ctIntegerTypeName ()) then
    error self.mInstructionLocation : "throw expression should be a literal integer"
  else
    [inContext.mPanicCodeType.kind integer ?min:let min ?max:let max ?2*]
    [result literalInteger ?1* ?value:let throwValue]
    if (throwValue < min) || (throwValue > max) then
      error self.mInstructionLocation
      : "panic expression cannot be represented by an `" + inContext.mPanicCodeType.omnibusTypeDescriptionName
    elsif not [option omnibus_options.noPanicGeneration value] then
      ioInstructionGenerationList += !@panicInstructionIR.new {
        !self.mInstructionLocation
        !throwValue
      }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @panicInstructionIR : @abstractInstructionIR {
  @location mThrowLocation
  @bigint mPanicCode
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "  call void @" + [panicRoutineNameForLocationFile (!self.mThrowLocation) assemblerRepresentation] + " ("
  ioLLVMcode += [inGenerationContext.mPanicLineLLVMType llvmTypeName] + " " + [self.mThrowLocation line] + ", "
  ioLLVMcode += [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + self.mPanicCode + ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @panicInstructionIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioInvokedRoutineSet += !panicRoutineNameForLocationFile (!self.mThrowLocation)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
