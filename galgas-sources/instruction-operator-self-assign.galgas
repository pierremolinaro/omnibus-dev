#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @selfVarOperatorAssignInstructionAST : @instructionAST {
  @location mSelfLocation
  @fieldList mFieldList
  @operatorAssignKind mOperator
  @location mOperatorLocation
  @expressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap unused ioLabelMap {
    <self_access> ?let selfLocation ?var fieldList
    <op_assign> ?let @operatorAssignKind operatorAssign
    let operatorLocation = @location.here
    <expression> ?let @expressionAST expression
    ioInstructionList += !@selfVarOperatorAssignInstructionAST.new {
      !selfLocation
      !fieldList
      !operatorAssign
      !operatorLocation
      !expression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarOperatorAssignInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mSourceExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfVarOperatorAssignInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
  analyzeSelfAccess (
    !fieldList:mFieldList
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?resultPtr:let @objectInMemoryIR targetPtr
  )
  let targetType = [targetPtr type]
#--- Analyze source expression
  [mSourceExpression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:targetType
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?alloca:ioAllocaList
    !?instructionListIR:ioInstructionGenerationList
    ?result:@operandIR sourceValue
  ]
#--- Check operator is available for type
  let noPanicGeneration = [option plm_options.noPanicGeneration value]
  let panicMode = [inModeSet hasKey !panicModeName ()]
  @infixOperatorMap operatorMap
  switch mOperator
  case bitWiseAndAssign :
    operatorMap = inContext.mAndOperatorMap
  case bitWiseOrAssign :
    operatorMap = inContext.mOrOperatorMap
  case bitWiseXorAssign :
    operatorMap = inContext.mXorOperatorMap
  case addAssign :
    if panicMode then
      error mOperatorLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mAddNoOvfOperatorMap else inContext.mAddOperatorMap end
  case addModuloAssign :
    operatorMap = inContext.mAddNoOvfOperatorMap
  case subAssign :
    if panicMode then
      error mOperatorLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mSubNoOvfOperatorMap else inContext.mSubOperatorMap end
  case subModuloAssign :
    operatorMap = inContext.mSubNoOvfOperatorMap
  case mulAssign :
    if panicMode then
      error mOperatorLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mMulNoOvfOperatorMap else inContext.mMulOperatorMap end
  case mulModuloAssign :
    operatorMap = inContext.mMulNoOvfOperatorMap
  case divAssign :
    if panicMode then
      error mOperatorLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mDivNoOvfOperatorMap else inContext.mDivOperatorMap end
  case divZeroAssign :
    operatorMap = inContext.mDivNoOvfOperatorMap
  case modAssign :
    if panicMode then
      error mOperatorLocation : "operations that can generate panic are not allowed in `" + panicModeName () + " mode"
    end
    operatorMap = if noPanicGeneration then inContext.mModNoOvfOperatorMap else inContext.mModOperatorMap end
  case modZeroAssign :
    operatorMap = inContext.mModNoOvfOperatorMap
  end
  [operatorMap checkBinaryOperationWith
    !leftType:targetType
    !rightType:sourceValue.mType
    !operatorLocation:mOperatorLocation
    ?resultType:*
    ?op:let @infixOperatorDescription binaryOperator
  ]
#--- Generate code
  [!?ioInstructionGenerationList appendLoadFromMemory !?ioTemporaries !targetPtr ?let targetVariableValue]
  [binaryOperator generateInfixOperatorCode
    !?ioTemporaries
    !?ioInstructionGenerationList
    !targetVariableValue
    !mOperatorLocation
    !sourceValue
    !targetType
    ?let newResultingValue
  ]
  [!?ioInstructionGenerationList appendStoreInMemory !targetPtr !newResultingValue]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
