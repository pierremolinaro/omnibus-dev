#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! ROUTINE MAP
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @routineMapForContext {
  @routineArgumentSignatureMapForContext mInternalRoutineMap
}

#·······················································································································

map @routineArgumentSignatureMapForContext { # argument signature is the key
  @lstring mRoutineLLVMName
  @routineDescriptor mDescriptor

  insert insertKey error message "the '%K' routine signature is already declared in %L"
  search searchKey %location error message "there is no '%K' routine signature"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! INSERT SETTER
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @routineMapForContext insertRoutine
  ?let @string inReceiverTypeName # "" if not self type
  ?let @lstring inRoutineName
  ?let @lstring inArgumentSignature
  ?let @lstring inRoutineLLVMName
  ?let @routineDescriptor inDescriptor
{
  let routineName = @lstring.new {!inReceiverTypeName + "." + inRoutineName.string + inArgumentSignature !inRoutineName.location}
  [!?mInternalRoutineMap insertKey !routineName !inRoutineLLVMName !inDescriptor]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEARCH METHOD
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @routineMapForContext searchKey
  ?let @string inReceiverTypeName # "" if not self type
  ?let @lstring inRoutineName
  ?let @lstring inArgumentSignature
  !@lstring outRoutineLLVMName
  !@routineDescriptor outDescriptor
  !@location outKeyLocation
{
  let routineName = @lstring.new {!inReceiverTypeName + "." + inRoutineName.string + inArgumentSignature !inRoutineName.location}

  [mInternalRoutineMap searchKey !routineName ?outRoutineLLVMName ?outDescriptor ?outKeyLocation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! HASKEY METHOD
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @routineMapForContext hasKey
  ?let @string inReceiverTypeName # "" if not self type
  ?let @lstring inRoutineName
  ?let @lstring inArgumentSignature
  -> @bool
{
  let routineName = @lstring.new {!inReceiverTypeName + "." + inRoutineName.string + inArgumentSignature !inRoutineName.location}
  result = [mInternalRoutineMap hasKey !routineName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
