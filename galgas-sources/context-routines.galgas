#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @routineKind {
  case function
  case section
  case service
  case primitive
}

#·······················································································································

func routineMangledNameFromAST ?let @string inReceiverTypeName
                               ?let @lstring inRoutineName
                               ?let @routineFormalArgumentListAST inFormalArgumentList -> @lstring
{
  var s = "func."
  if inReceiverTypeName != "" then
    s += inReceiverTypeName + "."
  end
  s += inRoutineName.string
  s += "("
  for (formalArgumentPassingMode selector * *) in inFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .init {!s !inRoutineName.location}
}

#·······················································································································

func routineMangledNameFromCall ?let @string inReceiverTypeName
                                ?let @lstring inRoutineName
                                ?let @effectiveArgumentListAST inEffectiveParameterList-> @lstring
{
  var s = "func."
  if inReceiverTypeName != "" then
    s += inReceiverTypeName + "."
  end
  s += inRoutineName.string
  s += "("
  for (passingMode selector) in inEffectiveParameterList do
    s += [passingMode matchingFormalArgument] + selector + ":"
  end
  s += ")"
  result = .init {!s !inRoutineName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
