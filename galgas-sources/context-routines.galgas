#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @routineKind {
  case function (@mode executionMode)
  case section
  case service
  case primitive
}

#·······················································································································

struct @routineDescriptor {
  @bool isPublic %selector # Routine is declared with "public"
  @bool exported %selector # Routine is declared with @exported attribute
  @string name %selector
  @string nameForLLVMGeneration %selector
  @routineKind routineKind %selector
  @routineTypedSignature signature %selector
  @unifiedTypeMap-proxy returnTypeProxy %selector # Nécessaire car le type n'est pas forcément résolu au moment de la construction 
  @bool canAccessProperties %selector # Routine is declared with @access attribute
  @bool canMutateProperties %selector # Routine is declared with @mutating attribute
  @bool safe %selector # Routine is declared with @safe attribute
}

#·······················································································································

func routineMangledNameFromAST ?let @string inReceiverTypeName
                               ?let @lstring inRoutineName
                               ?let @routineFormalArgumentListAST inFormalArgumentList -> @lstring
{
  var s = "func."
  if inReceiverTypeName != "" then
    s += inReceiverTypeName + "."
  end
  s += inRoutineName.string
  s += "("
  for (formalArgumentPassingMode selector formalArgumentTypeName *) in inFormalArgumentList do
    s += [formalArgumentPassingMode formalPassingModeString] + selector + ":"
  end
  s += ")"
  result = .new {!s !inRoutineName.location}
}

#·······················································································································

func routineMangledNameFromCall ?let @string inReceiverTypeName
                                ?let @lstring inRoutineName
                                ?let @effectiveArgumentListAST inEffectiveParameterList-> @lstring
{
  var s = "func."
  if inReceiverTypeName != "" then
    s += inReceiverTypeName + "."
  end
  s += inRoutineName.string
  s += "("
  for (passingMode selector) in inEffectiveParameterList do
    s += [passingMode matchingFormalArgument] + selector + ":"
  end
  s += ")"
  result = .new {!s !inRoutineName.location}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
