#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @accessInAssignmentAST {
  case property (@lstring name)
  case arrayAccess (@expressionAST index @location endOfIndex)
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @accessInAssignmentListAST {
  @accessInAssignmentAST mAccess
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @LValueWithoutSelfAST {
  @lstring mIdentifier
  @accessInAssignmentListAST mAccessList
}

#·······················································································································

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <lvalue_without_self> !@LValueWithoutSelfAST outAssignmentTargetAST {
  #--- Object
    $identifier$ ?let @lstring identifier
  #--- Properties and subscript
    @accessInAssignmentListAST accessList = {}
    repeat
    while
      $.$
      $identifier$ ?let propertyName
      accessList += !.property {!name:propertyName}
    while
      $[$
      <expression> ?let expression
      let endOfIndex = @location.here
      $]$
      accessList += !.arrayAccess {!index:expression !endOfIndex:endOfIndex}
    end
    outAssignmentTargetAST = .new {!identifier !accessList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @LValueWithoutSelfAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (access) in mAccessList do
    switch access
    case property (*) :
    case arrayAccess (@expressionAST indexExpression *) :
      [indexExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @targetAccessKind {
  case read
  case write
  case readWrite
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @LValueWithoutSelfAST type
  ?variableMap:let @universalPropertyAndRoutineMapForContext inUniversalMap
  !@PLMType outType
{
  [inUniversalMap searchValuedObjectType !mIdentifier ?outType]
  for (access) in mAccessList do
    switch access
    case property (@lstring propertyName) :
      if [outType isStructure] then
        [outType structure ?1* ?propertyMap:let propertyMap ?4*]
        [propertyMap searchKey !propertyName ?* ?let propertyObject]
        outType = [propertyObject type]
      else
        error propertyName : "receiver has no property" : outType
      end
    case arrayAccess (* *) :
      if [outType isArrayType] then
        [outType arrayType ?1* ?elementType:outType ?4*]
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @LValueWithoutSelfAST analyzeLValueNoSelf
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool unused inRoutineCanMutateProperties
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalPropertyAndRoutineMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !@internalRepresentation outInternalRepresentation
{
#--- object access, with ou without self
  outInternalRepresentation = .standAloneIdentifier {!identifier:mIdentifier}
  for (access) in mAccessList do
    switch access
    case property (@lstring propertyName) :
      handlePropertyAccessInExpression (
        !?outInternalRepresentation
        !propertyName
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:.void
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
      )
    case arrayAccess (@expressionAST indexExpression @location endOfIndex) :
      handleArrayAccessInExpression (
        !?outInternalRepresentation
        !indexExpression
        !endOfIndex
        !self:inSelfType
        !inGuard:false
        !routineNameForInvocationGraph:inCallerNameForInvocationGraph
        !optionalTargetType:.void
        !context:inContext
        !mode:inCurrentMode
        !?temporary:ioTemporaries
        !?staticStringMap:ioGlobalLiteralStringMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:ioInstructionGenerationList
      )
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
