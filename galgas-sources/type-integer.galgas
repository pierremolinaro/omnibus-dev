#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @integerDeclaration : @abstractDeclaration {
  @lstring mIntegerTypeName
  @lstring mBaseType
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @integerDeclaration location -> @location outLocation {
  outLocation = mIntegerTypeName.location
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension plm_target_specific_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $newIntegerType$
    $typeName$ ?let newIntegerTypeName
    $:$
    $attribute$ ?let @lstring baseType
    ioAST.mDeclarationList += !@integerDeclaration.new {
      !newIntegerTypeName
      !baseType
    }
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mIntegerTypeName !self]
  [!?ioGraph addEdge !mIntegerTypeName !.new {!"basetype " + mBaseType !mBaseType.location}]
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @integerDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "integer " + mIntegerTypeName 
}

#----------------------------------------------------------------------------------------------------------------------*
#  ENTER IN CONTEXT                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
{
#-- Search for base type
  [ioContext.mTargetBaseTypeMap searchKey !mBaseType ?* ?let size ?let isSigned]
#--- Get min and max
  @bigint min
  @bigint max
  if isSigned then
    min = - (1G << (size -1))
    max = (1G << (size -1)) - 1G
  else # Unsigned
    min = 0G
    max = (1G << size) - 1G
  end
 #---
  [!?ioContext.mTypeMap insertKey
    !lkey:mIntegerTypeName
    !kind:.integer {!min:min !max:max !unsigned:not isSigned !bitCount:size}
    !constructorMap:{}
    !procedureMap:{}
    !copiable:true
    !equatable:true
    !comparable:true
  ]
#--- Enter integer operators
  enterIntegerOperators (
    !integerTypeName:mIntegerTypeName
    !signed:isSigned
    !?context:ioContext
  )
}

#----------------------------------------------------------------------------------------------------------------------*

proc enterIntegerOperators
  ?integerTypeName:let @lstring inIntegerTypeName
  ?signed:let @bool inIsSigned
  ?!context:@semanticContext ioContext
{
#--- ++ and -- operators
  [!?ioContext.mIncNoOVFOperatorMap insertKey !inIntegerTypeName !.addNoOVF]
  [!?ioContext.mDecNoOVFOperatorMap insertKey !inIntegerTypeName !.subNoOVF]
  [!?ioContext.mIncOVFOperatorMap insertKey !inIntegerTypeName !if inIsSigned then .saddOVF else .uaddOVF end]
  [!?ioContext.mDecOVFOperatorMap insertKey !inIntegerTypeName !if inIsSigned then .ssubOVF else .usubOVF end]
#--- Infix operators
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !inIntegerTypeName ?let selfTypeProxy]
#--- Comparison infix operator
  [!?ioContext.mEqualOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !ioContext.mBooleanType
    !.icmp_eq
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !ioContext.mBooleanType
    !.icmp_ne
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !ioContext.mBooleanType
    !if inIsSigned then .icmp_slt else .icmp_ult end
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !ioContext.mBooleanType
    !if inIsSigned then .icmp_sle else .icmp_ule end
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !ioContext.mBooleanType
    !if inIsSigned then .icmp_sgt else .icmp_ugt end
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !ioContext.mBooleanType
    !if inIsSigned then .icmp_sge else .icmp_uge end
  ]
#--- Bit Wise operators (for unsigned integers)
  if not inIsSigned then
    [!?ioContext.mAndOperatorMap insertKey
      !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
      !selfTypeProxy
      !.and
    ]
    [!?ioContext.mOrOperatorMap insertKey
      !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
      !selfTypeProxy
      !.ior
    ]
    [!?ioContext.mXorOperatorMap insertKey
      !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
      !selfTypeProxy
      !.xor
    ]
    [!?ioContext.mUnsignedComplementOperatorMap insertKey
      !inIntegerTypeName
      !selfTypeProxy
    ]
  end
#--- Negate operator (for signed integers)
  if inIsSigned then
    [!?ioContext.mUnaryMinusOperatorMap insertKey
      !inIntegerTypeName
      !selfTypeProxy
    ]
  end
#--- Arithmetic operators
  [!?ioContext.mAddOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !if inIsSigned then .uaddOVF else .saddOVF end
  ]
  [!?ioContext.mAddNoOvfOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !.addNoOVF
  ]
  [!?ioContext.mSubOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !if inIsSigned then .ssubOVF else .usubOVF end
  ]
  [!?ioContext.mSubNoOvfOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !.subNoOVF
  ]
  [!?ioContext.mMulOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !.mulOVF
  ]
  [!?ioContext.mMulNoOvfOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !.mulNoOVF
  ]
  [!?ioContext.mDivOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !if inIsSigned then .sdivOVF else .udivOVF end
  ]
  [!?ioContext.mDivNoOvfOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !if inIsSigned then .sdivNoOVF else .udivNoOVF end
  ]
  [!?ioContext.mModOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !if inIsSigned then .sremOVF else .uremOVF end
  ]
#--- Shift operators
  [!?ioContext.mLeftShiftOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !.shl
  ]
  [!?ioContext.mRightShiftOperatorMap insertKey
    !.new {!inIntegerTypeName.string + "." + inIntegerTypeName !inIntegerTypeName.location}
    !selfTypeProxy
    !if inIsSigned then .ashr else .lshr end
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration initAnalysis ?!context:@semanticContext unused ioContext { }

#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration semanticAnalysis
  ?context:let @semanticContext inContext
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#-- Search for base type
  [inContext.mTargetBaseTypeMap searchKey !mBaseType ?let cType ?* ?*]
#---
  [!?ioIntermediateCodeStruct.mTypeMapIR insertKey
    !mIntegerTypeName
    !@integerIR.new { !mIntegerTypeName.string !cType}
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @integerIR : @abstractTypeIR {
  @string mIntegerTypeName
  @string mActualTypeName
}

#----------------------------------------------------------------------------------------------------------------------*

private filewrapper integerGenerationTemplate in "../generation-templates" {
}{
}{
  template declaration "integer-declaration.galgasTemplate"
    ?@string INTEGER_TYPE_NAME
    ?@string ACTUAL_TYPE_NAME
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @integerIR headerCodeGenerationForType -> @string outCode {
  outCode = [filewrapper integerGenerationTemplate.declaration
    !mIntegerTypeName
    !mActualTypeName
  ]
}

#----------------------------------------------------------------------------------------------------------------------*



