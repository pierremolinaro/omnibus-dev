#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @integerDeclaration : @abstractDeclaration {
  @bool mIsSigned
  @uint mSize
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @integerDeclaration location -> @location outLocation {
  outLocation = .nowhere
}

#----------------------------------------------------------------------------------------------------------------------*

getter @integerDeclaration typeName -> @string outName {
  outName = if mIsSigned then "int" else "uint" end + mSize
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension plm_target_specific_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $signedIntegerType$
    $integer$ ?let @lbigint lowerBound
    $->$
    $integer$ ?let @lbigint upperBound
    if lowerBound.bigint > upperBound.bigint then
      error upperBound : "upper bound is lower than lower bound"
    elsif upperBound.bigint > 1024G then
      error upperBound : "upper bound is too large (should be <= 1024)"
    else
      for i in [lowerBound.bigint uint] ... [upperBound.bigint uint] do
        ioAST.mDeclarationList += !@integerDeclaration.new {!true !i}
      end
    end
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <declaration> ?!@ast ioAST {
    $unsignedIntegerType$
    $integer$ ?let @lbigint lowerBound
    $->$
    $integer$ ?let @lbigint upperBound
    if lowerBound.bigint > upperBound.bigint then
      error upperBound : "upper bound is lower than lower bound"
    elsif upperBound.bigint > 1024G then
      error upperBound : "upper bound is too large (should be <= 1024)"
    else
      for i in [lowerBound.bigint uint] ... [upperBound.bigint uint] do
        ioAST.mDeclarationList += !@integerDeclaration.new {!false !i}
      end
    end
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let integerTypeName = [[self typeName] nowhere]
  [!?ioGraph addNode !integerTypeName !self]
  [!?ioGraph addEdge !integerTypeName ![boolTypeName () nowhere]]
  [!?ioGraph addEdge !integerTypeName ![literalIntegerTypeName () nowhere]]
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @integerDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "integer " + [self typeName] 
}

#----------------------------------------------------------------------------------------------------------------------*
#  ENTER IN CONTEXT                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@globalLiteralStringMap unused ioGlobalLiteralStringMap
{
  let integerTypeName = [[self typeName] nowhere]
#--- Get min and max
  @bigint min
  @bigint max
  if mIsSigned then
    min = - (1G << (mSize - 1))
    max = (1G << (mSize - 1)) - 1G
  else # Unsigned
    min = 0G
    max = (1G << mSize) - 1G
  end
 #---
  [!?ioContext.mTypeMap insertKey
    !lkey:integerTypeName
    !kind:.integer {!min:min !max:max !unsigned:not mIsSigned !bitCount:mSize}
    !constructorMap:{}
    !procedureMap:{}
    !copiable:true
    !equatable:true
    !comparable:true
  ]
#--- Enter integer <-> integer infix operators
  enter_integer_integer_operators (
    !integerTypeName:integerTypeName
    !signed:mIsSigned
    !?context:ioContext
  )
#--- Enter integer <-> literal infix operators
  enter_integer_literal_operators (
    !integerTypeName:integerTypeName
    !signed:mIsSigned
    !?context:ioContext
  )
#--- Enter literal <-> integer infix operators
  enter_literal_integer_operators (
    !integerTypeName:integerTypeName
    !signed:mIsSigned
    !?context:ioContext
  )
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration initAnalysis ?!context:@semanticContext unused ioContext {
}

#----------------------------------------------------------------------------------------------------------------------*

override method @integerDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#----------------------------------------------------------------------------------------------------------------------*
#  INFIX OPERATION BETWEEN INTEGERS                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*
#! literal object <-> literal object
#----------------------------------------------------------------------------------------------------------------------*

private proc enter_integer_integer_operators
  ?integerTypeName:let @lstring inIntegerTypeName
  ?signed:let @bool inIsSigned
  ?!context:@semanticContext ioContext
{
#--- ++ and -- operators
  [!?ioContext.mIncOperatorMap insertKey !inIntegerTypeName !if inIsSigned then .saddOVF else .uaddOVF end !.addNoOVF]
  [!?ioContext.mDecOperatorMap insertKey !inIntegerTypeName !if inIsSigned then .ssubOVF else .usubOVF end !.subNoOVF]
#--- Infix operators
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !inIntegerTypeName ?let selfTypeProxy]
#--- Comparison infix operator
  let intIntOp = combineTypeNamesForInfixOperator (!inIntegerTypeName.string !inIntegerTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !intIntOp
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !intIntOp
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !intIntOp
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .icmp_slt else .icmp_ult end}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !intIntOp
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .icmp_sle else .icmp_ule end}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !intIntOp
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .icmp_sgt else .icmp_ugt end}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !intIntOp
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .icmp_sge else .icmp_uge end}
  ]
#--- Bit Wise operators (for unsigned integers)
  if not inIsSigned then
    [!?ioContext.mAndOperatorMap insertKey
      !intIntOp
      !selfTypeProxy
      !@infixObjectObjectOperatorDescription.new {!.and}
    ]
    [!?ioContext.mOrOperatorMap insertKey
      !intIntOp
      !selfTypeProxy
      !@infixObjectObjectOperatorDescription.new {!.ior}
    ]
    [!?ioContext.mXorOperatorMap insertKey
      !intIntOp
      !selfTypeProxy
      !@infixObjectObjectOperatorDescription.new {!.xor}
    ]
    [!?ioContext.mUnsignedComplementOperatorMap insertKey
      !inIntegerTypeName
      !selfTypeProxy
    ]
  end
#--- Negate operator (for signed integers)
  if inIsSigned then
    [!?ioContext.mUnaryMinusOperatorMap insertKey
      !inIntegerTypeName
      !selfTypeProxy
    ]
  end
#--- Arithmetic operators
  [!?ioContext.mAddOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .saddOVF else .uaddOVF end}
  ]
  [!?ioContext.mAddNoOvfOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.addNoOVF}
  ]
  [!?ioContext.mSubOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .ssubOVF else .usubOVF end}
  ]
  [!?ioContext.mSubNoOvfOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.subNoOVF}
  ]
  [!?ioContext.mMulOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .smulOVF else .umulOVF end}
  ]
  [!?ioContext.mMulNoOvfOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.mulNoOVF}
  ]
  [!?ioContext.mDivOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .sdivOVF else .udivOVF end}
  ]
  [!?ioContext.mDivNoOvfOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .sdivNoOVF else .udivNoOVF end}
  ]
  [!?ioContext.mModOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .sremOVF else .uremOVF end}
  ]
  [!?ioContext.mModNoOvfOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .sremNoOVF else .uremNoOVF end}
  ]
#--- Shift operators
  [!?ioContext.mLeftShiftOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!.shl}
  ]
  [!?ioContext.mRightShiftOperatorMap insertKey
    !intIntOp
    !selfTypeProxy
    !@infixObjectObjectOperatorDescription.new {!if inIsSigned then .ashr else .lshr end}
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

class @infixObjectObjectOperatorDescription : @infixOperatorDescription {
  @llvmBinaryOperation mOperator
}

#----------------------------------------------------------------------------------------------------------------------*

override method @infixObjectObjectOperatorDescription generateCode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  ?let @operandIR inLeftOperand
  ?let @unifiedTypeMap-proxy inLeftType
  ?let @operandIR inRightOperand
  ?let @unifiedTypeMap-proxy unused inRightType
  ?let @location inOperatorLocation
  !@operandIR outResultValue
{
  getNewTempVariable (!?ioTemporaries ?outResultValue)
#--- Generate code
  [!?ioInstructionGenerationList appendBinaryOperation
    !outResultValue
    !inLeftType
    !inLeftOperand
    !mOperator
    !inRightOperand
    !inOperatorLocation
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#  INFIX OPERATION BETWEEN AN INTEGER AND A LITERAL INTEGER                                                            *
#----------------------------------------------------------------------------------------------------------------------*
#! literal object <-> literal integer
#----------------------------------------------------------------------------------------------------------------------*

private proc enter_integer_literal_operators
  ?integerTypeName:let @lstring inIntegerTypeName
  ?signed:let @bool inIsSigned
  ?!context:@semanticContext ioContext
{
#--- Infix operators
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !inIntegerTypeName ?let selfTypeProxy]
#--- Comparison infix operator
  let intLiteralOp = combineTypeNamesForInfixOperator (!inIntegerTypeName.string !literalIntegerTypeName ())
  [!?ioContext.mEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@integerObject_literal_infixOperator.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@integerObject_literal_infixOperator.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .icmp_slt else .icmp_ult end}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .icmp_sle else .icmp_ule end}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .icmp_sgt else .icmp_ugt end}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .icmp_sge else .icmp_uge end}
  ]
#--- Bit Wise operators (for unsigned integers)
  if not inIsSigned then
    [!?ioContext.mAndOperatorMap insertKey
      !intLiteralOp
      !selfTypeProxy
      !@integerObject_literal_infixOperator.new {!.and}
    ]
    [!?ioContext.mOrOperatorMap insertKey
      !intLiteralOp
      !selfTypeProxy
      !@integerObject_literal_infixOperator.new {!.ior}
    ]
    [!?ioContext.mXorOperatorMap insertKey
      !intLiteralOp
      !selfTypeProxy
      !@integerObject_literal_infixOperator.new {!.xor}
    ]
  end
#--- Arithmetic operators
  [!?ioContext.mAddOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .saddOVF else .uaddOVF end}
  ]
  [!?ioContext.mAddNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!.addNoOVF}
  ]
  [!?ioContext.mSubOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .ssubOVF else .usubOVF end}
  ]
  [!?ioContext.mSubNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!.subNoOVF}
  ]
  [!?ioContext.mMulOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .smulOVF else .umulOVF end}
  ]
  [!?ioContext.mMulNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!.mulNoOVF}
  ]
  [!?ioContext.mDivOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .sdivOVF else .udivOVF end}
  ]
  [!?ioContext.mDivNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .sdivNoOVF else .udivNoOVF end}
  ]
  [!?ioContext.mModOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .sremOVF else .uremOVF end}
  ]
  [!?ioContext.mModNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .sremNoOVF else .uremNoOVF end}
  ]
#--- Shift operators
  [!?ioContext.mLeftShiftOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!.shl}
  ]
  [!?ioContext.mRightShiftOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@integerObject_literal_infixOperator.new {!if inIsSigned then .ashr else .lshr end}
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

class @integerObject_literal_infixOperator : @infixOperatorDescription {
  @llvmBinaryOperation mOperator
}

#----------------------------------------------------------------------------------------------------------------------*

override method @integerObject_literal_infixOperator generateCode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  ?let @operandIR inLeftOperand
  ?let @unifiedTypeMap-proxy inLeftType
  ?let @operandIR inRightOperand
  ?let @unifiedTypeMap-proxy unused inRightType
  ?let @location inOperatorLocation
  !@operandIR outResultValue
{
#--- Check right literal integer can be extented to left integer type
  [inRightOperand literalInteger ?value:let @bigint literalValue]
  [[inLeftType kind] integer ?min:let @bigint min ?max:let @bigint max ?unsigned:* ?bitCount:*]
  if literalValue < min then
    error inOperatorLocation : "literal right integer expression too small (should be >= " + min + ")" : outResultValue
  elsif literalValue > max then
    error inOperatorLocation : "literal right integer expression too large (should be <= " + max + ")" : outResultValue
  else
    getNewTempVariable (!?ioTemporaries ?outResultValue)
    #--- Generate code
      [!?ioInstructionGenerationList appendBinaryOperation
        !outResultValue
        !inLeftType
        !inLeftOperand
        !mOperator
        !inRightOperand
        !inOperatorLocation
      ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  INFIX OPERATION BETWEEN A LITERAL INTEGER AND AN INTEGER                                                            *
#----------------------------------------------------------------------------------------------------------------------*
#! literal integer <-> literal object
#----------------------------------------------------------------------------------------------------------------------*

private proc enter_literal_integer_operators
  ?integerTypeName:let @lstring inIntegerTypeName
  ?signed:let @bool inIsSigned
  ?!context:@semanticContext ioContext
{
#--- Infix operators
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !inIntegerTypeName ?let selfTypeProxy]
#--- Comparison infix operator
  let intLiteralOp = combineTypeNamesForInfixOperator (!literalIntegerTypeName () !inIntegerTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@literal_integerObject_infixOperator.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@literal_integerObject_infixOperator.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .icmp_slt else .icmp_ult end}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .icmp_sle else .icmp_ule end}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .icmp_sgt else .icmp_ugt end}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !intLiteralOp
    !ioContext.mBooleanType
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .icmp_sge else .icmp_uge end}
  ]
#--- Bit Wise operators (for unsigned integers)
  if not inIsSigned then
    [!?ioContext.mAndOperatorMap insertKey
      !intLiteralOp
      !selfTypeProxy
      !@literal_integerObject_infixOperator.new {!.and}
    ]
    [!?ioContext.mOrOperatorMap insertKey
      !intLiteralOp
      !selfTypeProxy
      !@literal_integerObject_infixOperator.new {!.ior}
    ]
    [!?ioContext.mXorOperatorMap insertKey
      !intLiteralOp
      !selfTypeProxy
      !@literal_integerObject_infixOperator.new {!.xor}
    ]
  end
#--- Arithmetic operators
  [!?ioContext.mAddOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .saddOVF else .uaddOVF end}
  ]
  [!?ioContext.mAddNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!.addNoOVF}
  ]
  [!?ioContext.mSubOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .ssubOVF else .usubOVF end}
  ]
  [!?ioContext.mSubNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!.subNoOVF}
  ]
  [!?ioContext.mMulOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .smulOVF else .umulOVF end}
  ]
  [!?ioContext.mMulNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!.mulNoOVF}
  ]
  [!?ioContext.mDivOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .sdivOVF else .udivOVF end}
  ]
  [!?ioContext.mDivNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .sdivNoOVF else .udivNoOVF end}
  ]
  [!?ioContext.mModOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .sremOVF else .uremOVF end}
  ]
  [!?ioContext.mModNoOvfOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .sremNoOVF else .uremNoOVF end}
  ]
#--- Shift operators
  [!?ioContext.mLeftShiftOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!.shl}
  ]
  [!?ioContext.mRightShiftOperatorMap insertKey
    !intLiteralOp
    !selfTypeProxy
    !@literal_integerObject_infixOperator.new {!if inIsSigned then .ashr else .lshr end}
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

class @literal_integerObject_infixOperator : @infixOperatorDescription {
  @llvmBinaryOperation mOperator
}

#----------------------------------------------------------------------------------------------------------------------*

override method @literal_integerObject_infixOperator generateCode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  ?let @operandIR inLeftOperand
  ?let @unifiedTypeMap-proxy inLeftType
  ?let @operandIR inRightOperand
  ?let @unifiedTypeMap-proxy inRightType
  ?let @location inOperatorLocation
  !@operandIR outResultValue
{
#--- Check left literal integer can be extented to right integer type
  [inLeftOperand literalInteger ?value:let @bigint literalValue]
  [[inRightType kind] integer ?min:let @bigint min ?max:let @bigint max ?unsigned:* ?bitCount:*]
  if literalValue < min then
    error inOperatorLocation : "literal left integer expression too small (should be >= " + min + ")" : outResultValue
  elsif literalValue > max then
    error inOperatorLocation : "literal left integer expression too large (should be <= " + max + ")" : outResultValue
  else
    getNewTempVariable (!?ioTemporaries ?outResultValue)
    #--- Generate code
      [!?ioInstructionGenerationList appendBinaryOperation
        !outResultValue
        !inLeftType
        !inLeftOperand
        !mOperator
        !inRightOperand
        !inOperatorLocation
      ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
