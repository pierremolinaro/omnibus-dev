#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @integerDeclarationAST : @abstractDeclarationAST {
  public var @bool mIsSigned
  public var @uint mSize
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @integerDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = .nowhere
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @integerDeclarationAST typeName -> @string outName {
  outName = if self.mIsSigned then "i" else "u" end + self.mSize
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @integerDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = [[self typeName] nowhere]
  [!?ioGraph addNode !nodeName !self]
  [!?ioGraph addEdge !nodeName ![ctIntegerTypeName () nowhere]]
  [!?ioGraph addEdge !nodeName ![boolTypeName () nowhere]]
  [!?ioGraph addEdge !nodeName ![ctBoolTypeName () nowhere]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @integerDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "integer " + [self typeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  UTILITIES                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func minValueForInteger ?let @bool inIsUnsigned ?let @uint inBitCount -> @bigint {
  if inIsUnsigned then
    result = 0
  else # Signed
    result = - (1 << (inBitCount - 1))
  end
}

#·······················································································································

func maxValueForInteger ?let @bool inIsUnsigned ?let @uint inBitCount -> @bigint {
  if inIsUnsigned then
    result = (1 << inBitCount) - 1
  else # Signed
    result = (1 << (inBitCount - 1)) - 1
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @integerDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  let integerTypeName = [[self typeName] nowhere]
  [!?ioContext.mTypeMap makeEntry !integerTypeName ?let selfTypeProxy]
#--------------------------------------- Get min and max
  let min = minValueForInteger (!not self.mIsSigned !self.mSize)
  let max = maxValueForInteger (!not self.mIsSigned !self.mSize)
#--------------------------------------- Property map
  let llvmTypeName = "i" + self.mSize
#--------------------------------------- byteSwapped
  if (self.mSize mod 16) == 0 then
    [!?ioContext addComputedPropertyGetter
      !omnibusTypeName: integerTypeName
      !llvmBaseTypeName:integerTypeName
      !propertyName:["byteSwapped" nowhere]
      !mode:.anySafeMode
      !visibility: .isPublic
      !resultTypeProxy:selfTypeProxy
      ?routineLLVMName: let routineLLVMName
    ]
    ioRoutineListIR += !@integerBuiltinFunctionIR.init {
      !routineLLVMName
      !isRequired:false
      !warnsIfUnused:false
      !llvmTypeName
      !"bswap"
    }
  end
#--------------------------------------- bool for UInt1
#  if mSize == 1 && not mIsSigned then # Add "bool" intrinsic function
#    [!?propertyGetterMap addPropertyGetter
#      !llvmBaseTypeName:integerTypeName
#      !propertyName:[boolTypeName () nowhere]
#      !mode:.anySafeMode
#      !public: true
#      !resultTypeProxy:boolTypeProxy
#      ?routineLLVMName: let routineLLVMName
#    ]
#    ioRoutineListIR += !@$iXXToBoolFunctionIR.new {
#      !routineLLVMName
#      !isRequired:false
#      !warnsIfUnused:false
#      !llvmTypeName
#    }
#  end
#--------------------------------------- bitreverse
  [!?ioContext addComputedPropertyGetter
    !omnibusTypeName: integerTypeName
    !llvmBaseTypeName:integerTypeName
    !propertyName:["bitReversed" nowhere]
    !mode:.anySafeMode
    !visibility: .isPublic
    !resultTypeProxy:selfTypeProxy
    ?routineLLVMName: var routineLLVMName
  ]
  ioRoutineListIR += !@integerBuiltinFunctionIR.init {
    !routineLLVMName
    !isRequired:false
    !warnsIfUnused:false
    !llvmTypeName
    !"bitreverse"
  }
#--------------------------------------- leadingZeroCount
  [!?ioContext addComputedPropertyGetter
    !omnibusTypeName: integerTypeName
    !llvmBaseTypeName:integerTypeName
    !propertyName:["leadingZeroCount" nowhere]
    !mode:.anySafeMode
    !visibility: .isPublic
    !resultTypeProxy:selfTypeProxy
    ?routineLLVMName: routineLLVMName
  ]
  ioRoutineListIR += !@integerBuiltinFunctionIR.init {
    !routineLLVMName
    !isRequired:false
    !warnsIfUnused:false
    !llvmTypeName
    !"ctlz"
  }
#--------------------------------------- trainingZeroCount
  [!?ioContext addComputedPropertyGetter
    !omnibusTypeName: integerTypeName
    !llvmBaseTypeName:integerTypeName
    !propertyName:["trainingZeroCount" nowhere]
    !mode:.anySafeMode
    !visibility: .isPublic
    !resultTypeProxy:selfTypeProxy
    ?routineLLVMName: routineLLVMName
  ]
  ioRoutineListIR += !@integerBuiltinFunctionIR.init {
    !routineLLVMName
    !isRequired:false
    !warnsIfUnused:false
    !llvmTypeName
    !"cttz"
  }
#--------------------------------------- setBitCountMethodName
  [!?ioContext addComputedPropertyGetter
    !omnibusTypeName: integerTypeName
    !llvmBaseTypeName: integerTypeName
    !propertyName:["setBitCount" nowhere]
    !mode:.anySafeMode
    !visibility: .isPublic
    !resultTypeProxy:selfTypeProxy
    ?routineLLVMName: routineLLVMName
  ]
  ioRoutineListIR += !@integerBuiltinFunctionIR.init {
    !routineLLVMName
    !isRequired:false
    !warnsIfUnused:false
    !llvmTypeName
    !"ctpop"
  }
#--------------------------------------- Class constant map
  var @constantMap constantMap = §[]
  [!?constantMap insertKey !["min" nowhere] !min !integerTypeName]
  [!?constantMap insertKey !["max" nowhere] !max !integerTypeName]
  [!?ioContext.mTypeConstantMap insertKey
    !integerTypeName
    !constantMap
  ]
#--------------------------------------- Constructor map
  var @constructorMap constructorMap = §[] 
  [!?constructorMap insertKey !["()" nowhere] !§[] !.simple {!value:0}]
  [!?ioContext.mTypeConstructorMap insertKey !integerTypeName !constructorMap]
#--------------------------------------- Enter in type map
  let integerType = @omnibusType.init {
    !subscript:.noSubscript
    !attributes:.instanciable | .copyable
    !omnibusTypeDescriptionName:integerTypeName
    !kind:.integer {!min:min !max:max !unsigned:not self.mIsSigned !bitCount:self.mSize}
    !llvmBaseTypeName: integerTypeName
  }
  [!?ioContext.mTypeMap insertType !integerTypeName !type:integerType]
#--------------------------------------- Enter integer <-> integer operators
#  enter_integer_integer_operators (
#    !integerTypeName:integerTypeName
#    !signed:mIsSigned
#    !?context:ioContext
#  )
#--------------------------------------- Enter integer <-> literal operators
#  enter_integer_literal_operators (
#    !integerTypeName:integerTypeName
#    !signed:mIsSigned
#    !?context:ioContext
#  )
#--------------------------------------- Enter literal <-> integer operators
#  enter_literal_integer_operators (
#    !integerTypeName:integerTypeName
#    !signed:mIsSigned
#    !?context:ioContext
#  )
#--------------------------------------- Assignment
  var key = assignmentOperatorKey (!integerType !.nowhere !integerType)
  [!?ioContext.mAssignmentOperatorMap insertKey !key !@simpleCopyAssignmentOperatorUsage.init]
  key = assignmentOperatorKey (!integerType !.nowhere !compileTimeIntegerType ())
  [!?ioContext.mAssignmentOperatorMap insertKey !key !@simpleCopyAssignmentOperatorUsage.init]
#--- Copy from reference is used by dynamic arraies  
  let functionName = assignmentOperatorFuncName (!integerType !integerType)
  ioRoutineListIR += !@simpleAssignmentCopyRoutineIR.init {
    ![functionName nowhere]
    !isRequired: false
    !warnsIfUnused: false
    !integerType
  }
#--------------------------------------- Infix operator between integers
  let boolType = boolType ()
#--- Enter == infix operator
  addIntegerInfixOperator (!.equal !integerType !"icmp eq" !?ioContext.mInfixOperatorMap !boolType)
#--- Enter ≤ infix operator
  addIntegerInfixOperator (
    !.infEqual
    !integerType
    !if self.mIsSigned then "icmp sle" else "icmp ule" end
    !?ioContext.mInfixOperatorMap
    !boolType
  )
#--- Enter < infix operator
  addIntegerInfixOperator (
    !.lessThan
    !integerType
    !if self.mIsSigned then "icmp slt" else "icmp ult" end
    !?ioContext.mInfixOperatorMap
    !boolType
  )
#--- Enter << infix operator
  addIntegerInfixOperator (!.leftShiftOp !integerType !"shl" !?ioContext.mInfixOperatorMap !integerType)
#--- Enter >> infix operator
  addIntegerInfixOperator (
    !.rightShiftOp
    !integerType
    !if self.mIsSigned then "ashr" else "lshr" end
    !?ioContext.mInfixOperatorMap
    !integerType
  )
#--- Enter | infix operator
  addIntegerInfixOperator (!.bitWiseOrOp !integerType !"or" !?ioContext.mInfixOperatorMap !integerType)
#--- Enter & infix operator
  addIntegerInfixOperator (!.bitWiseAndOp !integerType !"and" !?ioContext.mInfixOperatorMap !integerType)
#--- Enter ^ infix operator
  addIntegerInfixOperator (!.bitWiseXorOp !integerType !"xor" !?ioContext.mInfixOperatorMap !integerType)
#--- Enter +% infix operator
  addIntegerInfixOperator (!.addOpNoOvf !integerType !"add" !?ioContext.mInfixOperatorMap !integerType)
#--- Enter -% infix operator
  addIntegerInfixOperator (!.subOpNoOvf !integerType !"sub" !?ioContext.mInfixOperatorMap !integerType)
#--- Enter *% infix operator
  addIntegerInfixOperator (!.mulOpNoOvf !integerType !"mul" !?ioContext.mInfixOperatorMap !integerType)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc addIntegerInfixOperator
  ?let @omnibusInfixOperator inInfixOperator
  ?let @omnibusType inIntegerType
  ?let @string inLLVMOp
  ?!@infixOperatorMap ioInfixOperatorMap
  ?let @omnibusType inResultType
{
  let ctIntType = compileTimeIntegerType ()
  var key = infixOperatorMapKey (!inIntegerType !inInfixOperator !.nowhere !inIntegerType)
  [!?ioInfixOperatorMap insertKey !key !inResultType !@inlineInfixOperatorUsage.init {!inLLVMOp}]
  key = infixOperatorMapKey (!inIntegerType !inInfixOperator !.nowhere !ctIntType)
  [!?ioInfixOperatorMap insertKey !key !inResultType !@inlineInfix_integer_compileTimeInt_operatorUsage.init {!inLLVMOp}]
  key = infixOperatorMapKey (!ctIntType !inInfixOperator !.nowhere !inIntegerType)
  [!?ioInfixOperatorMap insertKey !key !inResultType !@inlineInfix_compileTimeInt_integer_operatorUsage.init {!inLLVMOp}] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! INFIX OPERATION BETWEEN INTEGERS object <-> ctInt
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @inlineInfix_integer_compileTimeInt_operatorUsage : @omnibusInfixOperatorUsage {
  public var @string mLLVMOperation
}

#·······················································································································

override method @inlineInfix_integer_compileTimeInt_operatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
#--- Check right ctInt belong to left integer range
  [[inLeftOperand type].kind integer ?min: let minValue ?max: let maxValue ?2*]
  [inRightOperand literalInteger ?1* ?value:let value]
  if value < minValue then
    error inOperatorLocation
    : "right operand is a compile time integer with an invalid value, lower than $"
      + [inLeftOperand type].omnibusTypeDescriptionName + " minimum value"
  elsif value > maxValue then
    error inOperatorLocation
    : "right operand is a compile time integer with an invalid value, greater than $"
      + [inLeftOperand type].omnibusTypeDescriptionName + " maximum value"
  end
#---
  var leftOperand = inLeftOperand
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?leftOperand]
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  let s = [outResultValue llvmName] + " = " + self.mLLVMOperation + " " + [[leftOperand type] llvmTypeName]
        + " " + [leftOperand llvmName] + ", " + [inRightOperand llvmName]
  [!?ioInstructionGenerationList appendInstructionAsFreeString !s !§[]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! INFIX OPERATION BETWEEN INTEGERS ctInt <-> object
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @inlineInfix_compileTimeInt_integer_operatorUsage : @omnibusInfixOperatorUsage {
  public var @string mLLVMOperation
}

#·······················································································································

override method @inlineInfix_compileTimeInt_integer_operatorUsage generateCode
  ?let @objectIR inLeftOperand
  ?let @location inOperatorLocation
  ?let @objectIR inRightOperand
  ?let @omnibusType inResultType
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@allocaList unused ioAllocaList
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
#--- Check right ctInt belong to right integer range
  [[inRightOperand type].kind integer ?min: let minValue ?max: let maxValue ?2*]
  [inLeftOperand literalInteger ?1* ?value:let value]
  if value < minValue then
    error inOperatorLocation
    : "left operand is a compile time integer with an invalid value, lower than $"
      + [inRightOperand type].omnibusTypeDescriptionName + " minimum value"
  elsif value > maxValue then
    error inOperatorLocation
    : "left operand is a compile time integer with an invalid value, greater than $"
      + [inRightOperand type].omnibusTypeDescriptionName + " maximum value"
  end
#---
  var rightOperand = inRightOperand
  [!?ioInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?rightOperand]
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  let s = [outResultValue llvmName] + " = " + self.mLLVMOperation + " " + [[rightOperand type] llvmTypeName]
        + " " + [inLeftOperand llvmName] + ", " + [rightOperand llvmName]
  [!?ioInstructionGenerationList appendInstructionAsFreeString !s !§[]]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: BUILTIN FUNCTIONS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @integerBuiltinFunctionIR : @abstractRoutineIR {
  public var @string mLLVMTypeName
  public var @string mIntrinsicName
}

#·······················································································································

override method @integerBuiltinFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioLLVMcode += "define internal " + self.mLLVMTypeName + " @" + [self.mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + self.mLLVMTypeName + "* %inValue) {\n"
  ioLLVMcode += "  %value = load " + self.mLLVMTypeName + ", " + self.mLLVMTypeName + "* %inValue\n"
  ioLLVMcode += "  %result = call " + self.mLLVMTypeName + " @llvm." + self.mIntrinsicName + "." + self.mLLVMTypeName
  ioLLVMcode += " (" + self.mLLVMTypeName + " %value)\n"
  ioLLVMcode += "  ret " + self.mLLVMTypeName + " %result\n"
  ioLLVMcode += "}\n\n"
  ioGenerationAdds.mExternFunctionDeclarationSet +=
    !self.mLLVMTypeName + " @llvm." + self.mIntrinsicName + "." + self.mLLVMTypeName + " (" + self.mLLVMTypeName + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
