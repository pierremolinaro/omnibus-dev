#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @sizeofExpressionAST : @expressionAST {
  @LValueAST mLValue
}

#·······················································································································

class @sizeofTypeAST : @expressionAST {
  @lstring mTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $sizeof$
    $($
    <lvalue> !?ioAST ?let lvalue
    $)$
    outExpression = @sizeofExpressionAST.new {!lvalue}
  }

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $sizeof$
    $($
    <type_definition> !?ioAST ?let typeName
    $)$
    outExpression = @sizeofTypeAST.new {!typeName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sizeofExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#·······················································································································

override method @sizeofTypeAST addDependenceEdgeForStaticExpression
  ?let @lstring unused inConstantName
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sizeofExpressionAST noteExpressionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph unused ioGraph
{
}

#·······················································································································

override method @sizeofTypeAST noteExpressionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph noteNode !mTypeName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @sizeofExpressionAST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sizeofExpressionAST analyzeExpression
  ?self:let @PLMType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @PLMType unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode unused inCurrentMode
  ?safe:let @bool inIsSafe
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
  if [inRoutineAttributes guard] then
    error mLValue.mIdentifier : "sizeof () cannot be used in guard" : outResult
  else
  #--- Analyze LValue
    [ioUniversalMap searchValuedObjectType !selfType:inSelfType !mLValue ?let type]
    let resultTypeProxy = @unifiedTypeMap-proxy.searchKey {
      !inContext.mTypeMap
      !["$uint" + inContext.mTargetParameters.mPointerSize nowhere]
    }
    let resultType = [resultTypeProxy type]
    getNewTempValue (!resultType !?ioTemporaries ?outResult)
    ioInstructionGenerationList += !@sizeofInstructionIR.new {
      !outResult
      !type
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @sizeofTypeAST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sizeofTypeAST analyzeExpression
  ?self:let @PLMType unused inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @PLMType unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode unused inCurrentMode
  ?safe:let @bool inIsSafe
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap unused  ioUniversalMap
  ?!alloca:@allocaList unused ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outResult
{
  if [inRoutineAttributes guard] then
    error mTypeName : "sizeof () cannot be used in guard" : outResult
  else
    let type = [@unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !mTypeName} type]
    let resultTypeProxy = @unifiedTypeMap-proxy.searchKey {
      !inContext.mTypeMap
      !["$uint" + inContext.mTargetParameters.mPointerSize nowhere]
    }
    let resultType = [resultTypeProxy type]
    getNewTempValue (!resultType !?ioTemporaries ?outResult)
    ioInstructionGenerationList += !@sizeofInstructionIR.new {!outResult!type}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! @sizeofInstructionIR
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @sizeofInstructionIR : @abstractInstructionIR {
  @objectIR mTarget
  @PLMType mSourceType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sizeofInstructionIR enterAccessibleEntities
  ?!@stringset unused ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sizeofInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let typeName = [mSourceType llvmTypeName]
  ioLLVMcode += "  " + [mTarget llvmName] + ".asPtr = getelementptr inbounds " + typeName + ", " + typeName + "* null, i32 1\n"
  ioLLVMcode += "  " + [mTarget llvmName] + " = ptrtoint " + typeName + "* " + [mTarget llvmName] + ".asPtr to i32\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
