#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @typeDynamicArrayDeclarationAST : @abstractDeclarationAST {
  @lstring mDynamicArrayTypeName
  @lstring mElementTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <type_definition> ?!@ast ioAST !@lstring outTypeName {
    $[$
    <type_definition> !?ioAST ?let elementTypeName
    $]$
    outTypeName = ["anonymous." + ioAST.mTypeDeclarationIndex here]
    ioAST.mTypeDeclarationIndex ++
    ioAST.mDeclarationListAST += !@typeDynamicArrayDeclarationAST.new {!outTypeName !elementTypeName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeDynamicArrayDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [!?ioGraph addNode !mDynamicArrayTypeName !self]
  [!?ioGraph addEdge !mDynamicArrayTypeName !mElementTypeName]
  let rootNode = @lstring.new {!configurationNodeNameForPrecedenceGraph () !mDynamicArrayTypeName.location}
  [!?ioGraph addEdge !mDynamicArrayTypeName !rootNode]
}

#·······················································································································

override getter @typeDynamicArrayDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "anonymous " + mDynamicArrayTypeName 
}

#·······················································································································

override getter @typeDynamicArrayDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = mDynamicArrayTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeDynamicArrayDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
  if not ioContext.mTargetParameters.mHandleDynamicArray then
    error mElementTypeName : "this target does not handle dynamic array"
  end
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mDynamicArrayTypeName ?let arrayTypeProxy]
#-------------------------------------------- Get element type
  [ioContext.mTypeMap searchKey !lkey:mElementTypeName ?type:let elementType]
  if not [elementType copyable] then
    error mElementTypeName : "an array element should be copyable"
  end
  if not [elementType instanciable] then
    error mElementTypeName : "an array element should be instanciable"
  end
#-------------------------------------------- Original type name
  let omnibusTypeDescriptionName = @lstring.new {!"[" + elementType.omnibusTypeDescriptionName + "]" !mDynamicArrayTypeName}
  let llvmBaseTypeName = @lstring.new {!"dyn-" + elementType.llvmBaseTypeName !mDynamicArrayTypeName}
#-------------------------------------------- Original type name
  if [ioContext.mTypeMap hasKey !omnibusTypeDescriptionName] then
    [ioContext.mTypeMap searchKey !lkey:omnibusTypeDescriptionName ?type:var type]
    [!?ioContext.mTypeMap insertType
      !lkey:mDynamicArrayTypeName
      !type:type
    ]
  else
    [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !["uint32" nowhere] ?let uint32TypeProxy]
    [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mElementTypeName ?let elementTypeProxy]
  #-------------------------------------------- Property map
    @propertyGetterMap propertyGetterMap = {}
  #--- Method 'removeAll()'
    [!?ioContext.mRoutineMap addFunctionWithoutArgument
      !omnibusTypeDescriptionName: omnibusTypeDescriptionName
      !llvmBaseTypeName:llvmBaseTypeName
      !methodName:.new {!"removeAll" !mDynamicArrayTypeName}
      !mode:.anySafeMode
      !resultTypeProxy: .null
      ?routineLLVMName:var routineLLVMName
    ]
    ioRoutineListIR += !@dynArrayRemoveAllFunctionIR.new {
      !routineLLVMName
      !isRequired:false
      !warnsIfUnused:false
    }
  #--- Method 'length()'
    [!?ioContext.mRoutineMap addFunctionWithoutArgument
      !omnibusTypeDescriptionName: omnibusTypeDescriptionName
      !llvmBaseTypeName:llvmBaseTypeName
      !methodName:. new {!"length" !mDynamicArrayTypeName}
      !mode:.anySafeMode
      !resultTypeProxy: uint32TypeProxy
      ?routineLLVMName:routineLLVMName
    ]
    ioRoutineListIR += !@dynArrayLengthFunctionIR.new {
      !routineLLVMName
      !isRequired:false
      !warnsIfUnused:false
    }
  #--- Method 'insert(?:?atIndex:)'
    [!?ioContext.mRoutineMap addFunctionWithTwoInputArguments
      !omnibusTypeDescriptionName: omnibusTypeDescriptionName
      !?context:ioContext
      !llvmBaseTypeName:llvmBaseTypeName
      !methodName:. new {!"insert" !mDynamicArrayTypeName}
      !mode:.anySafeMode
      !inputArgumentSelector1:""
      !inputArgumentTypeProxy1:elementTypeProxy
      !inputArgumentName1:"inValue"
      !inputArgumentSelector2:"atIndex"
      !inputArgumentTypeProxy2:uint32TypeProxy
      !inputArgumentName2:"inIndex"
      !resultTypeProxy:.null
      ?routineLLVMName: let insertFunctionMangledName
    ]
    ioRoutineListIR += !@dynArrayInsertFunctionIR.new {
      !insertFunctionMangledName
      !isRequired: false
      !warnsIfUnused: false
      !elementTypeProxy
    }
  #--- Method 'append(?:)'
    [!?ioContext.mRoutineMap addFunctionWithInputArgument
      !omnibusTypeDescriptionName: omnibusTypeDescriptionName
      !?context:ioContext
      !llvmBaseTypeName:llvmBaseTypeName
      !methodName: .new {!"append" !mDynamicArrayTypeName}
      !mode: .anySafeMode
      !inputArgumentSelector: ""
      !inputArgumentTypeProxy: elementTypeProxy
      !inputArgumentName: "inValue"
      !resultTypeProxy: .null
      ?routineLLVMName: routineLLVMName
    ]
    ioRoutineListIR += !@dynArrayAppendFunctionIR.new {
      !routineLLVMName
      !isRequired: false
      !warnsIfUnused: false
      !arrayTypeProxy
      !elementTypeProxy
      !insertFunctionMangledName
    }
  #-------------------------------------------- Constructor map
    @constructorMap constructorMap = {}
    [!?constructorMap insertKey !["()" nowhere] !{} !.null]
    [!?ioContext.mTypeConstructorMap insertKey !omnibusTypeDescriptionName !constructorMap]
  #-------------------------------------------- Type attributes
    let @omnibusTypeAttributes typeAttributes = .instanciable | .copyable
  #-------------------------------------------- Enter in type map
    let dynamicArrayType = @omnibusType.new {
      !propertyGetterMap:propertyGetterMap
      !propertySetterMap2: {}
      !subscript:.noSubscript
      !attributes:typeAttributes
      !omnibusTypeDescriptionName:omnibusTypeDescriptionName
      !kind:.dynamicArrayType {!elementType:elementType}
      !llvmBaseTypeName:llvmBaseTypeName
    }
    [!?ioContext.mTypeMap insertType
      !lkey:mDynamicArrayTypeName
      !type:dynamicArrayType
    ]
  #-------------------------------------------- Assignment
  let assignmentFunctionName = assignmentOperatorFuncName (!dynamicArrayType !dynamicArrayType)
   let routine = @dynamicArrayTypeAssignGenericFunctionIR.new {
      !.new {!assignmentFunctionName !mDynamicArrayTypeName.location}
      !isRequired: false
      !warnsIfUnused: false
    }
    ioRoutineListIR += !routine
     let operatorUsage = @dynamicArrayTypeAssignUsage.new{
      !dynamicArrayType
      !assignmentFunctionName
    }
    let key = assignmentOperatorKey (!dynamicArrayType !mDynamicArrayTypeName.location !dynamicArrayType)
    [!?ioContext.mAssignmentOperatorMap insertKey !key !operatorUsage]


 
  
  
  
#    @llvmGenerationInstructionList llvmInstructionList = {}
#    llvmInstructionList += !@llvmVarInstruction.new {!["SOURCE.LOADED" nowhere]}
#    llvmInstructionList += !@llvmVarInstruction.new {!["TARGET.LOADED" nowhere]}
#
#    @llvmGenerationInstructionElementList instructionElements = {}
#    instructionElements += !.symbol {!name: ["SOURCE.LOADED" nowhere]}
#    instructionElements += !.string {!string: " = load %ptrtype, %ptrtype*  "}
#    instructionElements += !.symbol {!name: ["SRC" nowhere]}
#    llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#   
##  ioLLVMcode += "  call void @arc.retain (%ptrtype %source)\n" 
#    instructionElements = {}
#    instructionElements += !.string {!string: "call void @arc.retain (%ptrtype "}
#    instructionElements += !.symbol {!name: ["SOURCE.LOADED" nowhere]}
#    instructionElements += !.string {!string: ")"}
#    llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#
##  ioLLVMcode += "  %target = load %ptrtype, %ptrtype* %inTargetPtr\n" 
#    instructionElements = {}
#    instructionElements += !.symbol {!name: ["TARGET.LOADED" nowhere]}
#    instructionElements += !.string {!string: " = load %ptrtype, %ptrtype*  "}
#    instructionElements += !.symbol {!name: ["TGT" nowhere]}
#    llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#
##  ioLLVMcode += "  call void @arc.release (%ptrtype %target)\n" 
#    instructionElements = {}
#    instructionElements += !.string {!string: "call void @arc.release (%ptrtype "}
#    instructionElements += !.symbol {!name: ["TARGET.LOADED" nowhere]}
#    instructionElements += !.string {!string: ")"}
#    llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#
##  ioLLVMcode += "  store %ptrtype %source, %ptrtype* %inTargetPtr\n" 
#    instructionElements = {}
#    instructionElements += !.string {!string: "store %ptrtype "}
#    instructionElements += !.symbol {!name: ["SOURCE.LOADED" nowhere]}
#    instructionElements += !.string {!string: ", %ptrtype* "}
#    instructionElements += !.symbol {!name: ["TGT" nowhere]}
#    llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#
#    let key = assignmentOperatorKey (!dynamicArrayType !mDynamicArrayTypeName.location !dynamicArrayType)
#    let operatorUsage = @llvmAssignmentOperatorUsage.new{
#      !dynamicArrayType
#      !["TGT" nowhere]
#      !{}
#      !dynamicArrayType
#      !["SRC" nowhere]
#      !{}
#      !@ctTrueExpressionAST.new
#      !llvmInstructionList
#    }
#    [!?ioContext.mAssignmentOperatorMap insertKey !key !operatorUsage]
#    @assignmentGenerationVarMap varMap = {}
#    [!?varMap insertKey !["SRC" nowhere] !"%inSourcePtr"]
#    [!?varMap insertKey !["TGT" nowhere] !"%inTargetPtr"]
#    @assignmentGenerationVarMap typeMap = {}
#    [!?typeMap insertKey !["SRC" nowhere] ![dynamicArrayType llvmTypeName]]
#    [!?typeMap insertKey !["TGT" nowhere] ![dynamicArrayType llvmTypeName]]
#    @stringlist generatedInstructions = {}
#    @allocaList allocaList = {}
#    @uint temporaryIndex = 0
#    [llvmInstructionList generateIRCode !varMap !typeMap !?generatedInstructions !?temporaryIndex !?allocaList]
#    let routine = @assignmentRoutineIR.new {
#      !.new {!assignmentOperatorFuncName (!dynamicArrayType !dynamicArrayType) !mDynamicArrayTypeName.location}
#      !isRequired: false
#      !warnsIfUnused: false
#      !dynamicArrayType
#      !"inTargetPtr"
#      !dynamicArrayType
#      !"inSourcePtr"
#      !generatedInstructions
#      !allocaList
#    }
#    ioRoutineListIR += !routine
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: removeAll
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynArrayRemoveAllFunctionIR : @abstractRoutineIR {
}

#·······················································································································

override method @dynArrayRemoveAllFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (%ptrtype* %ioArray)" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += "  %buffer.pointer = load %ptrtype, %ptrtype* %ioArray\n"
  ioLLVMcode += "  call void @arc.release (%ptrtype %buffer.pointer)\n"
  ioLLVMcode += "  store %ptrtype null, %ptrtype* %ioArray\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: length
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynArrayLengthFunctionIR : @abstractRoutineIR {
}

#·······················································································································

override method @dynArrayLengthFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
  ioLLVMcode += "define internal i32 @" + [mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (%ptrtype* %ioArray)" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += "  %buffer.pointer = load %ptrtype, %ptrtype* %ioArray\n"
  ioLLVMcode += "  %length = call i32 @arc.length (%ptrtype %buffer.pointer)\n"
  ioLLVMcode += "  ret i32 %length\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: append(?:)
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynArrayAppendFunctionIR : @abstractRoutineIR {
  @unifiedTypeMap-proxy mArrayTypeProxy
  @unifiedTypeMap-proxy mElementTypeProxy
  @string mInsertFunctionMangledName
}

#·······················································································································

override method @dynArrayAppendFunctionIR enterAccessibleEntities
   ?!@stringset ioInvokedRoutineSet
   ?!@uint unused ioMaxBranchOfOnInstructions
{
  ioInvokedRoutineSet += !mInsertFunctionMangledName
}

#·······················································································································

override method @dynArrayAppendFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
  let elementType = [mElementTypeProxy type]
  let @routineFormalArgumentListAST argumentList = {
    !.input
    !["" nowhere]
    ![elementType.llvmBaseTypeName nowhere]
    !["inValue" nowhere]
  ,
    !.input
    !["atIndex" nowhere]
    !["uint32" nowhere]
    !["inIndex" nowhere]
  }
  let insertRoutineMangledName = routineMangledNameFromAST (
    ![mArrayTypeProxy type].llvmBaseTypeName
    !["insert" nowhere]
    !argumentList
  )
  let insertRoutineLLVMName = llvmNameForFunction (!insertRoutineMangledName.string)
  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation]
             + " (%ptrtype* %ioArray, " + [elementType llvmTypeName] + " %inValue)" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += ";--- Get buffer length\n"
  ioLLVMcode += "  %current.buffer.pointer = load %ptrtype, %ptrtype* %ioArray\n"
  ioLLVMcode += "  %current.buffer.length = call i32 @arc.length (%ptrtype %current.buffer.pointer)\n"
  ioLLVMcode += ";--- Insert\n"
  ioLLVMcode += "  call void @" + insertRoutineLLVMName
             + "(%ptrtype* %ioArray, " + [elementType llvmTypeName] + " %inValue, i32 %current.buffer.length)\n"
  ioLLVMcode += ";--- Return\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: insert(?:)
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynArrayInsertFunctionIR : @abstractRoutineIR {
  @unifiedTypeMap-proxy mElementTypeProxy
}

#·······················································································································

override method @dynArrayInsertFunctionIR enterAccessibleEntities
   ?!@stringset ioInvokedRoutineSet
   ?!@uint unused ioMaxBranchOfOnInstructions
{
  let assignRoutineLLVMName = assignmentOperatorFuncName (![mElementTypeProxy type] ![mElementTypeProxy type])
  ioInvokedRoutineSet += !assignRoutineLLVMName
}

#·······················································································································

override method @dynArrayInsertFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
  let elementLLVMTypeName = [[mElementTypeProxy type] llvmTypeName]
  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation] + " (%ptrtype* %ioArray"
  ioLLVMcode += ", " + elementLLVMTypeName + " %inValue, i32 %inIndex)" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += ";--- Inserted element pointer\n"
  ioLLVMcode += "  %insert.address = alloca %ptrtype\n"
  ioLLVMcode += ";--- value pointer\n"
  ioLLVMcode += "  %value.pointer = alloca " + elementLLVMTypeName + "\n"
  ioLLVMcode += "  store " + elementLLVMTypeName + " %inValue, " + elementLLVMTypeName + "* %value.pointer\n"
  ioLLVMcode += ";--- Size of element\n"
  ioLLVMcode += "  %sizeAsPtr = getelementptr inbounds " + elementLLVMTypeName + ", " + elementLLVMTypeName + "* null, i32 1\n"
  ioLLVMcode += "  %element.byte.size = ptrtoint " + elementLLVMTypeName + "* %sizeAsPtr to i32\n"
  ioLLVMcode += ";--- Get inserted element pointer\n"
  ioLLVMcode += "  %current.buffer.pointer = load %ptrtype, %ptrtype* %ioArray\n"
  ioLLVMcode += "  %new.buffer.pointer = call %ptrtype @arc.insert.at.index "
  ioLLVMcode += "(%ptrtype %current.buffer.pointer, i32 %inIndex, i32 %element.byte.size, %ptrtype* %insert.address)\n"
  ioLLVMcode += ";--- Perform copy\n"
  ioLLVMcode += "  %typed.insert.address = bitcast %ptrtype* %insert.address to " + elementLLVMTypeName + "*\n"
  let assignRoutineLLVMName = assignmentOperatorFuncName (![mElementTypeProxy type] ![mElementTypeProxy type])
  ioLLVMcode += "  call void @" + [assignRoutineLLVMName assemblerRepresentation]
  ioLLVMcode += " (" + elementLLVMTypeName + "* %typed.insert.address, " + elementLLVMTypeName + "* %value.pointer)\n"
  ioLLVMcode += ";--- Store new buffer pointer\n"
  ioLLVMcode += "  store %ptrtype %new.buffer.pointer, %ptrtype* %ioArray\n"
  ioLLVMcode += ";--- Return\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: DYNAMIC ARRAY ASSIGNMENT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynamicArrayTypeAssignUsage : @abstractAssignmentOperatorUsage {
  @omnibusType mDynamicArrayType
  @string mAssignFunctionName
}

#·······················································································································

override method @dynamicArrayTypeAssignUsage generateCode
    ?!@semanticTemporariesStruct ioTemporaries
    ?!@instructionListIR ioInstructionListIR
    ?!@allocaList unused ioAllocaList
    ?let @omnibusType inTargetType
    ?let @string inTargetLLVMName
    ?let @objectIR inSourcePossibleReference
    ?let @location unused inErrorLocation
    ?initializedTarget: let @bool inTargetIsInitialized
{
  let targetTypeName = [inTargetType llvmTypeName]
  if inTargetIsInitialized then
    let s = " call void  @" + [mAssignFunctionName assemblerRepresentation] 
        + " (" + targetTypeName + "* " + inTargetLLVMName 
          + ", " + targetTypeName + "* " + [inSourcePossibleReference llvmName] + ")"
    [!?ioInstructionListIR appendInstructionAsFreeString !s !{!mAssignFunctionName}]
  else # Not initialized, perform a store  
    @objectIR sourceValue = inSourcePossibleReference
    [!?ioInstructionListIR appendLoadWhenReference !?ioTemporaries !?sourceValue]
    let s = "store " + targetTypeName + " " + [sourceValue llvmName] + ", " + targetTypeName + "* " + inTargetLLVMName
    [!?ioInstructionListIR appendInstructionAsFreeString !s !{}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynamicArrayTypeAssignGenericFunctionIR : @abstractRoutineIR {
}

#·······················································································································

override method @dynamicArrayTypeAssignGenericFunctionIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
#--- Assignment
  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (%ptrtype * %inTargetPtr, %ptrtype* %inSourcePtr) nounwind optsize {\n"
  ioLLVMcode += "  %source = load %ptrtype, %ptrtype* %inSourcePtr\n" 
  ioLLVMcode += "  call void @arc.retain (%ptrtype %source)\n" 
  ioLLVMcode += "  %target = load %ptrtype, %ptrtype* %inTargetPtr\n" 
  ioLLVMcode += "  call void @arc.release (%ptrtype %target)\n" 
  ioLLVMcode += "  store %ptrtype %source, %ptrtype* %inTargetPtr\n" 
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}









#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION: DYNAMIC ARRAY ASSIGNMENT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#class @dynamicArrayTypeAssignFunctionIR : @abstractRoutineIR {
#  @omnibusType mArrayType
#}
#
##·······················································································································
#
#override method @dynamicArrayTypeAssignFunctionIR llvmCodeGeneration 
#  ?!@string ioLLVMcode
#  ?let @generationContext unused inGenerationContext
#  ?!@generationAdds ioGenerationAdds
#{
#  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
##--- Assignment
#  let arrayTypeLLVMName = [mArrayType llvmTypeName]
#  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation]
#  ioLLVMcode += " (" + arrayTypeLLVMName + " * %inTargetPtr, " + arrayTypeLLVMName + "* %inSourcePtr) nounwind optsize {\n"
#  ioLLVMcode += "  %source = bitcast " + arrayTypeLLVMName + "* %inSourcePtr to %ptrtype*\n" 
#  ioLLVMcode += "  %target = bitcast " + arrayTypeLLVMName + "* %inTargetPtr to %ptrtype*\n" 
#  ioLLVMcode += "  call void @" + assignDynamicArrayFunctionName () + " (%ptrtype* %target, %ptrtype* %source)\n" 
#  ioLLVMcode += "  ret void\n"
#  ioLLVMcode += "}\n\n"
#}
#
##———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#
#override method @dynamicArrayTypeAssignFunctionIR enterAccessibleEntities
#  ?!@stringset ioInvokedRoutineSet
#  ?!@uint unused ioMaxBranchOfOnInstructions
# {
#  ioInvokedRoutineSet += !assignDynamicArrayFunctionName ()
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
