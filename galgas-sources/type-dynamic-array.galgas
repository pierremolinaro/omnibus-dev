#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @typeDynamicArrayDeclarationAST : @abstractDeclarationAST {
  @lstring mAnonymousDynamicArrayTypeName
  @lstring mElementTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <type_definition> ?!@ast ioAST !@lstring outTypeName {
    $[$
    $\$type$ ?let elementTypeName
    $]$
    outTypeName = ["dynarray." + ioAST.mTypeDeclarationIndex here]
    ioAST.mTypeDeclarationIndex ++
    ioAST.mDeclarationListAST += !@typeDynamicArrayDeclarationAST.new {!outTypeName !elementTypeName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ADD EXTENSION                                                                                                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeDynamicArrayDeclarationAST addExtension
  ?!@extensionDeclarationListAST unused ioExtensionDeclarationListAST
  ?!@extendStaticArrayDeclarationAST unused ioExtendStaticArrayDeclarationAST
  !@abstractDeclarationAST outNewDeclaration
{
  outNewDeclaration = self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeDynamicArrayDeclarationAST enterInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  let newTypeName = llvmTypeNameFromPLMname (!mAnonymousDynamicArrayTypeName)
  let elementTypeName = llvmTypeNameFromPLMname (!mElementTypeName)
  [!?ioGraph addNode !newTypeName !self]
  [!?ioGraph addEdge !newTypeName !elementTypeName]
  let rootNode = @lstring.new {!configurationNodeNameForPrecedenceGraph () !mAnonymousDynamicArrayTypeName.location}
  [!?ioGraph addEdge !newTypeName !rootNode]
}

#·······················································································································

override getter @typeDynamicArrayDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "anonymous $" + mAnonymousDynamicArrayTypeName 
}

#·······················································································································

override getter @typeDynamicArrayDeclarationAST location -> @location outLocation {
  outLocation = mAnonymousDynamicArrayTypeName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeDynamicArrayDeclarationAST enterInContext
  ?procedureDeclarationList:let @functionDeclarationListAST unused inProcedureListAST
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList ioDecoratedDeclarationList
  ?!@subprogramInvocationGraph ioSubprogramInvocationGraph
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
  if not ioContext.mTargetParameters.mHandleDynamicArray then
    error mElementTypeName : "this target does not handle dynamic array"
  end
#-------------------------------------------- Get element type
  [ioContext.mTypeMap searchKey !lkey:mElementTypeName ?type:let elementType ?1*]
  if not [elementType copyable] then
    error mElementTypeName : "an array element should be copyable"
  end
  if not [elementType instanciable] then
    error mElementTypeName : "an array element should be instanciable"
  end
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mAnonymousDynamicArrayTypeName ?let arrayTypeProxy]
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !["uint32" nowhere] ?let uint32TypeProxy]
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mElementTypeName ?let elementTypeProxy]
#-------------------------------------------- Property map
  @propertyMap propertyMap = {}
#--- Method 'removeAll()'
  [!?propertyMap addFunctionWithoutArgument
    !?ioSubprogramInvocationGraph
    !receiverTypeProxy:arrayTypeProxy
    !methodName:"removeAll"
    !safe:false
    !resultTypeProxy: .null
    !canMutateProperties:true
  ]
#--- Method 'length()'
  [!?propertyMap addFunctionWithoutArgument
    !?ioSubprogramInvocationGraph
    !receiverTypeProxy:arrayTypeProxy
    !methodName:"length"
    !safe:false
    !resultTypeProxy: uint32TypeProxy
    !canMutateProperties:false
  ]
#--- Method 'append(?:)'
  [!?propertyMap addFunctionWithInputArgument
    !?context:ioContext
    !?ioSubprogramInvocationGraph
    !receiverTypeProxy:arrayTypeProxy
    !methodName:"append"
    !safe:false
    !inputArgumentSelector:""
    !inputArgumentTypeProxy:elementTypeProxy
    !inputArgumentName:"inValue"
    !resultTypeProxy:.null
    !canMutateProperties:true
  ]
#--- Method 'insert(?:?atIndex:)'
  [!?propertyMap addFunctionWithTwoInputArguments
    !?context:ioContext
    !?ioSubprogramInvocationGraph
    !receiverTypeProxy:arrayTypeProxy
    !methodName:"insert"
    !safe:false
    !inputArgumentSelector1:""
    !inputArgumentTypeProxy1:elementTypeProxy
    !inputArgumentName1:"inValue"
    !inputArgumentSelector2:"atIndex"
    !inputArgumentTypeProxy2:uint32TypeProxy
    !inputArgumentName2:"inIndex"
    !resultTypeProxy:.null
    !canMutateProperties:true
  ]
#-------------------------------------------- Constructor map
  @constructorMap constructorMap = {}
  [!?constructorMap insertKey !["()" nowhere] !{} !.null]
#-------------------------------------------- Type attributes
  let @PLMTypeAttributes typeAttributes = .instanciable | .copyable | .arc
#-------------------------------------------- Enter in type map
  let plmImplementationTypeName = "dynarray." + mElementTypeName
  let arrayType = @PLMType.new {
    !propertyMap:propertyMap
    !classConstantMap:{}
    !constructorMap:constructorMap
    !guardMap:{}
    !typeAttributes:typeAttributes
    !plmUserTypeName:mAnonymousDynamicArrayTypeName
    !kind:.dynamicArrayType {!elementType:elementType !ptrSize:ioContext.mTargetParameters.mPointerSize}
    !plmImplementationTypeName:plmImplementationTypeName
  }
  [!?ioContext.mTypeMap insertType
    !lkey:mAnonymousDynamicArrayTypeName
    !type:arrayType
    !index:[ioContext.mTypeMap count]
  ]
#---------------- Add decorated declaration
  ioDecoratedDeclarationList += !@decoratedTypeDynamicArrayDeclaration.new {
    ![arrayTypeProxy type]
    !mAnonymousDynamicArrayTypeName
    !ioContext.mTargetParameters.mPointerSize
    !elementType
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @decoratedTypeDynamicArrayDeclaration : @abstractDecoratedDeclaration {
  @PLMType mDynamicArrayType
  @string mAnonymousDynamicArrayTypeName
  @bigint mPtrSize
  @PLMType mElementType
}

#·······················································································································

override method @decoratedTypeDynamicArrayDeclaration semanticAnalysis
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#----------- Generate enumeration specific code
  ioIntermediateCodeStruct.mGenerationListIR += !@dynamicArrayIR.new {
    !mDynamicArrayType
    !mAnonymousDynamicArrayTypeName
    !mPtrSize
    !mElementType
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @dynamicArrayIR : @abstractGenerationIR {
  @PLMType mDynamicArrayType
  @string mAnonymousDynamicArrayTypeName
  @uint mPtrSize
  @PLMType mElementType
}

#·······················································································································

override method @dynamicArrayIR generateLLVMcode
  ?!@string ioLLVMcode
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mNeedsDynamicMemoryAllocation = true
  let elementLLVMTypeName = [mElementType llvmTypeName]
  let arrayLLVMTypeName = [mDynamicArrayType llvmTypeName]
#---------- Method 'removeAll()'
  let removeAllRoutineMangledName = routineMangledNameFromAST (
    !llvmTypeStringFromPLMname (!mAnonymousDynamicArrayTypeName)
    !["removeAll" nowhere]
    !{}
  )
  let removeAllRoutineLLVMName = llvmNameForFunction (!removeAllRoutineMangledName.string)
  ioLLVMcode += llvmTitleComment (!removeAllRoutineMangledName)
  ioLLVMcode += "define internal void @" + removeAllRoutineLLVMName + " (" + arrayLLVMTypeName + "* %ioArray)" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += "  %buffer.pointer = load " + arrayLLVMTypeName + ", " + arrayLLVMTypeName + "* %ioArray\n"
  ioLLVMcode += "  %ptr8 = bitcast " + arrayLLVMTypeName + " %buffer.pointer to %ptrtype\n"
  ioLLVMcode += "  call void @arc.release (%ptrtype %ptr8, void (%ptrtype)* " + [mElementType deinitFunctionLLVMName] + ")\n"
  ioLLVMcode += "  store " + arrayLLVMTypeName + " null, " + arrayLLVMTypeName + "* %ioArray\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
#---------- Method 'length()'
  let lengthRoutineMangledName = routineMangledNameFromAST (
    !llvmTypeStringFromPLMname (!mAnonymousDynamicArrayTypeName)
    !["length" nowhere]
    !{}
  )
  let lengthRoutineLLVMName = llvmNameForFunction (!lengthRoutineMangledName.string)
  ioLLVMcode += llvmTitleComment (!lengthRoutineMangledName)
  ioLLVMcode += "define internal i32 @" + lengthRoutineLLVMName + " (" + arrayLLVMTypeName + "* %ioArray)" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += "  %buffer.pointer = load " + arrayLLVMTypeName + ", " + arrayLLVMTypeName + "* %ioArray\n"
  ioLLVMcode += "  %ptr8 = bitcast " + arrayLLVMTypeName + " %buffer.pointer to %ptrtype\n"
  ioLLVMcode += "  %length = call i32 @arc.length (%ptrtype %ptr8)\n"
  ioLLVMcode += "  ret i32 %length\n"
  ioLLVMcode += "}\n\n"
#---------- Method 'insert(?:?atIndex:)'
  @routineFormalArgumentListAST argumentList = {
    !.input
    !["" nowhere]
    ![mElementType.plmUserTypeName nowhere]
    !["inValue" nowhere]
  ,
    !.input
    !["atIndex" nowhere]
    !["uint32" nowhere]
    !["inIndex" nowhere]
  }
  let insertRoutineMangledName = routineMangledNameFromAST (
    !llvmTypeStringFromPLMname (!mAnonymousDynamicArrayTypeName)
    !["insert" nowhere]
    !argumentList
  )
  let insertRoutineLLVMName = llvmNameForFunction (!insertRoutineMangledName.string)
  ioLLVMcode += llvmTitleComment (!insertRoutineMangledName)
  ioLLVMcode += "define internal void @" + insertRoutineLLVMName + " ("
  ioLLVMcode += arrayLLVMTypeName + "* %ioArray"
  ioLLVMcode += ", " + elementLLVMTypeName + " %inValue"
  ioLLVMcode += ", i32 %inIndex"
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += ";--- Inserted element pointer\n"
  ioLLVMcode += "  %insert.address.ptr = alloca %ptrtype\n"
  ioLLVMcode += ";--- value pointer\n"
  ioLLVMcode += "  %value.pointer = alloca " + elementLLVMTypeName + "\n"
  ioLLVMcode += "  store " + elementLLVMTypeName + " %inValue, " + elementLLVMTypeName + "* %value.pointer\n"
  ioLLVMcode += ";--- Size of element\n"
  ioLLVMcode += "  %sizeAsPtr = getelementptr inbounds " + elementLLVMTypeName + ", " + elementLLVMTypeName + "* null, i32 1\n"
  ioLLVMcode += "  %element.byte.size = ptrtoint " + elementLLVMTypeName + "* %sizeAsPtr to i32\n"
  ioLLVMcode += ";--- Get inserted element pointer\n"
  ioLLVMcode += "  %current.buffer.pointer = load " + arrayLLVMTypeName + ", " + arrayLLVMTypeName + "* %ioArray\n"
  ioLLVMcode += "  %current.ptr8 = bitcast " + arrayLLVMTypeName + " %current.buffer.pointer to %ptrtype\n"
  ioLLVMcode += "  %new.ptr8 = call %ptrtype @arc.insert.at.index (%ptrtype %current.ptr8, i32 %inIndex, i32 %element.byte.size, %ptrtype* %insert.address.ptr)\n"
  ioLLVMcode += ";--- Perform copy\n"
  ioLLVMcode += "  %insert.address = load %ptrtype, %ptrtype* %insert.address.ptr\n"
  ioLLVMcode += "  %typed.insert.address = bitcast %ptrtype %insert.address to " + elementLLVMTypeName + "*\n"
  ioLLVMcode += "  call void @plm.assign." + [mElementType.plmUserTypeName identifierRepresentation]
  ioLLVMcode += " (" + elementLLVMTypeName + "* %typed.insert.address, " + elementLLVMTypeName + "* %value.pointer)\n"
  ioLLVMcode += ";--- Store new buffer pointer\n"
  ioLLVMcode += "  %new.buffer.pointer = bitcast %ptrtype %new.ptr8 to " + arrayLLVMTypeName + "\n"
  ioLLVMcode += "  store " + arrayLLVMTypeName + " %new.buffer.pointer, " + arrayLLVMTypeName + "* %ioArray\n"
  ioLLVMcode += ";--- Return\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
#---------- Method 'append(?:)'
  argumentList = {
    !.input
    !["" nowhere]
    ![mElementType.plmUserTypeName nowhere]
    !["inValue" nowhere]
  }
  let routineMangledName = routineMangledNameFromAST (
    !llvmTypeStringFromPLMname (!mAnonymousDynamicArrayTypeName)
    !["append" nowhere]
    !argumentList
  )
  var routineLLVMName = llvmNameForFunction (!routineMangledName.string)
  ioLLVMcode += llvmTitleComment (!routineMangledName)
  ioLLVMcode += "define internal void @" + routineLLVMName + " ("
  ioLLVMcode += arrayLLVMTypeName + "* %ioArray"
  ioLLVMcode += ", " + elementLLVMTypeName + " %inValue"
  ioLLVMcode += ")" + llvmAttributeFunction () + "{\n"
  ioLLVMcode += ";--- Get buffer length\n"
  ioLLVMcode += "  %buffer.pointer = load " + arrayLLVMTypeName + ", " + arrayLLVMTypeName + "* %ioArray\n"
  ioLLVMcode += "  %current.ptr8 = bitcast " + arrayLLVMTypeName + " %buffer.pointer to %ptrtype\n"
  ioLLVMcode += "  %current.buffer.length = call i32 @arc.length (%ptrtype %current.ptr8)\n"
  ioLLVMcode += ";--- Insert\n"
  ioLLVMcode += "  call void @" + insertRoutineLLVMName
             + "(" + arrayLLVMTypeName + "* %ioArray, " + elementLLVMTypeName + " %inValue, i32 %current.buffer.length)\n"
  ioLLVMcode += ";--- Return\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
#---------- denit
  let deinitName = [mDynamicArrayType deinitFunctionLLVMName]
  ioLLVMcode += llvmTitleComment (!deinitName)
  ioLLVMcode += "define internal void " + deinitName + " (" + [mDynamicArrayType llvmTypeName] + " %inPointerAddress) nounwind {\n"
  ioLLVMcode += "  %byte.ptr = bitcast " + [mDynamicArrayType llvmTypeName] + " %inPointerAddress to %ptrtype\n"
  ioLLVMcode += "  call void @arc.release (%ptrtype %byte.ptr, void (%ptrtype)* " + [mElementType deinitFunctionLLVMName] + ")\n"
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
