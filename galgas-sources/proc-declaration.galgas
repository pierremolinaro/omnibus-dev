#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

enum @procFormalArgumentPassingMode {
  case input
  case output
  case inputOutput
}

#----------------------------------------------------------------------------------------------------------------------*

getter @procFormalArgumentPassingMode requiredActualPassingModeForSelector ?@lstring inSelector -> @string outResult {
  switch self
  case input : outResult = "!"
  case output : outResult = "?"
  case inputOutput : outResult = "!?"
  end
  if inSelector.string != "" then
    outResult += inSelector.string + ":"
  end
}

#----------------------------------------------------------------------------------------------------------------------*

list @procFormalArgumentList {
  @procFormalArgumentPassingMode mFormalArgumentPassingMode
  @lstring mSelector
  @lstring mFormalArgumentTypeName
  @lstring mFormalArgumentName
}

#----------------------------------------------------------------------------------------------------------------------*

enum @procedureKindAST {
  case standAloneProc
  case structureProc (@lstring structureTypeName @bool mutating)
}

#----------------------------------------------------------------------------------------------------------------------*

list @procedureDeclarationListAST {
  @procedureKindAST mProcedureKind
  @lstringlist mProcedureModeList
  @lstring mProcedureName
  @lstringlist mProcedureAttributeList
  @procFormalArgumentList mProcFormalArgumentList
  @instructionListAST mInstructionList
  @location mEndOfProcLocation
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <procedure>
    ?procedureKind:let @procedureKindAST inProcedureKind
    ?!@procedureDeclarationListAST ioProcListAST
  {
    <procedure_header>
      ?procModes:let procModeList
      ?name:let procName
      ?attributes:let attributeList
      ?formalArguments:let procFormalArgumentList
    ${$
    <instructionList> ?let instructionList
    $}$
    ioProcListAST +=
      !inProcedureKind
      !procModeList
      !procName
      !attributeList
      !procFormalArgumentList
      !instructionList
      !.here
  }

  #--------------------------------------------------------------------------------------------------------------------*

  rule <procedure_header>
    !procModes:@lstringlist outProcModeList
    !name:@lstring outProcName
    !attributes:@lstringlist outAttributeList
    !formalArguments:@procFormalArgumentList outProcFormalArgumentList
  {
    $proc$
    outProcModeList = {}
    repeat
      $modeName$ ?let procMode
      outProcModeList += !procMode
    while
    end
    outAttributeList = {}
    repeat
    while
      $attribute$ ?let attribute
      outAttributeList += !attribute
    end
    outProcFormalArgumentList = {}
    $identifier$ ?outProcName
    $($
    repeat
    while
      $!$ ?let selector
      $identifier$ ?let formalArgumentName
      $:$
      $identifier$ ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.output
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    while
      $?!$ ?let selector
      $identifier$ ?let formalArgumentName
      $:$
      $identifier$ ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.inputOutput
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    while
      $?$ ?let selector
      $identifier$ ?let formalArgumentName
      $:$
      $identifier$ ?let formalArgumentTypeName
      outProcFormalArgumentList +=
        !@procFormalArgumentPassingMode.input
        !selector
        !formalArgumentTypeName
        !formalArgumentName
    end
    $)$
  }

  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  PRECEDENCE GRAPH                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

method @procedureDeclarationListAST-element enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
#--- Enter only stand alone procedures
  switch mProcedureKind
  case standAloneProc :
    for (* * formalArgumentTypeName *) in mProcFormalArgumentList do
      [!?ioGraph noteNode !formalArgumentTypeName]
    end
  case structureProc (* *) :
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  ENTER IN CONTEXT                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

list @procedureSignature {
  @procFormalArgumentPassingMode mFormalArgumentPassingMode
  @lstring mSelector
  @unifiedTypeMap-proxy mType
}

#----------------------------------------------------------------------------------------------------------------------*

map @procedureMap {
  @bool mMutating
  @modeMap mProcedureModeMap
  @procedureSignature mSignature
  @bool mWeakProcedure

  insert insertKey error message "the '%K' proc is already declared in %L"
  search searchKey error message "there is no '%K' proc"
  remove removeKey error message "there is no '%K' proc"
}

#----------------------------------------------------------------------------------------------------------------------*

func mangledName
  ?forProcedureKind:let @procedureKindAST inProcedureKind
  ?procedureName:let @string inProcedureName
  ?formalArgumentList:@procFormalArgumentList inProcFormalArgumentList
  -> @string outMangledName
{
  outMangledName = ""
  switch inProcedureKind
  case standAloneProc :
  case structureProc (structureTypeName *) :
    outMangledName += structureTypeName.string + "_"
  end
  outMangledName += inProcedureName
  for (formalArgument selector * *) in inProcFormalArgumentList do
    outMangledName += " "
    switch formalArgument
    case input : outMangledName += "?"
    case output : outMangledName += "!"
    case inputOutput : outMangledName += "?!"
    end
    outMangledName += selector.string
  end
}

#----------------------------------------------------------------------------------------------------------------------*

getter @procedureDeclarationListAST-element mangledName -> @string outMangledName {
  outMangledName = mangledName (
    !forProcedureKind:mProcedureKind
    !procedureName:mProcedureName.string
    !formalArgumentList:mProcFormalArgumentList
  )
}

#----------------------------------------------------------------------------------------------------------------------*

method @procedureDeclarationListAST-element enterInContext
  ?!context:@semanticContext ioContext
{
#--- Enter only stand alone procedures
  switch mProcedureKind
  case standAloneProc :
  #--- Signature
    @procedureSignature signature = {}
    for (formalArgumentPassingMode selector formalArgumentTypeName *) in mProcFormalArgumentList do
      [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !formalArgumentTypeName ?let typeProxy]
      signature += !formalArgumentPassingMode !selector !typeProxy
    end
  #--- Mode map
    @modeMap procedureModeMap = {}
    for () in mProcedureModeList do
      [!?procedureModeMap insertKey !mValue] ;
    end
  #--- Weak procedure ?
    var weakProcedure = false
    for (attribute) in mProcedureAttributeList while not weakProcedure do
      weakProcedure = attribute.string == weakAttribute ()
    end
  #--- Enter in context
    let mangledName = [self mangledName]
    let mangledNameWithLocation = @lstring.new {!mangledName !mProcedureName.location}
    if [ioContext.mProcedureMap hasKey !mangledName] then
      let weak = [ioContext.mProcedureMap mWeakProcedureForKey !mangledName]
      if weakProcedure && not weak then
        # redefined weak procedure is ignored
      elsif weakProcedure && weak then
        error mProcedureName : "this weak procedure overrides a weak procedure"
      elsif (not weakProcedure) && weak then
        [!?ioContext.mProcedureMap removeKey !mangledNameWithLocation ?4*] # Remove weak routine
        [!?ioContext.mProcedureMap insertKey # Insert routine
          !mangledNameWithLocation
          !false # not mutating
          !procedureModeMap
          !signature
          !weakProcedure
        ]
      else # (not weakProcedure) && (not weak)
        [!?ioContext.mProcedureMap insertKey # Raises a redefinition error
          !mangledNameWithLocation
          !false # not mutating
          !procedureModeMap
          !signature
          !weakProcedure
        ]
      end
    else
      [!?ioContext.mProcedureMap insertKey
        !mangledNameWithLocation
        !false # not mutating
        !procedureModeMap
        !signature
        !weakProcedure
      ]
    end
  case structureProc (* *) :
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTIC ANALYSIS                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

list @procFormalArgumentListForGeneration {
  @procFormalArgumentPassingMode mFormalArgumentKind
  @unifiedTypeMap-proxy mFormalArgumentType
  @string mFormalArgumentName
}

#----------------------------------------------------------------------------------------------------------------------*

method @procedureDeclarationListAST-element procedureSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@uint ioTemporaryIndex
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Check modes
  @stringset procedureModeSet = {}
  for mode in mProcedureModeList do
    [inContext.mModeMap searchKey !mode.mValue]
    procedureModeSet += !mode.mValue.string
  end
#--- Attribues
  var warnIfUnused = true
  var weakProcedure = false
  for (attribute) in mProcedureAttributeList do
    if attribute.string == noWarningIfUnusedAttribute () then
      if not warnIfUnused then
        error attribute : "duplicate @" + noWarningIfUnusedAttribute () + " attribute"
      end
      warnIfUnused = false    
    elsif attribute.string == weakAttribute () then
      if weakProcedure then
        error attribute : "duplicate @" + weakAttribute () + " attribute"
      end
      weakProcedure = true    
    else
      error attribute : "unknown attribute; available attributes are @"
        + noWarningIfUnusedAttribute ()
        + ", @" + weakAttribute ()
    end
  end
#--- Variable map
  @variableMap variableMap = initialVariableMap (!context:inContext !globalsAreConstant:false)
#--- Add receiver properties, and receiver as first argument
  @procFormalArgumentListForGeneration formalArguments = {}
  @receiverType receiverType
  switch mProcedureKind
  case standAloneProc :
    receiverType = .noReceiver
  case structureProc (structureTypeName mutating) :
    let type = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !structureTypeName}
    @propertyList propertyList
    switch [type kind]
    case structure (propList) : propertyList = propList
    case enumeration (*) : propertyList = {}
    case integer (* *) : propertyList = {}
    case boolean : propertyList = {}
    case boolset : propertyList = {}
    case literalString : propertyList = {}
    end
    if mutating then
      receiverType = .mutatingReceiver {
        !type:type
        !receiverPointer:receiverPtrName ()
      }
      for (propertyType propertyName) in propertyList do
        [!?variableMap insertDefinedLocalVariable
          !propertyName
          !propertyType
          !procedureModeSet
          !receiverPtrName () + "->" + mangledNameForProperty (!name:propertyName.string)
          !.localAccess {
            !access:receiverPtrName () + "->" + mangledNameForProperty (!name:propertyName.string)
          }
          ![propertyType copiable]
        ]
      end
      formalArguments += !.inputOutput !type !receiverPtrName ()
    else
      receiverType = .receiver {
        !type:type
        !receiverValue:receiverName ()
      }
      for (propertyType propertyName) in propertyList do
        [!?variableMap insertUsedLocalConstant
          !propertyName
          !propertyType
          !procedureModeSet
          !receiverName () + "." + mangledNameForProperty (!name:propertyName.string)
          !.localAccess {
            !access:receiverName () + "." + mangledNameForProperty (!name:propertyName.string)
          }
          ![propertyType copiable]
        ]
      end
      formalArguments += !.input !type !receiverName ()
    end%if
  end
#--- Analyse formal arguments
  for (argumentKind * formalArgumentTypeName formalArgumentName) in mProcFormalArgumentList do
    let typeProxy = @unifiedTypeMap-proxy.searchKey {!inContext.mTypeMap !formalArgumentTypeName}
    switch argumentKind
    case input :
      [!?variableMap insertConstantInputFormalArgument
        !formalArgumentName
        !typeProxy
        !procedureModeSet
        !mangledNameForInArgument (!name:formalArgumentName.string)
        !.inArgument {!name:formalArgumentName.string}
        ![typeProxy copiable]
      ]
      formalArguments += !argumentKind !typeProxy !mangledNameForInArgument (!name:formalArgumentName.string)
    case inputOutput :
      [!?variableMap insertInputOutputFormalArgument
        !formalArgumentName
        !typeProxy
        !procedureModeSet
        !"*" + mangledNameForInOutArgument (!name:formalArgumentName.string)
        !.inOutArgument {!name:formalArgumentName.string}
        ![typeProxy copiable]
      ]
      formalArguments += !argumentKind !typeProxy !mangledNameForInOutArgument (!name:formalArgumentName.string)
    case output :
      [!?variableMap insertOutputFormalArgument
        !formalArgumentName
        !typeProxy
        !procedureModeSet
        !"*" + mangledNameForOutArgument (!name:formalArgumentName.string)
        !.outArgument {!name:formalArgumentName.string}
        ![typeProxy copiable]
      ]
      formalArguments += !argumentKind !typeProxy !mangledNameForOutArgument (!name:formalArgumentName.string)
    end
  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [mInstructionList analyzeRoutineInstructionList
    !optionalReceiverType:receiverType
    !context:inContext
    !modes:procedureModeSet
    !allowException:not [procedureModeSet hasKey !exceptionModeName ()]
    !?temporary:ioTemporaryIndex
    !?staticStringMap:ioIntermediateCodeStruct.mGlobalLiteralStringMap
    !?variableMap:variableMap
    !?generatedCode:instructionGenerationList
  ]
#---
  [variableMap checkAutomatonStates !mEndOfProcLocation]
#--- Code generation
  if [ioIntermediateCodeStruct.mProcedureMapIR hasKey !mProcedureName.string] then
    let weak = [ioIntermediateCodeStruct.mProcedureMapIR mWeakForKey !mProcedureName.string]
    if weakProcedure && not weak then
      # redefined weak procedure is ignored
    elsif weakProcedure && weak then
      error mProcedureName : "this weak procedure overrides a weak procedure"
    elsif (not weakProcedure) && weak then
      [!?ioIntermediateCodeStruct.mProcedureMapIR removeKey !mProcedureName ?5*] # Remove weak routine
      [!?ioIntermediateCodeStruct.mProcedureMapIR insertKey
        !mProcedureName
        !formalArguments
        !instructionGenerationList
        ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !mProcedureName.string]
        !warnIfUnused
        !weakProcedure
      ]  
    else # (not weakProcedure) && (not weak)
      [!?ioIntermediateCodeStruct.mProcedureMapIR insertKey # Raises a redefinition error
        !mProcedureName
        !formalArguments
        !instructionGenerationList
        ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !mProcedureName.string]
        !warnIfUnused
        !weakProcedure
      ]
    end
  else
    [!?ioIntermediateCodeStruct.mProcedureMapIR insertKey
      !mProcedureName
      !formalArguments
      !instructionGenerationList
      ![ioIntermediateCodeStruct.mRequiredProcedureSet hasKey !mProcedureName.string]
      !warnIfUnused
      !weakProcedure
    ]  
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

private filewrapper procedureGenerationTemplate in "../generation-templates" {
}{
}{
  template declaration "procedure-declaration.galgasTemplate"
    ?@string PROCEDURE_MANGLED_NAME
    ?@procFormalArgumentListForGeneration FORMAL_ARGUMENT_LIST

  template implementation "procedure-implementation.galgasTemplate"
    ?@string PROCEDURE_MANGLED_NAME
    ?@procFormalArgumentListForGeneration FORMAL_ARGUMENT_LIST
    ?@instructionListIR INSTRUCTION_GENERATION_LIST
}

#----------------------------------------------------------------------------------------------------------------------*

getter @procedureMapIR-element headerCodeGeneration -> @string outCode {
  outCode = [filewrapper procedureGenerationTemplate.declaration
    !mangledNameForProcedure (!name:lkey.string) # mProcedureMangledName
    !mFormalArgumentListForGeneration
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

getter @procedureMapIR-element implementationCodeGeneration -> @string outCode {
  outCode = [filewrapper procedureGenerationTemplate.implementation
    !mangledNameForProcedure (!name:lkey.string) # mProcedureMangledName
    !mFormalArgumentListForGeneration
    !mInstructionGenerationList
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

