#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @standaloneFunctionInExpressionAST : @expressionAST {
  public var @lstring mStandaloneFunctionName
  public var @effectiveArgumentListAST mArguments
  public var @location mEndOfArguments
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX                                                                                                               
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <primary> ?!@ast ioAST !@expressionAST outExpression {
    $identifier$ ?let standaloneFunctionName
    <effective_parameters> !?ioAST ?let arguments ?let endOfArguments
    outExpression = @standaloneFunctionInExpressionAST.init {!standaloneFunctionName !arguments !endOfArguments}
  }

  #·····················································································································

}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! PRECEDENCE GRAPH FROM EXPRESSION                                                                                     
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneFunctionInExpressionAST addDependenceEdgeForStaticExpression
  ?let @lstring inConstantName
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addEdge !inConstantName !self.mStandaloneFunctionName]
  for (mEffectiveParameterKind *) in self.mArguments do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !typeName]
      end
    case output (expression *) : [expression addDependenceEdgeForStaticExpression !inConstantName !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneFunctionInExpressionAST noteExpressionTypesInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  for (mEffectiveParameterKind *) in self.mArguments do
    switch mEffectiveParameterKind
    case input (*):
    case inputWithType (* @lstring typeName *) :
      if typeName.string != "" then
        [!?ioGraph noteNode !typeName]
      end
    case output (expression *) : [expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
    case outputInput (*) :
    case outputInputSelfVariable (*) :
    end 
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS                                                                                                            
#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @standaloneFunctionInExpressionAST analyzeExpression
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?optionalTargetType:let @omnibusType unused inOptionalTargetType
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !result:@objectIR outFunctionCallReturnedValue
{
#--- Cannot call a function in guard
  if [inRoutineAttributes contains !.isGuard] then
    error self.mStandaloneFunctionName.location : "a routine cannot be called in guard"
  end
#--- Get function name and map containing the function definition
  let routineLLVMName = routineMangledNameFromCall (!"" !self.mStandaloneFunctionName !self.mArguments)
#--- Get called function signature
  let signature = [self.mArguments routineSignature !self.mStandaloneFunctionName.location]
#--- Search function in map
  let requiredFunctionMangledName = @lstring.init {!self.mStandaloneFunctionName.string + signature !self.mStandaloneFunctionName}
#--- Cannot call a function in guard
  [inContext.mRoutineMap searchKey
    !requiredFunctionMangledName
    ?let unused implementedPublic
    ?let formalSignature
    ?let formalReturnTypeProxy # null if no returned value
    ?let implementedModeDictionary
    ?let unused isExported
    ?let unused implementedMode
  ]
#--- Check routine is actually a function
  if [formalReturnTypeProxy isNull] then
    error requiredFunctionMangledName : "this function does not return any value" : outFunctionCallReturnedValue
  else
  #--- Check modes
    let functionLLVMName = checkModeAndReturnsRoutineLLVMName (!implementedModeDictionary !inMode !requiredFunctionMangledName)
  #--- Analyze effective parameters
    var @procCallEffectiveParameterListIR effectiveParameterListIR = §[]
    analyzeEffectiveParameters (
      !self:inSelfType
      !routineAttributes:inRoutineAttributes
      !formal:formalSignature
      !effective: self.mArguments
      !errorLocation:requiredFunctionMangledName.location
      !context:inContext
      !requiredMode:inMode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      !?effectiveIR:effectiveParameterListIR
    )
  #--- New LLVM variable for function call result
    getNewTempValue (![formalReturnTypeProxy type] !?ioTemporaries ?outFunctionCallReturnedValue)
  #--- Code generation
    ioInstructionGenerationList += !@standaloneRoutineCallIR.init {
      !outFunctionCallReturnedValue
      !routineLLVMName
      !functionLLVMName
      !effectiveParameterListIR
    }
  end
}

#-——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
