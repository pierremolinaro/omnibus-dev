#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @externFunctionDeclarationListAST {
  public var @lstring mExternProcedureName
  public var @mode mMode
  public var @lstringlist mAttributeList
  public var @routineFormalArgumentListAST mProcFormalArgumentList
  public var @lstring mReturnTypeName
  public var @lstring mRoutineNameForGeneration
  public var @location mEndOfProcLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $extern$
    <function_header>
      !?ioAST
      ?mode:let @mode mode
      ?name:let procName
      ?attributes:let attributeList
      ?formalArguments:let procFormalArgumentList
    let @lstring returnTypeName
    select
      returnTypeName = ["" here]
    or
      $->$
      <type_definition> !?ioAST ?returnTypeName
    end
    $:$
    $"string"$ ?let llvmName
    ioAST.mExternFunctionListAST +=
      !procName
      !mode
      !attributeList
      !procFormalArgumentList
      !returnTypeName
      !llvmName
      !.here
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externFunctionDeclarationListAST noteTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (* * * mProcFormalArgumentList mReturnTypeName * *) in self do
    for (* * formalArgumentTypeName *) in mProcFormalArgumentList do
      [!?ioGraph noteNode !formalArgumentTypeName]
    end
    if mReturnTypeName.string != "" then
      [!?ioGraph noteNode !mReturnTypeName]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN CONTEXT                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externFunctionDeclarationListAST enterExternProcInContext
  ?!context:@semanticContext ioContext
{
  for externProcedure in self do
    [externProcedure enterExternProcInContext !?context:ioContext]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externFunctionDeclarationListAST-element enterExternProcInContext
  ?!context:@semanticContext ioContext
{
#--- Signature
  routineTypedSignature (!?ioContext.mTypeMap !self.mProcFormalArgumentList ?let signature)
#--- Return type
  [@unifiedTypeMap-entry makeOptionalEntry !?ioContext.mTypeMap !self.mReturnTypeName ?let returnTypeProxy]
#--- Enter in context
  let @routineLLVMNameDict routineLLVMNameDict = [self.mMode routineLLVMDictionaryForFunction !self.mRoutineNameForGeneration]
  let routineMangledName = [signature mangledName !receiverTypeName: "" !functionName: self.mExternProcedureName]
  [!?ioContext.mRoutineMap insertKey
    !routineMangledName
    !true
    !signature
    !returnTypeProxy
    !routineLLVMNameDict
    !false
    !self.mMode
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externFunctionDeclarationListAST externProcedureSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
  for externProc in self do
    [externProc externProcedureSemanticAnalysis
      !context:inContext
      !?temporary:ioTemporaries
      !?intermediateCode:ioIntermediateCodeStruct
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externFunctionDeclarationListAST-element externProcedureSemanticAnalysis
  ?context:let @semanticContext inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct ioIntermediateCodeStruct
{
#--- Analyse formal arguments
  var @routineFormalArgumentListIR formalArguments = {}
  enterFormalArguments (
    !context:inContext
    !self.mProcFormalArgumentList
    !?* # universalMap
    !?formalArguments
    !warningOnUnusedArgs: true
  )
#--- Return type
  let returnType = if self.mReturnTypeName.string == "" then
    @unifiedTypeMap-entry.null
  else
    @unifiedTypeMap-entry.searchKey {!inContext.mTypeMap !self.mReturnTypeName}
  end
#--- Routine name for generation
  [!?ioIntermediateCodeStruct.mExternProcedureMapIR insertKey
    !self.mRoutineNameForGeneration
    !formalArguments
    !returnType
  ]  
  ioIntermediateCodeStruct.mRoutineListIR += !@externRoutineIR.new {
    !self.mRoutineNameForGeneration
    !isRequired:false # Is not root
    !warnsIfUnused:false
    !formalArguments
    !returnType
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @externRoutineIR : @abstractRoutineIR {
  public var @routineFormalArgumentListIR mFormalArgumentListForGeneration
  public var @unifiedTypeMap-entry mReturnType
}

#·······················································································································

override method @externRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "declare"
  if self.mReturnType == .null then
    ioLLVMcode += " void"
  else
      ioLLVMcode += " " + [[self.mReturnType type] llvmTypeName]
  end
  ioLLVMcode += " @" + [self.mRoutineMangledName assemblerRepresentation] + " ("
  for (mFormalArgumentKind mFormalArgumentType mFormalArgumentName) in self.mFormalArgumentListForGeneration
  do
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
   case inputOutput :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
    end
  between
    ioLLVMcode += ", "
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "; declared by extern Omnibus function declaration\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @externProcedureMapIR {
  public var @routineFormalArgumentListIR mFormalArgumentListForGeneration
  public var @unifiedTypeMap-entry mReturnType
  insert insertKey error message "extern procedure %K is already declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externProcedureMapIR llvmPrototypeGeneration  ?!@string unused ioLLVMcode {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @externProcedureMapIR-element llvmPrototypeGeneration  ?!@string ioLLVMcode {
  let procName = llvmNameForFunction (!self.lkey.string)
  ioLLVMcode += "declare"
  if self.mReturnType == .null then
    ioLLVMcode += " void"
  else
      ioLLVMcode += " " + [[self.mReturnType type] llvmTypeName]
  end
  ioLLVMcode += " @" + procName + " ("
  for (mFormalArgumentKind mFormalArgumentType mFormalArgumentName) in self.mFormalArgumentListForGeneration
  do
    switch mFormalArgumentKind
    case input :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " %in." + mFormalArgumentName
    case output :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
   case inputOutput :
      ioLLVMcode += [mFormalArgumentType llvmTypeName] + " * " + llvmNameForLocalVariable (!mFormalArgumentName)
    end
  between
    ioLLVMcode += ", "
  end
  ioLLVMcode += ")" + llvmAttributeFunction () + "; declared by extern Omnibus function declaration\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
