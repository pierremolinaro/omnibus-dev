
setter @instructionListIR appendStoreIndirectVolatileRegister
  ?let @PLMType inTargetVarType
  ?let @string inLLVMName
  ?let @objectIR inSourceValue
{
  self += !@storeIndirectVolatileIR.new {!inTargetVarType !inLLVMName !inSourceValue}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @storeIndirectVolatileIR : @abstractInstructionIR {
  @PLMType mTargetVarType
  @string mLLVMName
  @objectIR mSourceValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @storeIndirectVolatileIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let llvmType = [mTargetVarType llvmTypeName]
  let ptr = "%registerPointer." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex ++
  ioLLVMcode += "  " + ptr + " = inttoptr i32 " + mLLVMName + " to " + llvmType + "*\n"
              + "  store volatile " + llvmType + " " + [mSourceValue llvmName] + ", " + llvmType
              + " * " + ptr + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
