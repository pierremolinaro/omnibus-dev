#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @llvmPrefixOperatorEnumeration {
 case notOp   # not
 case bitWiseComplement   # ~
 case minusOp # -
 case minusOpNoOvf # -%
}

#·······················································································································

getter @llvmPrefixOperatorEnumeration string -> @string {
  switch self
  case notOp   : result = "not"
  case minusOp : result = "-"
  case minusOpNoOvf : result = "-%"
  case bitWiseComplement : result = "~"
  end
}

#·······················································································································

getter @llvmPrefixOperatorEnumeration prefixOperator -> @prefixOperator {
  switch self
  case notOp   : result = .notOp
  case minusOp : result = .minusOp
  case minusOpNoOvf : result = .minusNoOvf
  case bitWiseComplement : result = .bitWiseComplement
  end
}

#·······················································································································

class @llvmPrefixOperatorAST : @abstractDeclarationAST {
  @llvmPrefixOperatorEnumeration mPrefixOperator
  @location mPrefixOperatorLocation
  @lstring mReceiverName
  @lstring mReceiverTypeName
  @llvmGenerationInstructionList mInstructionList
  @lstring mResultTypeName
}

#·······················································································································

override getter @llvmPrefixOperatorAST locationForErrorSignaling -> @location outLocation {
  outLocation = mPrefixOperatorLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc appendPrefixOperatorDeclaration_minus
     ?let @string inOmnibusReceiverTypeName
     ?!@semanticTypePrecedenceGraph ioPrecedenceGraph
{
#--- Operator type
  @llvmGenerationInstructionList llvmInstructionList = {}
  @llvmGenerationInstructionElementList instructionElements = {}
  instructionElements += !.symbol {!name: ["result" nowhere]}
  instructionElements += !.string {!string: " = sub "}
  instructionElements += !.type {!name: ["SELF" nowhere]}
  instructionElements += !.string {!string: " 0, "}
  instructionElements += !.symbol {!name: ["SELF" nowhere]}
  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
  @abstractDeclarationAST declaration = @llvmPrefixOperatorAST.new {
    !.minusOp
    !.nowhere
    !["SELF" nowhere]
    ![inOmnibusReceiverTypeName nowhere]
    !llvmInstructionList
    ![inOmnibusReceiverTypeName nowhere]
  }
  [declaration enterInPrecedenceGraph !?ioPrecedenceGraph]
  declaration = @llvmPrefixOperatorAST.new {
    !.minusOpNoOvf
    !.nowhere
    !["SELF" nowhere]
    ![inOmnibusReceiverTypeName nowhere]
    !llvmInstructionList
    ![inOmnibusReceiverTypeName nowhere]
  }
  [declaration enterInPrecedenceGraph !?ioPrecedenceGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc appendPrefixOperatorDeclaration_bitWiseComplement
     ?let @string inOmnibusReceiverTypeName
     ?!@semanticTypePrecedenceGraph ioPrecedenceGraph
{
#--- Operator type
  @llvmGenerationInstructionList llvmInstructionList = {}
  @llvmGenerationInstructionElementList instructionElements = {}
  instructionElements += !.symbol {!name: ["result" nowhere]}
  instructionElements += !.string {!string: " = xor "}
  instructionElements += !.type {!name: ["SELF" nowhere]}
  instructionElements += !.string {!string: " "}
  instructionElements += !.symbol {!name: ["SELF" nowhere]}
  instructionElements += !.string {!string: ", -1"}
  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
  @abstractDeclarationAST declaration = @llvmPrefixOperatorAST.new {
    !.bitWiseComplement
    !.nowhere
    !["SELF" nowhere]
    ![inOmnibusReceiverTypeName nowhere]
    !llvmInstructionList
    ![inOmnibusReceiverTypeName nowhere]
  }
  [declaration enterInPrecedenceGraph !?ioPrecedenceGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <llvmPrefixOperator> !@llvmPrefixOperatorEnumeration outOperator {
    select
      $not$
      outOperator = .notOp
    or
      $-$
      outOperator = .minusOp
    or
      $-%$
      outOperator = .minusOpNoOvf
    or
      $~$
      outOperator = .bitWiseComplement
    end
  }
  
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $llvm$
    $func$
    let operationLocation = @location.here
    <llvmPrefixOperator> ?let prefixOperator
    $($
    $identifier$ ?let receiverName
    $\$type$ ?let receiverType
    $)$
    $->$
    $\$type$ ?let resultType
    ${$
    <llvm_instruction_list> ?let instructionList
    $}$
    ioAST.mDeclarationListAST += !@llvmPrefixOperatorAST.new {
      !prefixOperator
      !operationLocation
      !receiverName
      !receiverType
      !instructionList
      !resultType
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @llvmPrefixOperatorAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = @lstring.new {![mPrefixOperator string] + "." + mReceiverTypeName !mPrefixOperatorLocation}
  [!?ioGraph addNode !nodeName !self]
  [!?ioGraph addEdge !nodeName !mReceiverTypeName]
  [!?ioGraph addEdge !nodeName !mResultTypeName]
}

#·······················································································································

override getter @llvmPrefixOperatorAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = [mPrefixOperator string] + " " + mReceiverTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @llvmPrefixOperatorAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#--- Check types
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mReceiverTypeName ?let receiverTypeProxy]
  let receiverType = [receiverTypeProxy type]
  [receiverType checkIsNotCompileTimeType !mReceiverTypeName.location]
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mResultTypeName ?let resultTypeProxy]
  let resultType = [resultTypeProxy type]
  [resultType checkIsNotCompileTimeType !mResultTypeName.location]
#--- Enter in infix operator map
  let prefixMangledFunctionName = prefixOperatorFunctionName (!receiverType !mPrefixOperator)
  let key = prefixOperatorMapKey (!receiverType !mPrefixOperator !mPrefixOperatorLocation)
  let definition = @llvmPrefixOperatorUsage.new {
    !prefixMangledFunctionName
    !mReceiverName
    !mInstructionList
  }
  [!?ioContext.mPrefixOperatorMap insertKey !key !receiverType !resultType !definition]
#--- Generation routine
  @assignmentGenerationVarMap varMap = {}
  [!?varMap insertKey !mReceiverName !"%" + mReceiverName]
  @assignmentGenerationVarMap typeMap = {}
  [!?typeMap insertKey !mReceiverName ![receiverType llvmTypeName]]
  [!?typeMap insertKey !["result" nowhere] ![resultType llvmTypeName]]
  @llvmGenerationInstructionList instructionList = {}
  instructionList += !@llvmVarInstruction.new {!["result" nowhere]}
  instructionList += mInstructionList
  [!?instructionList appendReturn !["result" nowhere] !["result" nowhere]]
  @stringlist generatedInstructions = {}
  @allocaList allocaList = {}
  @uint temporaryIndex = 0
  [instructionList generateIRCode !varMap !typeMap !?generatedInstructions !?temporaryIndex !?allocaList]
  let routine = @prefixOperatorRoutineIR.new {
    !.new {!prefixMangledFunctionName !mPrefixOperatorLocation}
    !isRequired: true
    !warnsIfUnused: false
    !receiverType
    !mReceiverName.string
    !resultType
    !generatedInstructions
    !allocaList
  }
  ioRoutineListIR += !routine
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   INFIX OPERATOR MAP
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @llvmPrefixOperatorUsage : @prefixOperatorUsage {
  @string mPrefixMangledFunctionName
  @lstring mReceiverOperandName
  @llvmGenerationInstructionList mInstructionList
}

#·······················································································································

override method @llvmPrefixOperatorUsage generateCode
  ?let @objectIR inReceiverOperand
  ?let @location inOperatorLocation
  ?let @omnibusType inResultType
  ?noPanicCode: let @bool unused inDoNotGeneratePanicCode
  ?safeMode: let @bool unused inSafeMode
  ?!@semanticTemporariesStruct ioTemporaries
  ?!@instructionListIR ioInstructionGenerationList
  !@objectIR outResultValue
{
#--- If reference, load it
  var receiverOperand = inReceiverOperand
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?receiverOperand
  ]  
#--- New LLVM variable for result
  getNewTempValue (!inResultType !?ioTemporaries ?outResultValue)
  @procCallEffectiveParameterListIR argumentList = {}
  argumentList += !.output !receiverOperand
  ioInstructionGenerationList += !@standaloneRoutineCallIR.new {
    !outResultValue
    !.new {!mPrefixMangledFunctionName !inOperatorLocation}
    !mPrefixMangledFunctionName
    !argumentList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @prefixOperatorRoutineIR : @abstractRoutineIR {
  @omnibusType mReceiverType
  @string mReceiverVarName
  @omnibusType mResultType
  @stringlist mGeneratedInstructions
  @allocaList mAllocaList
}

#·······················································································································

override method @prefixOperatorRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "define internal " + [mResultType llvmTypeName] + " @" + [mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + [mReceiverType llvmTypeName] + " %" + mReceiverVarName + ") nounwind {\n"
  [mAllocaList generateAllocaList !?ioLLVMcode]
  for (instruction) in mGeneratedInstructions do
    ioLLVMcode += "  " + instruction + "\n"
  end
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

