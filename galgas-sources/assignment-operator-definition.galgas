#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @llvmAssignmentOperatorDeclarationAST : @abstractDeclarationAST {
  @location mOperatorLocation
  @lstring mTargetVariableName
  @lstring mTargetTypeName
  @genericFormalParameterList mTargetGenericFormalParameterList
  @lstring mSourceVariableName
  @lstring mSourceTypeName
  @genericFormalParameterList mSourceGenericFormalParameterList
  @ctExpressionAST mWhereClause
  @llvmGenerationInstructionList mLLVMInstructionList
}

#·······················································································································

override getter @llvmAssignmentOperatorDeclarationAST locationForErrorSignaling -> @location outLocation {
  outLocation = mOperatorLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#func buildAssignmentOperatorDeclaration ?let @string inTypeName -> @abstractDeclarationAST {
#  @llvmGenerationInstructionList llvmInstructionList = {}
#  llvmInstructionList += !@llvmVarInstruction.new {!["LOADED" nowhere]}
#  @llvmGenerationInstructionElementList instructionElements = {}
#  instructionElements += !.symbol {!name: ["LOADED" nowhere]}
#  instructionElements += !.string {!string: " = load "}
#  instructionElements += !.type {!name: ["SRC" nowhere]}
#  instructionElements += !.string {!string: ", "}
#  instructionElements += !.type {!name: ["SRC" nowhere]}
#  instructionElements += !.string {!string: "* "}
#  instructionElements += !.symbol {!name: ["SRC" nowhere]}
#  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#  instructionElements = {}
#  instructionElements += !.string {!string: "store "}
#  instructionElements += !.type {!name: ["SRC" nowhere]}
#  instructionElements += !.string {!string: " "}
#  instructionElements += !.symbol {!name: ["LOADED" nowhere]}
#  instructionElements += !.string {!string: ", "}
#  instructionElements += !.type {!name: ["TGT" nowhere]}
#  instructionElements += !.string {!string: "* "}
#  instructionElements += !.symbol {!name: ["TGT" nowhere]}
#  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#  result = @llvmAssignmentOperatorDeclarationAST.new {
#    !["" nowhere]
#    !["TGT" nowhere]
#    ![inTypeName nowhere]
#    !{}
#    !["SRC" nowhere]
#    ![inTypeName nowhere]
#    !{}
#    !@ctTrueExpressionAST.new
#    !llvmInstructionList
#  }
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#func buildAssignmentOperatorFrom_ctInt ?let @string inTypeName -> @abstractDeclarationAST {
#  @llvmGenerationInstructionList llvmInstructionList = {}
#  @llvmGenerationInstructionElementList instructionElements = {}
#  instructionElements += !.string {!string: "store "}
#  instructionElements += !.type {!name: ["TGT" nowhere]}
#  instructionElements += !.string {!string: " "}
#  instructionElements += !.symbol {!name: ["SRC" nowhere]}
#  instructionElements += !.string {!string: ", "}
#  instructionElements += !.type {!name: ["TGT" nowhere]}
#  instructionElements += !.string {!string: "* "}
#  instructionElements += !.symbol {!name: ["TGT" nowhere]}
#  llvmInstructionList += !@llvmGenerationInstruction.new {!{instructionElements}}
#  result = @llvmAssignmentOperatorDeclarationAST.new {
#    !["" nowhere]
#    !["TGT" nowhere]
#    ![inTypeName nowhere]
#    !{}
#    !["SRC" nowhere]
#    ![ctIntegerTypeName () nowhere]
#    !{}
#    !@ctTrueExpressionAST.new
#    !llvmInstructionList
#  }
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <llvm_function_header>
    !@lstring outTargetVariableName
    !@lstring outTargetTypeName
    !@genericFormalParameterList outTargetGenericFormalParameterList
  {
    $llvm$
    $func$
    $($
    $identifier$ ?outTargetVariableName
    $\$type$ ?outTargetTypeName
    <generic_formal_arguments> ?outTargetGenericFormalParameterList
    $)$
  }
  
  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    <llvm_function_header> ?let targetVariableName ?let targetTypeName ?let targetGenericFormalParameterList
    let operatorLocation = @location.here
    $=$
    $($
    $identifier$ ?let sourceVariableName
    $\$type$ ?let sourceTypeName
    <generic_formal_arguments> ?let sourceGenericFormalParameterList
    $)$
    <generic_where_clause> ?let whereClause
    ${$
    <llvm_instruction_list> ?let instructionList
    $}$
    ioAST.mDeclarationListAST += !@llvmAssignmentOperatorDeclarationAST.new {
      !operatorLocation
      !targetVariableName
      !targetTypeName
      !targetGenericFormalParameterList
      !sourceVariableName
      !sourceTypeName
      !sourceGenericFormalParameterList
      !whereClause
      !instructionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @llvmAssignmentOperatorDeclarationAST enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  let nodeName = @lstring.new {!mTargetTypeName.string + " = " + mSourceTypeName !mOperatorLocation}
  [!?ioGraph addNode !nodeName !self]
  [!?ioGraph addEdge !nodeName !mTargetTypeName]
  [!?ioGraph addEdge !nodeName !mSourceTypeName]
}

#·······················································································································

override getter @llvmAssignmentOperatorDeclarationAST keyRepresentationForErrorSignaling -> @string outRepresentation {
  outRepresentation = "Assignment " + mTargetTypeName + " = " + mSourceTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!  ENTER IN CONTEXT                                                                                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract class @abstractAssignmentOperatorUsage {
}

#·······················································································································

abstract method @abstractAssignmentOperatorUsage generateCode
    ?!@semanticTemporariesStruct ioTemporaries
    ?!@instructionListIR ioInstructionListIR
    ?!@allocaList ioAllocaList
    ?let @omnibusType inTargetType
    ?let @string inTargetLLVMName
    ?let @objectIR inSourcePossibleReference
    ?let @location inErrorLocation

#·······················································································································

map @assignmentOperatorMap {
  @abstractAssignmentOperatorUsage mOperatorUsage
  insert insertKey error message "the '%K' assignment is already declared in %L"
  search searchKey error message "there is no '%K' assignment"
}

#·······················································································································

func assignmentOperatorKey ?let @omnibusType inTargetType
                           ?let @location inErrorLocation
                           ?let @omnibusType inSourceType -> @lstring {
  result = @lstring.new {
    ![inTargetType omnibusTypeDescriptionName] + " = " + [inSourceType omnibusTypeDescriptionName]
    !inErrorLocation
  }
}

#·······················································································································

override method @llvmAssignmentOperatorDeclarationAST enterInContext
  ?!context:@semanticContext ioContext
  ?!@declarationDecorationList unused ioDecoratedDeclarationList
  ?!@decoratedRegularRoutineList unused ioDecoratedRoutineList
  ?!@routineListIR ioRoutineListIR
  ?!staticlistValues:@staticListInitializationMap unused ioStaticListValueMap
  ?!staticEntityMap:@staticEntityMap unused ioStaticEntityMap
  ?!registerUserAccess:@controlRegisterUserAccesMapAST unused ioControlRegisterUserAccesMapAST
  ?!userDefinedTypes:@userLLVMTypeDefinitionListIR unused ioUserLLVMTypeDefinitionListIR
{
#--- Build formal generic constant parameter map
  @ctCheckMap formalGenericConstantParameterMap = {}
  [mTargetGenericFormalParameterList buildFormalGenericConstantMap !?formalGenericConstantParameterMap]
  [mSourceGenericFormalParameterList buildFormalGenericConstantMap !?formalGenericConstantParameterMap]
#--- Check Where clause
  [mWhereClause checkCompileTimeExpression !formalGenericConstantParameterMap]
#--- Check instruction list
  [!?formalGenericConstantParameterMap insertKey !mTargetVariableName]
  [!?formalGenericConstantParameterMap insertKey !mSourceVariableName]
  [mLLVMInstructionList checkInstructionList !formalGenericConstantParameterMap]
#--- Types
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mTargetTypeName ?let targetTypeProxy]
  let targetType = [targetTypeProxy type]
  [@unifiedTypeMap-proxy makeProxy !?ioContext.mTypeMap !mSourceTypeName ?let sourceTypeProxy]
  let sourceType = [sourceTypeProxy type]
#---
  let key = assignmentOperatorKey (!targetType !mOperatorLocation !sourceType)
  let operatorUsage = @llvmAssignmentOperatorUsage.new {
    !targetType
    !mTargetVariableName
    !mTargetGenericFormalParameterList
    !sourceType
    !mSourceVariableName
    !mSourceGenericFormalParameterList
    !mWhereClause
    !mLLVMInstructionList
  }
  [!?ioContext.mAssignmentOperatorMap insertKey
    !key 
    !operatorUsage
  ]
#--- Generate function if
#       - none type is generic
#       - source type is not a compile time type
  if ([mTargetGenericFormalParameterList length] == 0)
   && ([mSourceGenericFormalParameterList length] == 0)
   && not [sourceType.kind isCompileTimeInteger]
   && not [sourceType.kind isCompileTimeBool] then
    @assignmentGenerationVarMap varMap = {}
    [!?varMap insertKey !mTargetVariableName !"%" + mTargetVariableName]
    [!?varMap insertKey !mSourceVariableName !"%" + mSourceVariableName]
    @assignmentGenerationVarMap typeMap = {}
    [!?typeMap insertKey !mTargetVariableName ![targetType llvmTypeName]]
    [!?typeMap insertKey !mSourceVariableName ![sourceType llvmTypeName]]
    @stringlist generatedInstructions = {}
    @allocaList allocaList = {}
    @uint temporaryIndex = 0
    [mLLVMInstructionList generateIRCode !varMap !typeMap !?generatedInstructions !?temporaryIndex !?allocaList]
    let routine = @assignmentRoutineIR.new {
      !.new {!assignmentOperatorFuncName (!targetType !sourceType) !mOperatorLocation}
      !isRequired: false
      !warnsIfUnused: false
      !targetType
      !mTargetVariableName.string
      !sourceType
      !mSourceVariableName.string
      !generatedInstructions
      !allocaList
    }
    ioRoutineListIR += !routine
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @llvmAssignmentOperatorUsage : @abstractAssignmentOperatorUsage {
  @omnibusType mTargetType
  @lstring mTargetVarName
  @genericFormalParameterList mTargetGenericFormalParameterList
  @omnibusType mSourceTpe
  @lstring mSourceVarName
  @genericFormalParameterList mSourceGenericFormalParameterList
  @ctExpressionAST mWhereClause
  @llvmGenerationInstructionList mInstructionList
}

#·······················································································································

override method @llvmAssignmentOperatorUsage generateCode
    ?!@semanticTemporariesStruct ioTemporaries
    ?!@instructionListIR ioInstructionListIR
    ?!@allocaList ioAllocaList
    ?let @omnibusType inTargetType
    ?let @string inTargetLLVMName
    ?let @objectIR inSourcePossibleReference
    ?let @location unused inErrorLocation
{
  if ([mTargetGenericFormalParameterList length] == 0)
    && ([mSourceGenericFormalParameterList length] == 0)
    && not [[inSourcePossibleReference type].kind isCompileTimeInteger]
    && not [[inSourcePossibleReference type].kind isCompileTimeBool] then
      let llvmRoutineName = assignmentOperatorFuncName (!inTargetType ![inSourcePossibleReference type])
      var s = "call void @" + [llvmRoutineName assemblerRepresentation]
            + " (" + [inTargetType llvmTypeName] + "* " + inTargetLLVMName
            + ", " + [[inSourcePossibleReference type] llvmTypeName] + "* " + [inSourcePossibleReference llvmName] + ")"
      [!?ioInstructionListIR appendInstructionAsFreeString !s !{!llvmRoutineName}]
    else
    [inSourcePossibleReference reference ?type:let sourceType ?llvmName: let srcLLVMName]
    @assignmentGenerationVarMap varMap = {}
    [!?varMap insertKey !mTargetVarName !inTargetLLVMName]
    [!?varMap insertKey !mSourceVarName !srcLLVMName]
    @assignmentGenerationVarMap typeMap = {}
    [!?typeMap insertKey !mTargetVarName ![inTargetType llvmTypeName]]
    [!?typeMap insertKey !mSourceVarName ! [sourceType llvmTypeName]]
    @stringlist generatedInstructions = {}
    [mInstructionList generateIRCode !varMap !typeMap !?generatedInstructions !?ioTemporaries.mTemporaryIndex !?ioAllocaList]
    for (str) in generatedInstructions do
     [!?ioInstructionListIR appendInstructionAsFreeString !str !{}]
    end
  end
}

#·······················································································································

setter @instructionListIR appendAssignmentIR
    ?!@semanticTemporariesStruct ioTemporaries
    ?let @assignmentOperatorMap inAssignmentOperatorMap
    ?!@allocaList ioAllocaList
    ?let @omnibusType inTargetType
    ?let @string inTargetLLVMName
    ?let @objectIR inSourcePossibleReference
    ?let @location inErrorLocation
{
#  if not [inSourcePossibleReference isReference] then
#    let result = checkAssignmentCompatibility (
#      !source:inSourcePossibleReference # loadedResultValue
#      !targetAnnotationType:inTargetType
#      !errorLocation:inErrorLocation
#      !staticTypeAllowed:false
#    )
#   [!?self appendStoreToUniversalReference !inTargetLLVMName !inTargetType !result]
#  else
    let key = assignmentOperatorKey (!inTargetType !inErrorLocation ![inSourcePossibleReference type])
#    let key = @lstring.new {
#     !inTargetType.omnibusTypeDescriptionName + " = " + [inSourcePossibleReference type].omnibusTypeDescriptionName
#     !inErrorLocation
#    }
    [inAssignmentOperatorMap searchKey !key ?let operatorUsage]
    @instructionListIR instructions = {}
    [operatorUsage generateCode
      !?ioTemporaries
      !?instructions
      !?ioAllocaList
      !inTargetType
      !inTargetLLVMName
      !inSourcePossibleReference
      !inErrorLocation
    ]
    self += instructions
#  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @assignmentRoutineIR : @abstractRoutineIR {
  @omnibusType mTargetType
  @string mTargetVarName
  @omnibusType mSourceType
  @string mSourceVarName
  @stringlist mGeneratedInstructions
  @allocaList mAllocaList
}

#·······················································································································

override method @assignmentRoutineIR llvmCodeGeneration 
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  ioLLVMcode += "define internal void @" + [mRoutineMangledName assemblerRepresentation]
  ioLLVMcode += " (" + [mTargetType llvmTypeName] + "* %" + mTargetVarName
             + ", " + [mSourceType llvmTypeName] + "* %" + mSourceVarName + ") nounwind {\n"
  [mAllocaList generateAllocaList !?ioLLVMcode]
  for (instruction) in mGeneratedInstructions do
    ioLLVMcode += "  " + instruction + "\n"
  end
  ioLLVMcode += "  ret void\n"
  ioLLVMcode += "}\n\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @simpleCopyAssignmentOperatorUsage : @abstractAssignmentOperatorUsage {
}

#·······················································································································

override method @simpleCopyAssignmentOperatorUsage generateCode
    ?!@semanticTemporariesStruct ioTemporaries
    ?!@instructionListIR ioInstructionListIR
    ?!@allocaList unused ioAllocaList
    ?let @omnibusType inTargetType
    ?let @string inTargetLLVMName
    ?let @objectIR inSourcePossibleReference
    ?let @location unused inErrorLocation
{
#--- If source is a reference, load value
  @objectIR sourceValue = inSourcePossibleReference
  if [inSourcePossibleReference isReference] then
    getNewTempValue (!inTargetType !?ioTemporaries ?sourceValue)
    let s = [sourceValue llvmName] + " = load " + [inTargetType llvmTypeName] + ", "
          + [inTargetType llvmTypeName] + "* " + [inSourcePossibleReference llvmName]
    [!?ioInstructionListIR appendInstructionAsFreeString !s !{}]
  end
#--- Perfom store
  let s = "store " + [inTargetType llvmTypeName] + " " + [sourceValue llvmName] 
        + ", " + [inTargetType llvmTypeName] + "* " + inTargetLLVMName
  [!?ioInstructionListIR appendInstructionAsFreeString !s !{}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
