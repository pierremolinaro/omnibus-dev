#—————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardedCommandAST {
  case boolean (@bool isExitCommand # if false, it is an "exit" command
                @expressionAST expression
                @location endOfExpression)

  case boolAndSync (@bool isExitCommand # if false, it is an "exit" command
                    @expressionAST expression
                    @bool warnsOnStaticExpression
                    @location endOfExpression
                    @lbool usesSelf
                    @lstringlist nameList
                    @effectiveArgumentListAST effectiveParameterListAST)
}

#·······················································································································

list @syncInstructionBranchListAST {
  public var @guardedCommandAST mGuardedCommand
  public var @instructionListAST mInstructionList
  public var @location mEndOfBranch
}

#·······················································································································

class @syncInstructionAST : @instructionAST {
  public var @syncInstructionBranchListAST mBranchList
  public var @location mEndOf_on_instruction
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <guarded_command> ?!@ast ioAST ?let @bool inIsExitCommand !@guardedCommandAST outGuardedCommand {
    let endOfExp = @location.here
    $event$
    let @lbool usesSelf
    select
      usesSelf = @{!false !.here}
    or
      $self$
      usesSelf = @{!true !.here}
      $.$
    end
    var @lstringlist nameList = @[]
    repeat
      $identifier$ ?let name
      nameList += !name
    while
      $.$
    end
    <effective_parameters> !?ioAST ?let effectiveParameterList ?*
    outGuardedCommand = .boolAndSync {
      !isExitCommand:inIsExitCommand
      !expression:@literalBooleanInExpressionAST {!true}
      !warnsOnStaticExpression:false
      !endOfExpression:endOfExp
      !usesSelf:usesSelf
      !nameList:nameList
      !effectiveParameterListAST:effectiveParameterList
    }
  }
  
  #·····················································································································

  rule <guarded_command> ?!@ast ioAST ?let @bool inIsExitCommand !@guardedCommandAST outGuardedCommand {
    <expression> !?ioAST ?let expression
    let endOfExp = @location.here
    select
      outGuardedCommand = .boolean {
        !isExitCommand:inIsExitCommand
        !expression:expression
        !endOfExpression:endOfExp
      }
    or
      $event$
      let @lbool usesSelf
      select
        usesSelf = @{!false !.here}
      or
        $self$
        usesSelf = @{!true !.here}
        $.$
      end
      var @lstringlist nameList = @[]
      repeat
        $identifier$ ?let name
        nameList += !name
      while
        $.$
      end
      <effective_parameters> !?ioAST ?let effectiveParameterList ?*
      outGuardedCommand = .boolAndSync {
        !isExitCommand:inIsExitCommand
        !expression:expression
        !warnsOnStaticExpression: true
        !endOfExpression:endOfExp
        !usesSelf:usesSelf
        !nameList:nameList
        !effectiveParameterListAST:effectiveParameterList
      }
    end
  }

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList {
    $sync$
    ${$
    let startLocation = @location.here
    var @syncInstructionBranchListAST instructionBranchList = @[]
    repeat
    while
      $when$
      <guarded_command> !?ioAST !true ?let @guardedCommandAST guardedCommand
      $:$
      <instructionList> !?ioAST ?let instructionList
      instructionBranchList += !guardedCommand !instructionList !.here
#    while
#      $until$
#      <guarded_command> !?ioAST !true ?let @guardedCommandAST guardedCommand
#      $:$
#      <instructionList> !?ioAST ?let instructionList
#      instructionBranchList += !guardedCommand !instructionList !.here
    end
    $}$
    ioInstructionList += !@syncInstructionAST {!startLocation !instructionBranchList !.here}
  }
  
  #·····················································································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  for (* instructionList *) in self.mBranchList do
    [instructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#-------------------- Guards
  var @guardedCommandIRList guardedCommandIRList = @[]
  for (guardedCommand * *) in self.mBranchList do
    switch guardedCommand
    case boolean (isContinue expression endOfExpression) :
      var @instructionListIR guardInstructionGenerationList = @[]
      [expression analyzeExpression
        !self:inSelfType
        !routineAttributes: inRoutineAttributes | .isGuard
        !optionalTargetType:voidType ()
        !context:inContext
        !mode:inMode
        !?temporary:ioTemporaries
        !?staticEntityMap:ioStaticEntityMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:guardInstructionGenerationList
        ?result:var @objectIR expressionResult
      ]
      [!?guardInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?expressionResult]
      [inContext.mImplicitConversionToBooleanMap generateConvertToBooleanCode
        !expressionResult
        !endOfExpression
        !?ioTemporaries
        !?guardInstructionGenerationList
        !?alloca: ioAllocaList
        ?let @implicitBooleanConversionResult booleanResult
      ]
      switch booleanResult
      case compileTime (*) :
         warning endOfExpression : "guarded expression is a compile time value"
      case llvmVariable (*) :
      end
      guardedCommandIRList += !.booleanGuard {
        !isExitCommand:isContinue
        !instructionGenerationList:guardInstructionGenerationList
        !boolGuardBoolLLVMName: [booleanResult llvmName]
      }
    case boolAndSync (isContinue exp warnsOnStaticExpression endOfExp usesSelf nameList parameterList) :
      var @instructionListIR boolExpInstructionGenerationList = @[]
    #--- Analyze guard boolean expression
      [exp analyzeExpression
        !self:inSelfType
        !routineAttributes:.isGuard
        !optionalTargetType:voidType ()
        !context:inContext
        !mode:inMode
        !?temporary:ioTemporaries
        !?staticEntityMap:ioStaticEntityMap
        !?variableMap:ioUniversalMap
        !?alloca:ioAllocaList
        !?instructionListIR:boolExpInstructionGenerationList
        ?result:@objectIR expressionResult
      ]
      [!?boolExpInstructionGenerationList appendLoadWhenReference !?ioTemporaries !?expressionResult]
      [inContext.mImplicitConversionToBooleanMap generateConvertToBooleanCode
        !expressionResult
        !endOfExp
        !?ioTemporaries
        !?boolExpInstructionGenerationList
        !?alloca: ioAllocaList
        ?let @implicitBooleanConversionResult booleanResult
      ]
      switch booleanResult
      case compileTime (*) :
        if warnsOnStaticExpression then
          warning endOfExp : "guarded expression is static"
        end
      case llvmVariable (*) :
      end
 
#      if [boolExpressionResult omnibusTypeDescriptionName] != boolTypeName () then
#        error endOfExp : "guarded expression should be boolean"
#      elsif warnsOnStaticExpression && [boolExpressionResult isStatic] then
#        warning endOfExp : "guarded expression is static"
#      end
#      [!?boolExpInstructionGenerationList appendLoadWhenReference
#        !?ioTemporaries
#        !?boolExpressionResult
#      ]
    #--- Analyze synchronization
      var @instructionListIR guardInstructionGenerationList = @[]
      let @procCallEffectiveParameterListIR guardEffectiveParameterListIR
      let @lstring guardMangledName
      if usesSelf.bool then # self.p1.p2. … (…)
        if [inSelfType.kind isVoid] then
          error usesSelf : "'self' is not available in this context" : guardEffectiveParameterListIR, guardMangledName
        else
          var propertyList = nameList
          [!?propertyList popLast ?let guardName]
          var @objectIR currentObject = .reference {!type:inSelfType !llvmName:llvmNameForSelf ()}
          for (propertyName) in propertyList do
            handlePropertyAccessInExpression (
              !context: inContext
              !?currentObject
              !propertyName
              !inMode
              !?temporary:ioTemporaries
              !?alloca: ioAllocaList
              !?instructionListIR:ioInstructionGenerationList
            )
          end
          analyzeGuardCall (
            !self:inSelfType
            !routineAttributes:inRoutineAttributes
            !receiver:currentObject
            !guardName:guardName
            !effective:parameterList
            !context:inContext
            !requiredMode:inMode
            !?temporary:ioTemporaries
            !?staticEntityMap:ioStaticEntityMap
            !?variableMap:ioUniversalMap
            !?alloca:ioAllocaList
            !?instructionListIR:guardInstructionGenerationList
            ?effectiveIR:guardEffectiveParameterListIR
            ?guardMangledName: guardMangledName
          )
        end
      elsif [nameList count] == 1 then # Standalone guard: g (…)
        error [nameList mValueAtIndex !0]
        : "Standalone guard are not handled"
        : guardMangledName, guardEffectiveParameterListIR
      else # Global variable method, or driver method: g.h. … (…)
        var propertyList = nameList
        [!?propertyList popFirst ?let globalReceiverName]
        [!?propertyList popLast ?let guardName]
        [ioUniversalMap searchValuedObject
          !globalReceiverName
          !inMode
          !ioTemporaries.mInitializedDriverSet
          ?var currentObjectIR
        ]
        for (propertyName) in propertyList do
          handlePropertyAccessInExpression (
            !context: inContext
            !?currentObjectIR
            !propertyName
            !inMode
            !?temporary:ioTemporaries
            !?alloca: ioAllocaList
            !?instructionListIR:ioInstructionGenerationList
          )
        end
        analyzeGuardCall (
          !self:inSelfType
          !routineAttributes:inRoutineAttributes
          !receiver:currentObjectIR
          !guardName:guardName
          !effective:parameterList
          !context:inContext
          !requiredMode:inMode
          !?temporary:ioTemporaries
          !?staticEntityMap:ioStaticEntityMap
          !?variableMap:ioUniversalMap
          !?alloca:ioAllocaList
          !?instructionListIR:guardInstructionGenerationList
          ?effectiveIR:guardEffectiveParameterListIR
          ?guardMangledName: guardMangledName
        )
      end
      switch booleanResult
      case compileTime (boolValue) :
        if boolValue then
          guardedCommandIRList += !.sync {
            !isExitCommand:isContinue
            !guardMangledName:guardMangledName.string
            !guardInstructionGenerationList:guardInstructionGenerationList
            !effectiveParameterListIR:guardEffectiveParameterListIR
          }
        else
          error guardMangledName : "false guard not handled yet"
        end
      case llvmVariable (llvmName) :
        guardedCommandIRList += !.boolAndSync {
          !isExitCommand:isContinue
          !boolExpInstructionGenerationList:boolExpInstructionGenerationList
          !boolGuardBoolLLVMName:llvmName
          !guardMangledName:guardMangledName.string
          !guardInstructionGenerationList:guardInstructionGenerationList
          !effectiveParameterListIR:guardEffectiveParameterListIR
        }
      end


#      if [boolExpressionResult isLiteralInteger] then
#        [boolExpressionResult literalInteger ?1* ?value:let @bigint value]
#        if value == 1 then
#          guardedCommandIRList += !.sync {
#            !isExitCommand:isContinue
#            !guardMangledName:guardMangledName.string
#            !guardInstructionGenerationList:guardInstructionGenerationList
#            !effectiveParameterListIR:guardEffectiveParameterListIR
#          }
#        else
#          error guardMangledName : "false guard not handled yet"
#        end
#      else
#        guardedCommandIRList += !.boolAndSync {
#          !isExitCommand:isContinue
#          !boolExpInstructionGenerationList:boolExpInstructionGenerationList
#          !boolExpResult:boolExpressionResult
#          !guardMangledName:guardMangledName.string
#          !guardInstructionGenerationList:guardInstructionGenerationList
#          !effectiveParameterListIR:guardEffectiveParameterListIR
#        }
#      end
    end
  end
#-------------------- Instruction lists
  [!?ioUniversalMap openOverrideForSelectBlock]
  var @syncInstructionBranchListIR syncInstructionBranchListIR = @[]
  for (* instructionList endOfBranch) in self.mBranchList, (guardedCommandIR) in guardedCommandIRList do
    var @instructionListIR branchInstructionGenerationList = @[]
    [instructionList analyzeBranchInstructionList
      !self:inSelfType
      !routineAttributes:inRoutineAttributes
      !endOfInstructionList:endOfBranch
      !context:inContext
      !mode:inMode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:branchInstructionGenerationList
    ]
    syncInstructionBranchListIR += !guardedCommandIR !branchInstructionGenerationList
  end
  [!?ioUniversalMap closeOverride !self.mEndOf_on_instruction]
#-------------------- Code generation
  ioInstructionGenerationList += !@syncInstructionIR {!self.mInstructionLocation !syncInstructionBranchListIR}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeGuardCall
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?receiver:let @objectIR inReceiver
  ?guardName:let @lstring inGuardName
  ?effective:let @effectiveArgumentListAST inEffectiveParameterList
  ?context:let @semanticContext inContext
  ?requiredMode:let @mode inRequiredMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
  !effectiveIR:@procCallEffectiveParameterListIR outEffectiveParameterListIR
  !guardMangledName:@lstring outGuardMangledName
{
  let guardMangledName = [inEffectiveParameterList mangledName !receiverTypeName: [inReceiver type].omnibusTypeDescriptionName !functionName: inGuardName]
#  let guardMap = [[inReceiver type] guardMap]
  [inContext.mGuardMap searchKey !guardMangledName ?let isPublic ?let @routineTypedSignature formalSignature ?let guardRoutineUserLLVMName ?*]
#--- Check accessibility
  if not isPublic then
    error inGuardName : "this guard is not public": outGuardMangledName, outEffectiveParameterListIR
  else  
    outGuardMangledName = guardRoutineUserLLVMName
  #--- Analyze effective parameters
    outEffectiveParameterListIR = @[@(.outputInput, inReceiver)]
    analyzeEffectiveParameters (
      !self:inSelfType
      !routineAttributes:inRoutineAttributes
      !formal:formalSignature
      !effective:inEffectiveParameterList
      !errorLocation:inGuardName.location
      !context:inContext
      !requiredMode:inRequiredMode
      !?temporary:ioTemporaries
      !?staticEntityMap:ioStaticEntityMap
      !?variableMap:ioUniversalMap
      !?alloca:ioAllocaList
      !?instructionListIR:ioInstructionGenerationList
      !?effectiveIR:outEffectiveParameterListIR
    )
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION                                                                                                      
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @guardedCommandIR {
  case booleanGuard (@bool isExitCommand # if false, it is an "exit" command
                     @instructionListIR instructionGenerationList
                     @string boolGuardBoolLLVMName)

  case sync        (@bool isExitCommand # if false, it is an "exit" command
                    @string guardMangledName
                    @instructionListIR guardInstructionGenerationList
                    @procCallEffectiveParameterListIR effectiveParameterListIR)

  case boolAndSync (@bool isExitCommand # if false, it is an "exit" command
                    @instructionListIR boolExpInstructionGenerationList
                    @string boolGuardBoolLLVMName
                    @string guardMangledName
                    @instructionListIR guardInstructionGenerationList
                    @procCallEffectiveParameterListIR effectiveParameterListIR)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @syncInstructionBranchListIR {
  public var @guardedCommandIR mGuardedCommand
  public var @instructionListIR mInstructionGenerationList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @guardedCommandIRList {
  public var @guardedCommandIR mGuardedCommand
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

class @syncInstructionIR : @abstractInstructionIR {
  public var @location mSelectInstructionLocation
  public var @syncInstructionBranchListIR mOnInstructionBranchListIR
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  ioGenerationAdds.mUsesGuards = true
  let startLabel = "select." + ioGenerationAdds.mUniqueIndex
  ioGenerationAdds.mUniqueIndex += 1
#---
  ioLLVMcode += "  br label %" + startLabel + ".start\n\n"
  let startLabelName = startLabel + ".start" 
  ioLLVMcode += startLabelName + ":\n"
  let exitLabelName = startLabel + ".exit"
  let selectLabelName = startLabel + ".select"
  let errorLabelName = startLabel + ".error"
  var currentStartBranchLabel = startLabelName
  for branch in self.mOnInstructionBranchListIR do (idx)
    let acceptanceVarName = "%" + startLabel + ".accept." + idx
    let @bool isWhileGuardedCommand
    switch branch.mGuardedCommand
    case booleanGuard (isExitCommand instructionGenerationList boolGuardBoolLLVMName) :
      isWhileGuardedCommand = isExitCommand
      [instructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      let acceptedLabelName = startLabel + "." + idx + ".true"
      let rejectedLabelName = startLabel + "." + idx + ".false"
      ioLLVMcode += "  br i1 " + boolGuardBoolLLVMName + ", label %" + acceptedLabelName + ", label %" + rejectedLabelName + "\n\n"
      ioLLVMcode += acceptedLabelName + ":\n"
      ioLLVMcode += "  call void @accept.guard ()\n"
      ioLLVMcode += "  br label %" + rejectedLabelName + "\n\n"
      ioLLVMcode += rejectedLabelName + ":\n"
      ioLLVMcode += "  " + acceptanceVarName + " = or i1 " + boolGuardBoolLLVMName + ", 0\n"
    case boolAndSync (isExitCommand expInstructionList boolGuardLLVMName guardMangledName guardInstructionList effectiveParameterList) :
      isWhileGuardedCommand = isExitCommand
      [expInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      let testOkLabelName = startLabel + "." + idx + ".boolexp.true"
      let testExitLabelName = startLabel + "." + idx + ".test.exit"
      ioLLVMcode += "  br i1 " + boolGuardLLVMName + ", label %" + testOkLabelName + ", label %" + testExitLabelName + "\n\n"
      ioLLVMcode += testOkLabelName + ":\n"
      [guardInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      let guardAcceptationLabelName = startLabel + "." + idx + ".guard.acceptation"
      ioLLVMcode += "  %" + guardAcceptationLabelName + " = call i1 @" + [guardMangledName assemblerRepresentation]
      ioLLVMcode += " ("
      for (mEffectiveParameterPassingMode mParameter) in effectiveParameterList do
        switch mEffectiveParameterPassingMode
        case input:
          ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
        case output:
          ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
        case outputInput:
          ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
        end
      between
        ioLLVMcode += ", "
      end
      ioLLVMcode += ")\n"
      ioLLVMcode += "  br label %" + testExitLabelName + "\n\n"
      ioLLVMcode += testExitLabelName + ":\n"
      ioLLVMcode += "  " + acceptanceVarName + " = phi i1 "
      ioLLVMcode += "[%" + guardAcceptationLabelName + ", %" + testOkLabelName + "], "
      ioLLVMcode += "[false, %" + currentStartBranchLabel + "]\n"
    case sync (isExitCommand guardMangledName guardInstructionList effectiveParameterList) :
      isWhileGuardedCommand = isExitCommand
      [guardInstructionList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
      ioLLVMcode += "  " + acceptanceVarName + " = call i1 @" + [guardMangledName assemblerRepresentation]
      ioLLVMcode += " ("
      for (mEffectiveParameterPassingMode mParameter) in effectiveParameterList do
        switch mEffectiveParameterPassingMode
        case input:
          ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
        case output:
          ioLLVMcode += [mParameter llvmTypeName] + " " + [mParameter llvmName]
        case outputInput:
          ioLLVMcode += [mParameter llvmTypeName] + " * " + [mParameter llvmName]
        end
      between
        ioLLVMcode += ", "
      end
      ioLLVMcode += ")\n"
    end
    let acceptedLabelName = startLabel + ".accepted." + idx
    let rejectedLabelName = startLabel + ".rejected." + idx
    ioLLVMcode += "  br i1 " + acceptanceVarName + ", label %" + acceptedLabelName + ", label %" + rejectedLabelName + "\n\n"
    ioLLVMcode += acceptedLabelName + ":\n"
    [branch.mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
    ioLLVMcode += "  br label %" + if isWhileGuardedCommand then startLabelName else exitLabelName end + "\n\n"
    ioLLVMcode += rejectedLabelName + ":\n"
    currentStartBranchLabel = rejectedLabelName
  end
  ioLLVMcode += "  %" + selectLabelName + " = call i1 @" + llvmNameForServiceCall (!waitForGuardChangeFunctionName ()) + " ()\n"
  ioLLVMcode += "  br i1 %" + selectLabelName + ", label %" + startLabelName + ", label %" + errorLabelName + "\n\n"
  ioLLVMcode += errorLabelName + ":\n" # Error, all guards are closed
  if [option omnibus_options.noPanicGeneration value] then
    ioLLVMcode += "  br label %" + exitLabelName + "\n\n" # No panic generation, pass instruction
  else
    ioLLVMcode += "  call void @" + [panicRoutineNameForLocationFile (!self.mSelectInstructionLocation) assemblerRepresentation] + " ("
    ioLLVMcode += [inGenerationContext.mPanicLineLLVMType llvmTypeName] + " " + [self.mSelectInstructionLocation endLine] + ", "
    ioLLVMcode += [inGenerationContext.mPanicCodeLLVMType llvmTypeName] + " " + panicCodeForClosedSync () + ")\n"
    ioLLVMcode += "  unreachable\n\n"
  end
  ioLLVMcode += exitLabelName + ":\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @syncInstructionIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint ioMaxBranchOfOnInstructions
{
  let branchCount = [self.mOnInstructionBranchListIR count]
  if ioMaxBranchOfOnInstructions < branchCount then
    ioMaxBranchOfOnInstructions = branchCount
  end
  for branch in self.mOnInstructionBranchListIR do
    [branch.mInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
    switch branch.mGuardedCommand
    case booleanGuard (* instructionGenerationList *) :
      [instructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
    case sync (* guardMangledName guardInstructionGenerationList *) :
      [guardInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
      ioInvokedRoutineSet ++= guardMangledName
    case boolAndSync (* instructionGenerationList * guardMangledName guardInstructionGenerationList *) :
      [instructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
      [guardInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
      ioInvokedRoutineSet ++= guardMangledName
    end
  end
  if not [option omnibus_options.noPanicGeneration value] then
    ioInvokedRoutineSet ++= panicRoutineNameForLocationFile (!self.mSelectInstructionLocation)
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
