
setter @instructionListIR appendGetPropertyReference
  ?let @objectIR inTarget
  ?let @objectIR inSource
  ?let @string inPLMname
  ?let @string inPropertyIndex
{
  self += !@getPropertyReferenceIR.new {!inTarget !inSource !inPLMname !inPropertyIndex}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @getPropertyReferenceIR : @abstractInstructionIR {
  @objectIR mTarget
  @objectIR mSource
  @string mPLMname
  @string mPropertyIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @getPropertyReferenceIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [[[mSource type] kind] llvmTypeName]
  ioLLVMcode += "  " + [mTarget llvmName] + " = getelementptr inbounds "
  ioLLVMcode += llvmType + ", " + llvmType + " * " + [mSource llvmName] + ", i32 0, i32 " + mPropertyIndex
  ioLLVMcode += " ; " + mPLMname + "\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @getPropertyReferenceIR enterAccessibleEntities 
  ?!@accessibleEntities unused ioAccessibleEntities
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
