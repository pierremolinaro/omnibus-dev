#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @instructionListIR appendCopyFromReferences
  ?!@semanticTemporariesStruct ioTemporaries
  ?errorLocation:let @location inErrorLocation
  ?source:let @objectIR inSourcePossibleReference
  ?target:let @LValueRepresentation inTargetReference
{
#---
  if not [inSourcePossibleReference isReference] then
    var loadedResultValue = inSourcePossibleReference
    [!?self appendLoadWhenReference
      !?ioTemporaries
      !?loadedResultValue
    ]
    let result = checkAssignmentCompatibility (
      !source:loadedResultValue
      !targetAnnotationType:[inTargetReference type]
      !errorLocation:inErrorLocation
      !staticTypeAllowed:false
    )
    [!?self appendStoreToUniversalReference !inTargetReference.llvmName !inTargetReference.type !result]
  else # Call a copy routine
    [inSourcePossibleReference reference ?type:let sourceType ?llvmName:let sourceLLVMName]
    if sourceType.plmTypeDescriptionName != inTargetReference.type.plmTypeDescriptionName then
      error inErrorLocation
      : "object of type $" + inTargetReference.type.plmTypeDescriptionName
        + " cannot be assigned from expression of type $" + sourceType.plmTypeDescriptionName
    end
     self += !@copyFromReferencesIR.new {!sourceType !inTargetReference.llvmName !sourceLLVMName}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @copyFromReferencesIR : @abstractInstructionIR {
  @PLMType mType
  @string mTargetLLVMName
  @string mSourceLLVMName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @copyFromReferencesIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds unused ioGenerationAdds
{
  let llvmType = [mType llvmTypeName]
  ioLLVMcode += "  call void @plm.assign."
  ioLLVMcode += [mType.llvmBaseTypeName assemblerRepresentation]
  ioLLVMcode += "."
  ioLLVMcode += [mType.llvmBaseTypeName assemblerRepresentation]
  ioLLVMcode += " (" + llvmType + "* " + mTargetLLVMName + ", " + llvmType + "* " + mSourceLLVMName + ")\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @copyFromReferencesIR enterAccessibleEntities 
  ?!@stringset unused ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
