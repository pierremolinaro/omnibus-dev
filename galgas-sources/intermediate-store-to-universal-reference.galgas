
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

setter @instructionListIR appendStoreToUniversalReference
  ?let @string inLLVMVarName
  ?let @omnibusType inTargetVarType
  ?let @objectIR inSourceValue
{
  self += !@storeToUniversalReferenceIR.new {!inLLVMVarName !inTargetVarType !inSourceValue}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @storeToUniversalReferenceIR : @abstractInstructionIR {
  public var @string mLLVMTargetVarName
  public var @omnibusType mTargetVarType
  public var @objectIR mSourceValue
}

#·······················································································································

override method @storeToUniversalReferenceIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint unused ioMaxBranchOfOnInstructions
{
  switch self.mSourceValue
  case void :
  case null (*) :
  case reference (* *) :
  case llvmNamedValue (* *) :
  case literalInteger  (* *) :
  case llvmStructureValue (* *) :
  case llvmArrayRepeatedDynamicValue (* * value) :
    let llvmAssignRoutineName = assignmentOperatorFuncName (![value type] ![value type])
    ioInvokedRoutineSet += !llvmAssignRoutineName
  case llvmArrayRepeatedStaticValue (4*) :
  case llvmArrayStaticValues (3*) :
  case llvmArrayDynamicValues (* @operandIRList operands) :
    for (value) in operands do
      if not [value isStatic] then
        let llvmAssignRoutineName = assignmentOperatorFuncName (![value type] ![value type])
        ioInvokedRoutineSet += !llvmAssignRoutineName
      end
    end
  case literalString  (* *) :
  case zero (*) :
  end
}

#·······················································································································

override method @storeToUniversalReferenceIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext unused inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let llvmType = [self.mTargetVarType llvmTypeName]
  switch self.mSourceValue
  case void :
    ioLLVMcode += "<< ERROR @storeToUniversalReferenceIR llvmInstructionCode void >>\n"
  case null (*) :
    ioLLVMcode += "  store " +  llvmType + " null, " + llvmType + "* " + self.mLLVMTargetVarName + "\n"
  case reference (* *) :
    ioLLVMcode += "<< ERROR @storeToUniversalReferenceIR llvmInstructionCode reference >>\n"
  case llvmNamedValue (* @string llvmName) :
    ioLLVMcode += "  store " +  llvmType + " " + llvmName + ", " + llvmType + "* " + self.mLLVMTargetVarName + "\n"
  case literalInteger  (* @bigint value) :
    ioLLVMcode += "  store " +  llvmType + " " + value + ", " + llvmType + "* " + self.mLLVMTargetVarName + "\n"
  case llvmStructureValue (* @sortedOperandIRList operands) :
    for (value index) in operands do
      let tempVar = "%temp.addr." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + tempVar + " = getelementptr inbounds " + llvmType + ", "
                 + llvmType + " * " + self.mLLVMTargetVarName + ", i32 0, i32 " + index + "\n"
      let valueType = [value llvmTypeName]
      ioLLVMcode += "  store " +  valueType + " " + [value llvmName] + ", " + valueType + "* " + tempVar + "\n"
    end
  case llvmArrayRepeatedDynamicValue (type size value) :
    let indexVarName = "%index." + ioGenerationAdds.mUniqueIndex
    let nextIndexVarName = "%index.next." + ioGenerationAdds.mUniqueIndex
    let ptrVarName = "%element.ptr." + ioGenerationAdds.mUniqueIndex
    let loopTestName = "%continue.loop." + ioGenerationAdds.mUniqueIndex
    let startLabel = "assign.start." + ioGenerationAdds.mUniqueIndex
    let loopLabel = "assign.loop." + ioGenerationAdds.mUniqueIndex
    let exitLabel = "assign.exit." + ioGenerationAdds.mUniqueIndex
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  br label %" + startLabel + " ;--- Assign static array from repeated dynamic value\n"
    ioLLVMcode += startLabel + ":\n"
    ioLLVMcode += "  br label %" + loopLabel + "\n"
    ioLLVMcode += loopLabel + ":\n"
    ioLLVMcode += "  " + indexVarName + " = phi i32 [0, %" + startLabel + "], [" + nextIndexVarName + ", %" + loopLabel + "]\n"
    ioLLVMcode += "  " + ptrVarName + " = getelementptr inbounds " + [type llvmTypeName] + ", "
               + [type llvmTypeName] + " * " + self.mLLVMTargetVarName + ", i32 0, i32 " + indexVarName + "\n"
    let llvmAssignRoutineName = assignmentOperatorFuncName (![value type] ![value type])
    ioLLVMcode += "  call void @" +[llvmAssignRoutineName assemblerRepresentation]
    ioLLVMcode += " (" + [value llvmTypeName] + "* " + ptrVarName + ", " + [value llvmTypeName] + "* " + [value llvmName] + ")\n"
    ioLLVMcode += "  " + nextIndexVarName + " = add i32 " + indexVarName + ", 1\n"
    ioLLVMcode += "  " + loopTestName + " = icmp ult i32 " + nextIndexVarName + ", " + size + "\n"
    ioLLVMcode += "  br i1 " + loopTestName + ", label %" + loopLabel + ", label %" + exitLabel + "\n"
    ioLLVMcode += exitLabel + ":\n\n"
  case llvmArrayRepeatedStaticValue (type size value *) :
    let indexVarName = "%index." + ioGenerationAdds.mUniqueIndex
    let nextIndexVarName = "%index.next." + ioGenerationAdds.mUniqueIndex
    let ptrVarName = "%element.ptr." + ioGenerationAdds.mUniqueIndex
    let loopTestName = "%continue.loop." + ioGenerationAdds.mUniqueIndex
    let startLabel = "assign.start." + ioGenerationAdds.mUniqueIndex
    let loopLabel = "assign.loop." + ioGenerationAdds.mUniqueIndex
    let exitLabel = "assign.exit." + ioGenerationAdds.mUniqueIndex
    ioGenerationAdds.mUniqueIndex ++
    ioLLVMcode += "  br label %" + startLabel + " ;--- Assign static array from repeated static value\n"
    ioLLVMcode += startLabel + ":\n"
    ioLLVMcode += "  br label %" + loopLabel + "\n"
    ioLLVMcode += loopLabel + ":\n"
    ioLLVMcode += "  " + indexVarName + " = phi i32 [0, %" + startLabel + "], [" + nextIndexVarName + ", %" + loopLabel + "]\n"
    ioLLVMcode += "  " + ptrVarName + " = getelementptr inbounds " + [type llvmTypeName] + ", "
               + [type llvmTypeName] + " * " + self.mLLVMTargetVarName + ", i32 0, i32 " + indexVarName + "\n"
    ioLLVMcode += "  store " + [value llvmTypeName] + " " + [value llvmName] + ", " + [value llvmTypeName] + "* " + ptrVarName + "\n"
    ioLLVMcode += "  " + nextIndexVarName + " = add i32 " + indexVarName + ", 1\n"
    ioLLVMcode += "  " + loopTestName + " = icmp ult i32 " + nextIndexVarName + ", " + size + "\n"
    ioLLVMcode += "  br i1 " + loopTestName + ", label %" + loopLabel + ", label %" + exitLabel + "\n"
    ioLLVMcode += exitLabel + ":\n\n"
  case llvmArrayStaticValues (* @operandIRList operands *) :
    ioLLVMcode += ";--- Assign static array from static value\n"
    for (value) in operands do (index)
      let tempVar = "%temp.addr." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + tempVar + " = getelementptr inbounds " + llvmType + ", "
                 + llvmType + " * " + self.mLLVMTargetVarName + ", i32 0, i32 " + index + "\n"
      let valueType = [value llvmTypeName]
      ioLLVMcode += "  store " +  valueType + " " + [value llvmName] + ", " + valueType + "* " + tempVar + "\n"
    end
  case llvmArrayDynamicValues (* @operandIRList operands) :
    ioLLVMcode += ";--- Assign static array from dynamic values\n"
    for (value) in operands do (index)
      let tempVar = "%temp.addr." + ioGenerationAdds.mUniqueIndex
      ioGenerationAdds.mUniqueIndex ++
      ioLLVMcode += "  " + tempVar + " = getelementptr inbounds " + llvmType + ", "
                 + llvmType + " * " + self.mLLVMTargetVarName + ", i32 0, i32 " + index + "\n"
      let valueType = [value llvmTypeName]
      if [value isStatic] then
        ioLLVMcode += "  store " +  valueType + " " + [value llvmName] + ", " + valueType + "* " + tempVar + "\n"
      else
        let llvmAssignRoutineName = assignmentOperatorFuncName (![value type] ![value type])
        ioLLVMcode += "  call void @" + [llvmAssignRoutineName assemblerRepresentation]
        ioLLVMcode += " (" + valueType + "* " + tempVar + ", " + valueType + "* " + [value llvmName] + ")\n"
      end
    end
  case literalString  (* *) :
  case zero (*) :
    ioLLVMcode += "  store " +  llvmType + " " + [self.mSourceValue llvmName] + ", " + llvmType + "* " + self.mLLVMTargetVarName + "\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
