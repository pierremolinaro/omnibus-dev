#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @enumerationDeclaration : @abstractDeclaration {
  @lstring mEnumerationName
#  @lstringlist mAttributeList
  @lstringlist mCaseNameList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @enumerationDeclaration location -> @location outLocation {
  outLocation = mEnumerationName.location
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                              *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <declaration> ?!@ast ioAST {
    $enum$
    $typeName$ ?let enumName
#    @lstringlist attributeList = {}
#    repeat
#    while
#      $attribute$ ?let attribute
#      attributeList += !attribute
#    end 
    ${$
    @lstringlist enumCaseList = {}
    repeat
      $case$
      $identifier$ ?let constantName
      enumCaseList += !constantName
    while
    end
    $}$
    ioAST.mDeclarationList += !@enumerationDeclaration.new {
      !enumName
#      !attributeList
      !enumCaseList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  PRECEDENCE GRAPH                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration enterInPrecedenceGraph
  ?!@semanticTypePrecedenceGraph ioGraph
{
  [!?ioGraph addNode !mEnumerationName !self]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @enumerationDeclaration keyRepresentation -> @string outRepresentation {
  outRepresentation = "enum " + mEnumerationName 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  ENTER IN CONTEXT                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @enumConstantMap {
  @uint mIndex
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "there is no '%K' constant"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration enterInContext
  ?procedureDeclarationList:let @procedureDeclarationListAST unused inProcedureListAST
  ?extensionList:let @extensionDeclarationListAST unused inExtensionDeclarationListAST
  ?!context:@semanticContext ioContext
  ?!staticStringMap:@staticStringMap unused ioGlobalLiteralStringMap
{
#---
  var copiable = true
#  for (s) in mAttributeList do
#    if s.string == "unique" then
#      if not copiable then
#        error s : "duplicated attribute"
#      end
#      copiable = false
#    end
#  end
  @enumConstantMap enumConstantMap = {}
  @typedConstantMap constructorMap = {}
  for (cst) in mCaseNameList do
    let idx = [enumConstantMap count]
    [!?enumConstantMap insertKey !cst !idx]
    [!?constructorMap insertKey !cst !.literalInteger {!value:[idx bigint]}]
  end
  [!?ioContext.mTypeMap insertKey
    !lkey:mEnumerationName
    !kind:.enumeration {!constantMap:enumConstantMap}
    !typedConstantMap:constructorMap
    !procedureMap:{} # Procedure map
    !copiable:copiable
    !equatable:true
    !comparable:true
    !enumerationType:.null # Not enumerable
  ]
#--- Infix operators
  enterEnumerationOperators (
    !integerTypeName:mEnumerationName
    !?context:ioContext
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterEnumerationOperators
  ?integerTypeName:@lstring inEnumerationTypeName
  ?!context:@semanticContext ioContext
{
  let key = combineTypeNamesForInfixOperator (!inEnumerationTypeName.string !inEnumerationTypeName.string)
  [!?ioContext.mEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_eq}
  ]
  [!?ioContext.mNonEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ne}
  ]
  [!?ioContext.mStrictInfOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ult}
  ]
  [!?ioContext.mInfEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ule}
  ]
  [!?ioContext.mStrictSupOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_ugt}
  ]
  [!?ioContext.mSupEqualOperatorMap insertKey
    !key
    !ioContext.mBooleanType
    !@infixObjectObjectOperatorDescription.new {!.icmp_uge}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTIC ANALYSIS                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration initAnalysis ?!context:@semanticContext unused ioContext { }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @enumerationDeclaration semanticAnalysis
  ?extensionList:let @extensionDeclarationListAST unused inExtensionDeclarationListAST
  ?context:let @semanticContext unused inContext
  ?!temporary:@semanticTemporariesStruct unused ioTemporaries
  ?!intermediateCode:@intermediateCodeStruct unused ioIntermediateCodeStruct
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

