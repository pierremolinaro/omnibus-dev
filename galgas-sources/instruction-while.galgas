#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @whileInstructionAST : @instructionAST {
  @expressionAST m_while_Expression
  @location mEndOf_test_expression
  @instructionListAST mWhileInstructionList
  @location mEndOf_while_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension omnibus_syntax {

  #·····················································································································

  rule <instruction> ?!@ast ioAST ?!@instructionListAST ioInstructionList  {
    $while$
    let instructionLocation = @location.here
    <expression> !?ioAST ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    ${$
    <instructionList> !?ioAST  ?let instructionList
    let endOfInstruction = @location.here
    $}$
    ioInstructionList += !@whileInstructionAST.new {
      !instructionLocation
      !testExpression
      !testExpressionEndLocation
      !instructionList
      !endOfInstruction
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mWhileInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [m_while_Expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionAST instructionSemanticAnalysis
  ?self:let @omnibusType inSelfType
  ?routineAttributes:let @routineAttributes inRoutineAttributes
  ?context:let @semanticContext inContext
  ?mode:let @mode inMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticEntityMap:@staticEntityMap ioStaticEntityMap
  ?!variableMap:@universalValuedObjectMap ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  @instructionListIR testInstructionGenerationList = {}
  [m_while_Expression analyzeExpression
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:testInstructionGenerationList
    ?result:@objectIR testValue
  ]
  [!?testInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !?testValue
  ]  
#--- Check result is allowed for condition
  [inContext.mImplicitConversionToBooleanMap generateConvertToBooleanCode
    !testValue
    !mEndOf_test_expression
    !?ioTemporaries
    !?testInstructionGenerationList
    !?alloca: ioAllocaList
    ?let booleanResult
  ]
  switch booleanResult 
  case compileTime (*) :
    error mEndOf_test_expression : "test expression type should not be a compile time expression"
  case llvmVariable (*) :
  end

#--- Check inferred type
#  if [testValue type].kind != .boolean then
#    error mEndOf_test_expression : "test expression type is '" + [testValue omnibusTypeDescriptionName] + "', it should be boolean"
#  elsif [testValue isStatic] then
#    error mEndOf_test_expression : "test expression type should not be static"
#  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [!?ioUniversalMap openOverrideForRepeatBlock]
  [mWhileInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !routineAttributes:inRoutineAttributes
    !endOfInstructionList:mEndOf_while_instruction
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaries
    !?staticEntityMap:ioStaticEntityMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
  ]
  [!?ioUniversalMap closeOverride !mEndOf_while_instruction]
#--- Code generation
  ioInstructionGenerationList += !@whileInstructionIR.new {
    ![mEndOf_test_expression locationIndex]
    !testInstructionGenerationList
    ![booleanResult llvmName]
    !instructionGenerationList
 }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @whileInstructionIR : @abstractInstructionIR {
  @uint mLabelIndex
  @instructionListIR mTestInstructionGenerationList
  @string m_while_llvmName
  @instructionListIR mInstructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let labelTest = "while." + mLabelIndex + ".test"
  let labelLoop = "while." + mLabelIndex + ".loop"
  let labelEnd  = "while." + mLabelIndex + ".end"
  ioLLVMcode += "  br label %" + labelTest + "\n\n"
  ioLLVMcode += labelTest + ":\n"
  [mTestInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br i1 " + m_while_llvmName + ", label %" + labelLoop + ", label %" + labelEnd + "\n\n"
  ioLLVMcode += labelLoop + ":\n"
  [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelTest + "\n\n"
  ioLLVMcode += labelEnd + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionIR enterAccessibleEntities
  ?!@stringset ioInvokedRoutineSet
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mTestInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
  [mInstructionGenerationList enterAccessibleEntities !?ioInvokedRoutineSet !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
