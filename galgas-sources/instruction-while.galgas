#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @whileInstructionAST : @instructionAST {
  @expressionAST mTestExpression
  @location mEndOf_test_expression
  @instructionListAST mWhileInstructionList
  @location mEndOf_while_instruction
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap ioLabelMap {
    $while$
    @lstring whileLabel
    select
      whileLabel = .new {!"" !.here}
    or
      $attribute$ ?whileLabel
      [!?ioLabelMap insertKey !whileLabel]
    end
    <expression> ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    $do$
    <instructionList> ?let instructionList  !?ioLabelMap
    let endOfInstruction = @location.here
    $end$
    @lstring endLabel
    select
      endLabel = .new {!"" !.here}
    or
      $attribute$ ?endLabel
    end
    if whileLabel.string != endLabel.string then
      error endLabel : "'end' label does not match 'while' label, it should be "
         + (if whileLabel.string != "" then "@" + whileLabel.string else "empty" end)
    end 
    ioInstructionList += !@whileInstructionAST.new {
      !testExpression
      !testExpressionEndLocation
      !instructionList
      !endOfInstruction
    }
  }
  
  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @whileInstructionAST analyze
  ?routineNameForInvocationGraph:let @lstring inRoutineNameForInvocationGraph
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowException:let @bool inAllowExceptions
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  @instructionListIR testInstructionGenerationList = {}
  [mTestExpression analyzeExpression
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !optionalReceiverType:inReceiverType
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:testInstructionGenerationList
    ?type:let testExpressionType
    ?result:@operandIR testValueName
  ]
#--- Check inferred type
  if [testExpressionType kind] != .boolean then
    error mEndOf_test_expression : "test expression type is '" + [testExpressionType key] + "', it should be boolean"
  end
  if [testValueName isStatic] then
    error mEndOf_test_expression : "test expression type should not be static"
  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [!?ioVariableMap openOverrideForRepeatBlock]
  [mWhileInstructionList analyzeBranchInstructionList
    !routineNameForInvocationGraph:inRoutineNameForInvocationGraph
    !endOfInstructionList:mEndOf_while_instruction
    !optionalReceiverType:inReceiverType
    !context:inContext
    !modes:inModeSet
    !allowException:inAllowExceptions
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:instructionGenerationList
  ]
  [!?ioVariableMap closeOverride !mEndOf_while_instruction]
#--- Code generation
  ioInstructionGenerationList += !@whileInstructionIR.new {
    ![mEndOf_test_expression locationIndex]
    !testInstructionGenerationList
    !testValueName
    !instructionGenerationList
 }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @whileInstructionIR : @abstractInstructionIR {
  @uint mLabelIndex
  @instructionListIR mTestInstructionGenerationList
  @operandIR mTestExpression
  @instructionListIR mInstructionGenerationList
}

#----------------------------------------------------------------------------------------------------------------------*

override method @whileInstructionIR llvmInstructionCode
  ?!@string ioCode
  ?!@stringset ioIntrinsicsDeclarationSet
{
  ioCode += ";--- while (" + mTestExpression + ") {\n"
  let labelTest = "while." + mLabelIndex + ".test"
  let labelLoop = "while." + mLabelIndex + ".loop"
  let labelEnd  = "while." + mLabelIndex + ".end"
  ioCode += "  br label %" + labelTest + "\n\n"
  ioCode += labelTest + ":\n"
  [mTestInstructionGenerationList instructionListLLVMCode !?ioCode !?ioIntrinsicsDeclarationSet]
  ioCode += "  br i1 " + mTestExpression + ", label %" + labelLoop + ", label %" + labelEnd + "\n\n"
  ioCode += labelLoop + ":\n"
  [mInstructionGenerationList instructionListLLVMCode !?ioCode !?ioIntrinsicsDeclarationSet]
  ioCode += "  br label %" + labelTest + "\n\n"
  ioCode += labelEnd + ":\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @whileInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTestInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
#  [mTestExpression enterAccessibleEntities !?ioAccessibleEntities]
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
