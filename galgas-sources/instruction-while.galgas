#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @whileInstructionAST : @instructionAST {
  @expressionAST m_while_Expression
  @location mEndOf_test_expression
  @instructionListAST mWhileInstructionList
  @location mEndOf_while_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension plm_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList  {
    $loop$
    let instructionLocation = @location.here
    $while$
    <expression> ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    ${$
    <instructionList> ?let instructionList
    let endOfInstruction = @location.here
    $}$
    ioInstructionList += !@whileInstructionAST.new {
      !instructionLocation
      !testExpression
      !testExpressionEndLocation
      !instructionList
      !endOfInstruction
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mWhileInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [m_while_Expression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionAST analyze
  ?self:let @PLMType inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?mode:let @mode inCurrentMode
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@universalValuedObjectMapForContext ioUniversalMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  @instructionListIR testInstructionGenerationList = {}
  [m_while_Expression analyzeExpression
    !self:inSelfType
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:voidType ()
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:testInstructionGenerationList
    ?result:let @objectIR testValuePossibleReference
  ]
  [!?ioInstructionGenerationList appendLoadWhenReference
    !?ioTemporaries
    !testValuePossibleReference
    ?let testValue
  ]  
#--- Check inferred type
  if [[testValue type] mKind] != .boolean then
    error mEndOf_test_expression : "test expression type is '" + [testValue plmTypeName] + "', it should be boolean"
  elsif [testValue isStatic] then
    error mEndOf_test_expression : "test expression type should not be static"
  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [!?ioUniversalMap openOverrideForRepeatBlock]
#  [!?ioVariableMap openOverrideForRepeatBlock]
  [mWhileInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !propertiesAreMutable:inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !endOfInstructionList:mEndOf_while_instruction
    !context:inContext
    !mode:inCurrentMode
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
#    !?variableMap:ioVariableMap
    !?variableMap:ioUniversalMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
  ]
  [!?ioUniversalMap closeOverride !mEndOf_while_instruction]
#  [!?ioVariableMap closeOverride !mEndOf_while_instruction]
#--- Code generation
  ioInstructionGenerationList += !@whileInstructionIR.new {
    ![mEndOf_test_expression locationIndex]
    !testInstructionGenerationList
    !testValue
    !instructionGenerationList
 }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @whileInstructionIR : @abstractInstructionIR {
  @uint mLabelIndex
  @instructionListIR mTestInstructionGenerationList
  @objectIR m_while_Expression
  @instructionListIR mInstructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let labelTest = "while." + mLabelIndex + ".test"
  let labelLoop = "while." + mLabelIndex + ".loop"
  let labelEnd  = "while." + mLabelIndex + ".end"
  ioLLVMcode += "  br label %" + labelTest + "\n\n"
  ioLLVMcode += labelTest + ":\n"
  [mTestInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br i1 " + [m_while_Expression llvmName] + ", label %" + labelLoop + ", label %" + labelEnd + "\n\n"
  ioLLVMcode += labelLoop + ":\n"
  [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelTest + "\n\n"
  ioLLVMcode += labelEnd + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mTestInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
