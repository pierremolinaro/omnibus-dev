#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  AST                                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @whileInstructionAST : @instructionAST {
  @expressionAST mTestExpression
  @location mEndOf_test_expression
  @instructionListAST mWhileInstructionList
  @location mEndOf_while_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SYNTAX                                                                                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension common_syntax {

  #·····················································································································

  rule <instruction> ?!@instructionListAST ioInstructionList ?!@labelMap ioLabelMap {
    $do$
    let instructionLocation = @location.here
    $while$
    @lstring whileLabel
    select
      whileLabel = .new {!"" !.here}
    or
      $attribute$ ?whileLabel
      [!?ioLabelMap insertKey !whileLabel]
    end
    <expression> ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    ${$
    <instructionList> ?let instructionList  !?ioLabelMap
    let endOfInstruction = @location.here
    $}$
    @lstring endLabel
    select
      endLabel = .new {!"" !.here}
    or
      $attribute$ ?endLabel
    end
    if whileLabel.string != endLabel.string then
      error endLabel : "'end' label does not match 'while' label, it should be "
         + (if whileLabel.string != "" then "@" + whileLabel.string else "empty" end)
    end 
    ioInstructionList += !instructionLocation !@whileInstructionAST.new {
      !testExpression
      !testExpressionEndLocation
      !instructionList
      !endOfInstruction
    }
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  NOTE TYPES                                                                                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionAST noteInstructionTypesInPrecedenceGraph ?!@semanticTypePrecedenceGraph ioGraph {
  [mWhileInstructionList noteInstructionListTypesInPrecedenceGraph !?ioGraph]
  [mTestExpression noteExpressionTypesInPrecedenceGraph !?ioGraph]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  SEMANTICS                                                                                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionAST analyze
  ?self:let @unifiedTypeMap-proxy inSelfType
  ?propertiesAreMutable:let @bool inRoutineCanMutateProperties
  ?directAccessToPropertiesAllowed:let @bool inDirectAccessToPropertiesAllowed
  ?routineNameForInvocationGraph:let @lstring inCallerNameForInvocationGraph
  ?context:let @semanticContext inContext
  ?modes:let @stringset inModeSet
  ?allowPanic:let @bool inAllowPanic
  ?!temporary:@semanticTemporariesStruct ioTemporaries
  ?!staticStringMap:@staticStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!localVariableMap:@localVariableMap ioLocalVariableMap
  ?!namedObjectMap:@namedObjectMap ioNamedObjectMap
  ?!alloca:@allocaList ioAllocaList
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  @instructionListIR testInstructionGenerationList = {}
  [mTestExpression analyzeExpression
    !self:inSelfType
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !inGuard:false
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !optionalTargetType:.null
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?localVariableMap: ioLocalVariableMap
    !?namedObjectMap: ioNamedObjectMap
    !?alloca:ioAllocaList
    !?instructionListIR:testInstructionGenerationList
    ?result:@valueIR testValue
  ]
#--- Check inferred type
  if [testValue kind] != .boolean then
    error mEndOf_test_expression : "test expression type is '" + [testValue key] + "', it should be boolean"
  end
  if [testValue isStatic] then
    error mEndOf_test_expression : "test expression type should not be static"
  end
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [!?ioVariableMap openOverrideForRepeatBlock]
  [mWhileInstructionList analyzeBranchInstructionList
    !self:inSelfType
    !propertiesAreMutable:inRoutineCanMutateProperties
    !directAccessToPropertiesAllowed:inDirectAccessToPropertiesAllowed
    !routineNameForInvocationGraph:inCallerNameForInvocationGraph
    !endOfInstructionList:mEndOf_while_instruction
    !context:inContext
    !modes:inModeSet
    !allowPanic:inAllowPanic
    !?temporary:ioTemporaries
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?localVariableMap: ioLocalVariableMap
    !?namedObjectMap: ioNamedObjectMap
    !?alloca:ioAllocaList
    !?instructionListIR:instructionGenerationList
  ]
  [!?ioVariableMap closeOverride !mEndOf_while_instruction]
#--- Code generation
  ioInstructionGenerationList += !@whileInstructionIR.new {
    ![mEndOf_test_expression locationIndex]
    !testInstructionGenerationList
    !testValue
    !instructionGenerationList
 }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  CODE GENERATION                                                                                                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @whileInstructionIR : @abstractInstructionIR {
  @uint mLabelIndex
  @instructionListIR mTestInstructionGenerationList
  @valueIR mTestExpression
  @instructionListIR mInstructionGenerationList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionIR llvmInstructionCode
  ?!@string ioLLVMcode
  ?let @generationContext inGenerationContext
  ?!@generationAdds ioGenerationAdds
{
  let labelTest = "while." + mLabelIndex + ".test"
  let labelLoop = "while." + mLabelIndex + ".loop"
  let labelEnd  = "while." + mLabelIndex + ".end"
  ioLLVMcode += "  br label %" + labelTest + "\n\n"
  ioLLVMcode += labelTest + ":\n"
  [mTestInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br i1 " + [mTestExpression llvmName] + ", label %" + labelLoop + ", label %" + labelEnd + "\n\n"
  ioLLVMcode += labelLoop + ":\n"
  [mInstructionGenerationList instructionListLLVMCode !?ioLLVMcode !inGenerationContext !?ioGenerationAdds]
  ioLLVMcode += "  br label %" + labelTest + "\n\n"
  ioLLVMcode += labelEnd + ":\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @whileInstructionIR enterAccessibleEntities
  ?!@accessibleEntities ioAccessibleEntities
  ?!@uint ioMaxBranchOfOnInstructions
{
  [mTestInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities !?ioMaxBranchOfOnInstructions]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
