#----------------------------------------------------------------------------------------------------------------------*
#  AST                                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

class @whileInstructionAST : @instructionAST {
  @expressionAST mTestExpression
  @location mEndOf_test_expression
  @instructionListAST mWhileInstructionList
  @location mEndOf_while_instruction
}

#----------------------------------------------------------------------------------------------------------------------*
#  SYNTAX                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension common_syntax {

  #--------------------------------------------------------------------------------------------------------------------*

  rule <instruction> ?!@instructionListAST ioInstructionList {
    $while$
    <expression> ?let @expressionAST testExpression
    let testExpressionEndLocation = @location.here
    $do$
    <instructionList> ?let instructionList
    let endOfInstruction = @location.here
    $end$
    ioInstructionList += !@whileInstructionAST.new {
      !testExpression
      !testExpressionEndLocation
      !instructionList
      !endOfInstruction
    }
  }
  
  #--------------------------------------------------------------------------------------------------------------------*

}

#----------------------------------------------------------------------------------------------------------------------*
#  SEMANTICS                                                                                                           *
#----------------------------------------------------------------------------------------------------------------------*

override method @whileInstructionAST analyze
  ?optionalReceiverType:let @receiverType inReceiverType
  ?context:let @semanticContext inContext
  ?mode:let @string inMode
  ?!temporary:@uint ioTemporaryIndex
  ?!staticStringMap:@globalLiteralStringMap ioGlobalLiteralStringMap
  ?!variableMap:@variableMap ioVariableMap
  ?!instructionListIR:@instructionListIR ioInstructionGenerationList
{
#--- Analyze test expression
  @instructionListIR testInstructionGenerationList = {}
  [mTestExpression analyzeExpression
    !optionalReceiverType:inReceiverType
    !optionalTargetType:.null
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaryIndex
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:testInstructionGenerationList
    ?expressionType:let testExpressionType
    ?generatedCode:let unused testExpressionGeneratedCode
    ?result:@variableKindIR testValueName
  ]
#--- Check inferred type
  if [testExpressionType kind] != .boolean then
    error mEndOf_test_expression : "test expression type is '" + [testExpressionType key] + "', it should be boolean"
  end
  [!?ioVariableMap openOverrideForRepeatBlock]
#--- Analyze instruction list
  @instructionListIR instructionGenerationList = {}
  [mWhileInstructionList analyzeBranchInstructionList
    !endOfInstructionList:mEndOf_while_instruction
    !optionalReceiverType:inReceiverType
    !context:inContext
    !mode:inMode
    !?temporary:ioTemporaryIndex
    !?staticStringMap:ioGlobalLiteralStringMap
    !?variableMap:ioVariableMap
    !?instructionListIR:instructionGenerationList
  ]
  [!?ioVariableMap closeOverride !mEndOf_while_instruction]
#--- Code generation
  ioInstructionGenerationList += !@whileInstructionIR.new {
    ![mEndOf_test_expression locationIndex]
    !testInstructionGenerationList
    !testValueName
    !instructionGenerationList
 }
}

#----------------------------------------------------------------------------------------------------------------------*
#  CODE GENERATION                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

class @whileInstructionIR : @abstractInstructionIR {
  @uint mLabelIndex
  @instructionListIR mTestInstructionGenerationList
  @variableKindIR mTestExpression
  @instructionListIR mInstructionGenerationList
}

#----------------------------------------------------------------------------------------------------------------------*

override getter @whileInstructionIR instructionCode -> @string outCode {
  outCode = "LABEL_" + mLabelIndex + ": {\n"
  outCode += [mTestInstructionGenerationList instructionListCode]
  outCode += "  if (" + [mTestExpression mangledName] + ") {\n"
  outCode += [mInstructionGenerationList instructionListCode]
  outCode += "    goto LABEL_" + mLabelIndex + " ;\n"
  outCode += "  }\n"
  outCode += "}\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @whileInstructionIR enterAccessibleEntities ?!@accessibleEntities ioAccessibleEntities {
  [mTestInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
  [mTestExpression enterAccessibleEntities !?ioAccessibleEntities]
  [mInstructionGenerationList enterAccessibleEntities !?ioAccessibleEntities]
}

#----------------------------------------------------------------------------------------------------------------------*
